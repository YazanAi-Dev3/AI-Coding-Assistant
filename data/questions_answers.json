[
  {
    "id": 1,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division. The calculator should take input from the user for two numbers and an operation (+, -, *, /).",
    "answer": "Here's a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division based on user input:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operation = input(\"Enter operation (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operation == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operation == \"-"
  },
  {
    "id": 2,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and return the result of the corresponding operation.",
    "answer": "Here's a simple Python program that implements a calculator as per the given requirements:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":\n            print(num1, \"-"
  },
  {
    "id": 3,
    "question": "Write a Python program to find the sum of all numbers in a list, where each number is the product of two prime numbers.",
    "answer": "To solve this problem, we first need to identify prime numbers. Here's a simple way to generate prime numbers up to a given limit using a function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_numbers_generator(limit):\n    primes = []\n    i = 2\n    while len(primes) < limit:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n```\n\nNow, we can write the main program to find the sum of all numbers in a list where each number is the product of two prime numbers:\n\n```python\ndef find_sum_of_prime_product(limit):\n    primes = prime_numbers_generator(limit//2"
  },
  {
    "id": 4,
    "question": "Write a Python function to find the factorial of a given number (n) using recursion.",
    "answer": "Here's a simple Python function to find the factorial of a given number (n) using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    :param int n: The given number.\n    :return: int The factorial of the given number.\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: n * factorial(n-1)\n        return n * factorial(n-1)\n```\n\nThis function takes an integer as an argument and returns the factorial of that number. The base case for the recursion is when the number is 0, and the function returns 1. For any other number, the function calls itself with the argument `n-1` and multiplies the result by the current number `n`. This process continues until the base case is reached, at which point the"
  },
  {
    "id": 5,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "To find the second largest number in a list, you can modify the code to find the largest number first and then find the second largest number by iterating through the list again. Here's an example Python code:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number\n    largest = max(numbers)\n\n    # Remove the largest number from the list\n    numbers.remove(largest)\n\n    # Find the second largest number\n    second_largest = max(numbers)\n\n    return second_largest\n\n# Test the function\nnumbers = [10, 20, 30, 40, 50]\nresult = second_largest(numbers)\nprint(f\"The second largest number in the list is {result}\")\n```\n\nOutput:\n```\nThe second largest number in the list is 40\n```\n\nThis code defines a function `second_largest` that takes a list of numbers as an argument. It uses the built-in `max`"
  },
  {
    "id": 6,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as inputs and return the result of the specified operation.",
    "answer": "Here's a simple Python program that implements a calculator as per your requirements:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":\n            print(num1, \"-\", num2,"
  },
  {
    "id": 7,
    "question": "Write a Python program to reverse a string without using in-built functions.",
    "answer": "Here's a simple Python program to reverse a string without using in-built functions:\n\n```python\ndef reverse_string(input_str):\n    # Initialize an empty string to store the reversed string\n    reversed_str = ''\n    \n    # Iterate through the input string in reverse order\n    for i in range(len(input_str)-1, -1, -1):\n        # Add each character to the reversed string\n        reversed_str += input_str[i]\n        \n    # Return the reversed string\n    return reversed_str\n\n# Test the function with some inputs\nprint(reverse_string('hello')) # Output: olleh\nprint(reverse_string('Python')) # Output: nohtyP\n```\n\nThis program defines a function called `reverse_string` that takes a single argument `input_str` which is the string to be reversed. It initializes an empty string `reversed_str` to store the reversed string. Then, it iterates through the input string in reverse"
  },
  {
    "id": 8,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "Here's a simple Python program to find the second largest number in a given list:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n    # Remove the largest number from the list\n    numbers.remove(largest)\n    # Find the second largest number in the updated list\n    second_largest = max(numbers)\n    return second_largest\n\n# Test the function with some input\nnumbers = [10, 20, 30, 40, 50]\nprint(second_largest(numbers))\n```\n\nThis program defines a function called `second_largest` that takes a list of numbers as an argument. It first finds the largest number in the list using the built-in `max` function, then removes it from the list using the `remove` method. The second largest number is then found by calling `max` again on the updated list. The function returns the second largest number.\n\nNote that this program"
  },
  {
    "id": 9,
    "question": "Write a Python function that accepts a list of numbers as an argument and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that fulfills the given requirement:\n\n```python\ndef sum_of_evens(numbers):\n    \"\"\"\n    This function accepts a list of numbers as an argument and returns the sum of all the even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_of_evens(numbers))  # Output: 12\n```"
  },
  {
    "id": 10,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the given operation.",
    "answer": "Here is a simple Python program that implements a calculator with the given functionality:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef calculator():\n    num1 = float(input(\"Enter first number: \"))\n    operator = input(\"Enter operator (+, -, *, /): \")\n    num2 = float(input(\"Enter second number: \"))\n\n    if operator == \"+\":\n        print(num1, \"+\", num2, \"=\", add(num1, num2))\n    elif operator == \"-\":\n        print(num1, \"-\", num2, \"=\", sub"
  },
  {
    "id": 11,
    "question": "Write a Python program to find the sum of numbers in a list, given that the list may contain negative numbers.",
    "answer": "Here's a simple Python program that finds the sum of numbers in a list, even if the list contains negative numbers:\n\n```python\ndef sum_list(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all numbers in the list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\n# Test the function with some examples\nnumbers = [1, 2, 3, 4, 5]\nprint(sum_list(numbers))\n\nnumbers = [1, 2, 3, 4, 5, -1, -2, -3]\nprint(sum_list(numbers))\n```\n\nIn this example, we define a function called `sum_list` that takes a list of numbers as an argument and returns the sum of all numbers in the list. We initialize a variable called `total` to 0 and then use a `for` loop to iterate through"
  },
  {
    "id": 12,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "To find the second largest number in a list, first we need to find the largest number. We can use the max() function in Python to get the largest number. After getting the largest number, we can use list comprehension to filter out the largest number and find the second largest number using max() function again.\n\nHere's the code:\n\n```python\ndef second_largest(numbers):\n    largest = max(numbers)\n    second_largest = max(filter(lambda x: x != largest, numbers))\n    return second_largest\n\n# Test the function\nnumbers = [10, 20, 30, 25, 40, 50, 35, 45]\nprint(second_largest(numbers)) # Output: 40\n```\n\nThis function takes a list as an argument and returns the second largest number in the list. The time complexity of this function is O(n), where n is the length of the list."
  },
  {
    "id": 13,
    "question": "Write a Python program to reverse a string without using the built-in reverse() method or slicing.",
    "answer": "To reverse a string in Python without using the built-in reverse() method or slicing, you can use a loop to iterate through each character in the string and add it to a new string in reverse order. Here's an example implementation:\n\n```python\ndef reverse_string(input_str):\n    reversed_str = ''\n    for i in range(len(input_str) - 1, -1, -1):\n        reversed_str += input_str[i]\n    return reversed_str\n\n# Test the function\ninput_str = 'Hello, World!'\noutput_str = reverse_string(input_str)\nprint(output_str)\n```\n\nIn this example, the `reverse_string()` function takes a string as an argument, initializes an empty string called `reversed_str`, and then uses a for loop to iterate through the input string from the end to the beginning. Each character is added to the `reversed_str` using the `+=` operator. Finally"
  },
  {
    "id": 14,
    "question": "Write a Python program to accept a list as input and return a new list containing only the even numbers from the original list.",
    "answer": "Here's a simple Python program to solve the problem:\n\n```python\ndef even_numbers(input_list):\n    \"\"\"\n    Function to return a new list containing only even numbers from the given list.\n\n    :param input_list: List\n    :return: List\n    \"\"\"\n    output_list = [num for num in input_list if num % 2 == 0]\n    return output_list\n\ninput_list = list(map(int, input(\"Enter the list numbers separated by space: \").split()))\nprint(\"Original List: \", input_list)\nprint(\"Even Numbers List: \", even_numbers(input_list))\n```\n\nThis program accepts a list as input from the user, filters out the even numbers using list comprehension, and returns the new list. The user is prompted to enter the list numbers separated by spaces."
  },
  {
    "id": 15,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all even numbers in the list.",
    "answer": "Here's a simple Python function that takes a list of numbers as an argument and returns the sum of all even numbers in the list:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))  # Output: 12\n```\n\nThis function initializes a variable `total` to 0 and iterates through each number in the list using a `for` loop. If the number is even (i.e., if its remainder when divided by 2 is 0), then it is added to the `total`"
  },
  {
    "id": 16,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in that list.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in that list.\n\n    :param numbers: List of numbers\n    :return: int, the sum of all even numbers in the list\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nThis function, named `sum_even_numbers`, takes a list called `numbers` as an argument. It initializes a variable `total` to 0 and then iterates through each number in the list using a `for` loop. If the number is even (i.e., if its remainder when divided by 2 is 0), it adds that number to the `total`. Finally, the function returns the value of `total`."
  },
  {
    "id": 17,
    "question": "Write a Python program to find the sum of numbers in a list. The list contains only integers.",
    "answer": "Here is a simple Python program to find the sum of numbers in a list:\n\n```python\n# Sample list\nnumbers = [1, 2, 3, 4, 5]\n\n# Function to find sum of list elements\ndef sum_list(numbers_list):\n    total = 0\n    for num in numbers_list:\n        total += num\n    return total\n\n# Call the function with the sample list\nprint(sum_list(numbers))\n```\n\nIn this example, we define a list `numbers` with some integer values. We also define a function `sum_list` which takes a list as an argument and initializes a variable `total` to zero. The function then iterates through each number in the list using a for loop, adding each number to the total variable. Once all the numbers have been added, the function returns the total value. We call this function with the `numbers` list as an argument and print the result."
  },
  {
    "id": 18,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n```\n\nYou can use this function by passing a list of numbers as an argument. For example:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(numbers)\nprint(result) # Output: 20\n```\n\nThis function initializes a variable `total` to 0, then iterates through each number in the list. If the number is even (i.e., if it has no remainder when divided by 2), it adds"
  },
  {
    "id": 19,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "Here's a simple Python program to find the second largest number in a given list. This program first sorts the list in descending order and then returns the second element of the sorted list.\n\n```python\ndef second_largest(numbers):\n    \"\"\"\n    :param numbers: A list of numbers\n    :return: The second largest number in the list\n    \"\"\"\n    numbers.sort(reverse=True)\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least 2 elements.\")\n    return numbers[1]\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5]\nprint(second_largest(numbers)) # Output: 4\n```\n\nIn the above example, the list `numbers` has more than 2 elements, so the function `second_largest()` returns the second largest number, which is 4.\n\nHowever, if the list has less than 2 elements, the function raises a `Value"
  },
  {
    "id": 20,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "To find the second largest number in a list, we first need to find the largest number and then find the second largest number by excluding the largest number from the list. Here's the Python code:\n\n```python\ndef second_largest(numbers):\n    max_num = max(numbers)\n    second_max = min(numbers[:len(numbers)-1])  # Exclude the last element from the list\n    if numbers.count(second_max) > 1:\n        return second_max\n    else:\n        return \"There is no second largest number in the list.\"\n\nnumbers = [1, 2, 3, 4, 5]\nprint(second_largest(numbers))\n```\n\nOutput:\n```\n3\n```\n\nIn the above code, we define a function `second_largest()` that takes a list as an argument. We use the `max()` function to find the largest number in the list. Then, we use the `min()` function with a slice of"
  },
  {
    "id": 21,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all even numbers in the list.",
    "answer": "Here's a Python function named `sum_even_numbers` that fulfills the given requirement:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in the list.\n\n    :param numbers: list of numbers\n    :return: int, the sum of all even numbers in the list\n    \"\"\"\n\n    sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            sum += number\n\n    return sum\n```\n\nUsage example:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = sum_even_numbers(numbers)\nprint(result)  # Expected output: 12\n```"
  },
  {
    "id": 22,
    "question": "Write a Python program to calculate the factorial of a given number using recursion.",
    "answer": "Here's a simple Python program that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnum = int(input(\"Enter a number: \"))\nresult = factorial(num)\nprint(f\"The factorial of {num} is {result}\")\n```\n\nIn this program, the `factorial` function takes an integer `n` as an argument and uses recursion to calculate its factorial. The base case for the recursion is when `n` equals 0, in which case the function returns 1. Otherwise, the function returns the product of `n` and the factorial of `n-1`. The user is prompted to enter a number, and the function is called with that number as the argument. The result is then printed"
  },
  {
    "id": 23,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the corresponding operation.",
    "answer": "Here's a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":"
  },
  {
    "id": 24,
    "question": "Write a Python program to calculate the factorial of a given number (n!) using recursion.",
    "answer": "Here's a simple Python program to calculate the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    Recursive function to calculate the factorial of a given number (n!).\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnumber = 5\nprint(f\"The factorial of {number} is {factorial(number)}\")\n```\n\nIn this program, we define a recursive function `factorial(n)` which takes an integer `n` as an argument. The base case for the recursion is when `n` equals to 0, in which case the function returns 1. Otherwise, the function multiplies `n` with the result of calling the `factorial` function with `n-1` as the argument. This process continues until the base case is reached."
  },
  {
    "id": 25,
    "question": "Write a Python function that accepts a list of numbers and returns the second largest number in the list.",
    "answer": "Here's a Python function that accepts a list of numbers as an argument and returns the second largest number in the list:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n\n    # Filter out the largest number and find the second largest\n    second_largest = max(filter(lambda x: x != largest, numbers))\n\n    return second_largest\n```\n\nExample usage:\n\n```python\nnumbers = [10, 5, 20, 15, 3, 25, 12]\nprint(second_largest(numbers))  # Output: 15\n```\n\nNote: This solution assumes that the input list always contains at least two distinct numbers. If the list may be empty or contain only one number, additional error checking or handling would be required."
  },
  {
    "id": 26,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number (0)\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n\n    # Print the current number and update a and b\n    print(c)\n    a, b = b, c\n```\n\nOutput:\n\n```\n0\n1\n1\n2\n3\n5\n8\n13\n21\n```"
  },
  {
    "id": 27,
    "question": "Write a Python function to reverse the words in a given string without changing the order of the characters in each word.",
    "answer": "Here's a Python function named `reverse_words` that reverses the order of words in a given string without modifying the characters within each word:\n\n```python\ndef reverse_words(string):\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n# Test the function\ninput_string = \"The quick brown fox jumps over the lazy dog\"\noutput = reverse_words(input_string)\nprint(output)\n```\n\nOutput:\n```\ndog lazy the over jumps fox brown quick The\n```"
  },
  {
    "id": 28,
    "question": "Write a Python function that accepts a list of numbers and returns the sum of the numbers that are greater than zero.",
    "answer": "Here's a Python function that fits the description:\n\n```python\ndef sum_positive_numbers(numbers):\n    \"\"\"\n    This function accepts a list of numbers and returns the sum of the numbers that are greater than zero.\n\n    :param numbers: list\n    :return: int\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number > 0:\n            total += number\n    return total\n```\n\nYou can use this function like so:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_positive_numbers(numbers)) # Output: 55\n```\n\nThis function initializes a variable `total` to 0, then iterates through each number in the input list using a `for` loop. If the number is greater than 0, it is added to the `total` variable. Finally"
  },
  {
    "id": 29,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "To find the second largest number in a list, you can first find the largest number and then remove it from the list to find the second largest number. Here's the code:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n\n    # Remove the largest number from the list\n    numbers.remove(largest)\n\n    # Find the second largest number in the updated list\n    second_largest = max(numbers)\n\n    return second_largest\n\n# Test the function\nnumbers = [10, 20, 30, 40, 50]\nprint(\"The second largest number in the list is:\", second_largest(numbers))\n```\n\nOutput:\n```\nThe second largest number in the list is: 40\n```\n\nNote: This solution assumes that the input list contains at least two unique numbers. If the list contains only one number or all numbers are the same, then the function will raise an"
  },
  {
    "id": 30,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and display the result of the operation.",
    "answer": "Here is a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":"
  },
  {
    "id": 31,
    "question": "Write a Python program to find the factorial of a number using recursion.",
    "answer": "Here's a simple Python program to find the factorial of a number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function uses recursion to find the factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnum = int(input(\"Enter a number: \"))\nresult = factorial(num)\nprint(f\"The factorial of {num} is {result}\")\n```\n\nThis program defines a `factorial` function that takes an integer `n` as an argument. The function checks if `n` is equal to 0. If it is, the function returns 1 (since the factorial of 0 is 1). Otherwise, the function calls itself with the argument `n-1` and multiplies the result by `n`. This process continues until `n` is 0, at which point the recursion ends and the final result is returned. The program then"
  },
  {
    "id": 32,
    "question": "Write a Python program to find the sum of all numbers in a list, where the numbers are even and greater than 5.",
    "answer": "Here's a simple Python program that solves the problem:\n\n```python\nnumbers = [6, 8, 10, 12, 5, 7, 11, 13, 15]\nsum = 0\n\n# Iterate through the list and add even numbers greater than 5 to the sum\nfor num in numbers:\n    if num % 2 == 0 and num > 5:\n        sum += num\n\nprint(\"The sum of even numbers greater than 5 in the list is:\", sum)\n```\n\nIn this example, we have a list called `numbers` that contains several integers. We initialize a variable called `sum` with a value of 0. We then use a `for` loop to iterate through each number in the list. For each number, we use an `if` statement to check if it is even and greater than 5. If the condition is true, we add the number to the `sum`. After the loop finishes,"
  },
  {
    "id": 33,
    "question": "Write a Python function `double_list` that takes a list as an argument and returns a new list where each element in the original list is multiplied by 2.",
    "answer": "Here's how you can define the `double_list` function in Python:\n\n```python\ndef double_list(input_list):\n    \"\"\"\n    This function takes a list as an argument and returns a new list where each element is multiplied by 2.\n    \"\"\"\n    output_list = []\n    for num in input_list:\n        output_list.append(num * 2)\n    return output_list\n```\n\nYou can test the function with the following example:\n\n```python\nnumbers = [1, 2, 3, 4]\ndoubled_numbers = double_list(numbers)\nprint(doubled_numbers)\n```\n\nOutput:\n\n```python\n[2, 4, 6, 8]\n```"
  },
  {
    "id": 34,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to choose which operation they want to perform using input().",
    "answer": "Here's a simple Python program for a calculator that performs addition, subtraction, multiplication, and division operations based on user input:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    print(\"Select operation:\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n\n    choice = input(\"Enter choice (1/2/3/4): \")\n\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number:"
  },
  {
    "id": 35,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that accomplishes this task:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    Function to find the sum of all even numbers in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of all even numbers in the list.\n    \"\"\"\n\n    # Initialize sum variable\n    sum = 0\n\n    # Iterate through each number in the list\n    for num in numbers:\n\n        # Check if number is even\n        if num % 2 == 0:\n\n            # Add even number to sum\n            sum += num\n\n    # Return the final sum\n    return sum\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))  # Output: 12\n```"
  },
  {
    "id": 36,
    "question": "Write a Python program to find the sum of numbers in a list.",
    "answer": "Here's a simple Python program to find the sum of numbers in a given list:\n\n```python\n# Sample list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Function to find the sum of list elements\ndef sum_list(input_list):\n    total = 0\n    for num in input_list:\n        total += num\n    return total\n\n# Call the function and print the result\nprint(sum_list(numbers))\n```\n\nIn this example, we define a list `numbers` with some sample numbers. We also define a function `sum_list()` that takes a list as an argument and calculates the sum of its elements using a `for` loop and a variable `total`. Finally, we call the function with the `numbers` list as an argument and print the result."
  },
  {
    "id": 37,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and return the result of the operation.",
    "answer": "Here is a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef calculator():\n    num1 = float(input(\"Enter first number: \"))\n    operator = input(\"Enter operator (+, -, *, /): \")\n    num2 = float(input(\"Enter second number: \"))\n\n    if operator == \"+\":\n        print(num1, \"+\", num2, \"=\", add(num1, num2))\n    elif operator == \"-\":\n        print("
  },
  {
    "id": 38,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all even numbers in the list.",
    "answer": "Here's a Python function that does that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n```\n\nYou can call this function with a list of numbers as an argument, like this:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\nsum_even = sum_even_numbers(numbers)\nprint(sum_even) # Output: 12\n```\n\nThis function initializes a variable `total` to 0, then iterates through each number in the list using a `for` loop. If the number is even (i.e., if its remainder when divided by 2 is 0), it adds the number"
  },
  {
    "id": 39,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the specified operation.",
    "answer": "Here is a simple Python program that implements a calculator using if-else statements to handle the different operators:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef calculator(num1, num2, operation):\n    if operation == \"+\":\n        return add(num1, num2)\n    elif operation == \"-\":\n        return subtract(num1, num2)\n    elif operation == \"*\":\n        return multiply(num1, num2)\n    elif operation == \"/\":\n        return divide(num1, num2)\n    else:\n        raise ValueError(\"Invalid operator\")"
  },
  {
    "id": 40,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division using user input.",
    "answer": "Here's a simple Python calculator program that takes user input for two numbers and an operator to perform the specified arithmetic operation.\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif choice == '1':\n    print(num1, \"+\", num2, \"=\", add(num"
  },
  {
    "id": 41,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "Here's a simple Python solution to find the second largest number in a list:\n\n```python\ndef second_largest(numbers):\n    \"\"\"\n    Function to find the second largest number in a list.\n    \"\"\"\n    numbers.sort(reverse=True)\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least 2 elements\")\n    return numbers[1]\n\n# Test the function\nnumbers = [10, 20, 30, 40, 50]\nsecond_largest_number = second_largest(numbers)\nprint(\"The second largest number in the list is:\", second_largest_number)\n```\n\nThis function, `second_largest()`, takes a list as an argument and returns the second largest number. It sorts the list in descending order and then returns the second element (index 1). If the list has less than 2 elements, it raises a `ValueError`."
  },
  {
    "id": 42,
    "question": "Write a Python program to implement a simple calculator with addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations.\n\n```python\ndef calculator():\n    print(\"Select operation:\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n\n    choice = input(\"Enter choice (1/2/3/4): \")\n\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n\n    if choice == '1':\n        print(num1, \"+\", num2, \"=\", num1 + num2)\n    elif choice == '2':\n        print(num1, \"-\", num2, \"=\", num1 - num2)\n    elif choice == '3':\n        print(num1, \"*\", num2, \"=\", num1 * num2)\n    elif choice == '4':"
  },
  {
    "id": 43,
    "question": "Write a Python function that takes a list of numbers as an argument and returns a new list with each number multiplied by 2.",
    "answer": "Here's the Python code for the function you described:\n\n```python\ndef double_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a new list with each number multiplied by 2.\n\n    :param numbers: list\n    :return: list\n    \"\"\"\n\n    # Use a list comprehension to create a new list with each number multiplied by 2\n    new_numbers = [num * 2 for num in numbers]\n\n    # Return the new list\n    return new_numbers\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5]\ndoubled_numbers = double_numbers(numbers)\nprint(doubled_numbers) # Output: [2, 4, 6, 8, 10]\n```"
  },
  {
    "id": 44,
    "question": "Write a Python function that takes a list of integers as an argument and returns a new list containing only the even numbers.",
    "answer": "Here is a simple Python function that does exactly that:\n\n```python\ndef even_numbers(numbers):\n    \"\"\"\n    Takes a list of integers as an argument and returns a new list containing only the even numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n```\n\nYou can use list comprehension to create a new list with the even numbers filtered from the input list. The `if num % 2 == 0` condition checks if a number is even by checking if its remainder when divided by 2 is zero."
  },
  {
    "id": 45,
    "question": "Write a Python program to find the second largest number in a list of numbers.",
    "answer": "Here's a simple Python program to find the second largest number in a given list:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number\n    largest = max(numbers)\n\n    # Remove the largest number from the list\n    numbers.remove(largest)\n\n    # Find and return the second largest number\n    second_largest = max(numbers)\n\n# Test the function\nnumbers = [7, 10, 4, 3, 20, 15]\nprint(second_largest(numbers))\n```\n\nIn this solution, we define a function `second_largest` that takes a list of numbers as an argument. We first find the largest number in the list using the built-in `max` function. Then, we remove this largest number from the list using the `remove` method. Finally, we find and return the second largest number in the updated list using the `max` function again.\n\nHowever, it's important to note that this solution assumes that"
  },
  {
    "id": 46,
    "question": "Write a Python function that takes two lists as arguments and returns a new list that contains all the common elements in both lists.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef common_elements(list1, list2):\n    \"\"\"\n    This function returns a new list that contains all the common elements in two given lists.\n    \"\"\"\n    return list(set(list1) & set(list2))\n```\n\nExplanation:\n\n1. We define a function called `common_elements` that takes two lists as arguments: `list1` and `list2`.\n2. We use a docstring to describe what the function does.\n3. Inside the function, we use the `set` data type to convert both lists into sets (since sets do not allow duplicate elements).\n4. We use the `&` operator to find the intersection of the two sets, which returns a new set that contains only the common elements.\n5. Finally, we convert the resulting set back into a list using the `list()` function and return it.\n\nExample usage:\n\n```python\nlist1 = [1,"
  },
  {
    "id": 47,
    "question": "Write a Python program to reverse the string without using in-built functions like `reverse()`.",
    "answer": "Here's a simple Python program that reverses a given string without using any built-in functions:\n\n```python\ndef reverse_string(string):\n    # Initialize an empty string to store the reversed string\n    reversed_string = ''\n\n    # Iterate through the given string from end to start\n    for index in range(len(string) - 1, -1, -1):\n        # Add the character at the current index to the reversed string\n        reversed_string += string[index]\n\n    # Return the reversed string\n    return reversed_string\n\n# Test the function with some inputs\nprint(reverse_string('Hello World'))\n# Output: dlroW olleH\n```\n\nIn this program, we define a function `reverse_string` that takes a single argument `string`. Inside the function, we initialize an empty string `reversed_string` to store the reversed string. We then iterate through the given string from the last index to the first index using a for loop with a negative"
  },
  {
    "id": 48,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    Function to return the sum of all even numbers in a list.\n\n    :param numbers: list of numbers\n    :return: int, the sum of all even numbers in the list\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_even_numbers(numbers))\n```\n\nOutput:\n\n```\n20\n```"
  },
  {
    "id": 49,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division. The calculator should accept user input for two numbers and an operator (+, -, *, /), and then display the result of the operation.",
    "answer": "Here is a simple Python program to create a calculator as per the requirements:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":\n            print(num1"
  },
  {
    "id": 50,
    "question": "Write a Python program to find the sum of all the numbers in a list.",
    "answer": "Here's a simple Python program to find the sum of all the numbers in a given list:\n\n```python\ndef sum_list(numbers):\n    \"\"\"\n    This function calculates and returns the sum of all numbers in the given list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\n# Test the function with a list of numbers\nnumbers = [1, 2, 3, 4, 5]\nresult = sum_list(numbers)\nprint(\"The sum of the numbers in the list is:\", result)\n```\n\nThis program defines a function `sum_list()` that takes a list of numbers as an argument and returns the sum of all the numbers in the list. The function initializes a variable `total` with the value 0, then iterates through the list using a `for` loop, adding each number to the `total` variable using the `+=` operator. Once all the numbers have been added, the function returns the final `total` value. The function"
  },
  {
    "id": 51,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division using user inputs.",
    "answer": "Here's a simple Python program to implement a calculator that performs addition, subtraction, multiplication, and division based on user inputs:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif choice == '1':\n    print(num1, \"+\", num2, \"=\", add"
  },
  {
    "id": 52,
    "question": "Write a Python program to calculate the sum of numbers from a list.",
    "answer": "Here's a simple Python program to calculate the sum of numbers from a given list:\n\n```python\n# Define the list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Calculate the sum of numbers using the sum() function\nsum_of_numbers = sum(numbers)\n\n# Print the result\nprint(\"The sum of the numbers is:\", sum_of_numbers)\n```\n\nIn this example, we define a list of numbers and use the built-in `sum()` function to calculate the sum of all numbers in the list. Finally, we print the result."
  },
  {
    "id": 53,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python calculator program that uses a dictionary to map mathematical symbols to their corresponding functions:\n\n```python\ndef calculator(expression):\n    try:\n        # Define the operators and their precedence\n        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}\n        operators = {}\n        numbers = []\n\n        # Process each token in the expression\n        i = 0\n        while i < len(expression):\n            # Check if the current character is a number\n            if expression[i].isdigit():\n                # Add digits to the current number until the next non-digit character is encountered\n                number = expression[i]\n                while i + 1 < len(expression) and expression[i + 1].isdigit():\n                    number += expression[i + 1]\n                    i += 1\n                numbers.append(float(number))\n                i += 1"
  },
  {
    "id": 54,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "Here's a Python solution to find the second largest number in a list. First, we find the largest number using the max() function. Then, we use a list comprehension to create a new list that only contains the numbers in the original list that are not equal to the largest number. Finally, we use the max() function again to find the second largest number from this new list.\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n\n    # Filter out the largest number from the list\n    filtered_numbers = [num for num in numbers if num != largest]\n\n    # Find the second largest number in the filtered list\n    second_largest = max(filtered_numbers)\n\n    return second_largest\n\n# Test the function\nnumbers = [10, 20, 30, 25, 35, 20]\nprint(second_largest(numbers))  # Output: 30\n```\n\nIn"
  },
  {
    "id": 55,
    "question": "Write a Python function that takes a list of numbers as an argument and returns a new list with each number multiplied by 2.",
    "answer": "Here's the solution to the problem statement:\n\n```python\ndef double_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a new list with each number multiplied by 2.\n\n    :param numbers: list of numbers\n    :return: list of numbers multiplied by 2\n    \"\"\"\n    return [num * 2 for num in numbers]\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5]\nprint(double_numbers(numbers))\n```\n\nIn the above example, the function `double_numbers` takes a list `numbers` as an argument and returns a new list with each number multiplied by 2 using list comprehension. The function is documented with a docstring to explain its purpose and the expected input and output. The function is then tested by passing a list `[1, 2, 3, 4, 5]` as an argument and printing"
  },
  {
    "id": 56,
    "question": "Write a Python program to find the sum of all numbers in a list, given that the list contains only positive integers.",
    "answer": "Here's a simple Python program to find the sum of all numbers in a list:\n\n```python\ndef sum_list(numbers):\n    \"\"\"\n    This function computes the sum of all numbers in a given list.\n    :param numbers: list\n    :return: int\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nsum_result = sum_list(numbers)\nprint(f\"The sum of the numbers in the list is: {sum_result}\")\n```\n\nThis code defines a function `sum_list` that takes a list of numbers as an argument and computes their sum using a for loop. The sum is then returned and printed as the result. The input list in this example contains only positive integers."
  },
  {
    "id": 57,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python calculator program that uses a dictionary to map each operation to its corresponding function:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\noperations = {\n    '+': add,\n    '-': subtract,\n    '*': multiply,\n    '/': divide\n}\n\nprint(\"Enter first number:\")\nnum1 = float(input())\nprint(\"Enter second number:\")\nnum2 = float(input())\nprint(\"Enter operation (+, -, *, /):\")\noperation = input()\n\ntry:\n    result = operations[operation](num1, num2)\n    print(f\"Result: {result}\")\nexcept KeyError:"
  },
  {
    "id": 58,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as inputs from the user and return the result of the operation.",
    "answer": "Here's a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef calculator():\n    num1 = float(input(\"Enter first number: \"))\n    operator = input(\"Enter operator (+, -, *, /): \")\n    num2 = float(input(\"Enter second number: \"))\n\n    if operator == \"+\":\n        result = num1 + num2\n    elif operator == \"-\":\n        result = num1 - num2\n    elif operator == \"*\":\n        result = num1 * num2\n    elif operator == \"/\":\n        result = num1 / num2\n    else:\n        print(\"Invalid operator. Please use +, -, *, or /.\")\n        return\n\n    print(f\"The result is {result}\")\n\ncalculator()\n```\n\nThis program defines a `calculator"
  },
  {
    "id": 59,
    "question": "Write a Python program to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple Python program that calculates the factorial of a given number using a recursive function:\n\n```python\n# Function to find the factorial of a given number using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Take input from the user\nnumber = int(input(\"Enter a number: \"))\n\n# Calculate and print the factorial\nprint(\"The factorial of\", number, \"is\", factorial(number))\n```\n\nThis program defines a recursive function `factorial` that takes an integer `n` as an argument and returns its factorial. The base case for the recursion is when `n` equals 0, in which case the function returns 1. Otherwise, it returns the product of `n` and the factorial of `n-1`. The user is asked to input a number, and the program calculates and prints the factorial of that number."
  },
  {
    "id": 60,
    "question": "Write a Python program to find the sum of all numbers in a list that are greater than a given number `n`.",
    "answer": "Here's a simple Python program to find the sum of all numbers in a list that are greater than a given number `n`:\n\n```python\ndef greater_than_sum(numbers, n):\n    \"\"\"\n    Function to find the sum of all numbers in a list that are greater than a given number `n`.\n\n    :param numbers: List of numbers\n    :param n: Number to compare with\n    :return: Sum of all numbers greater than `n` in the list\n    \"\"\"\n\n    # Filter the list to keep only the numbers greater than `n`\n    greater_numbers = [num for num in numbers if num > n]\n\n    # Calculate the sum of the filtered list\n    sum_greater_numbers = sum(greater_numbers)\n\n    # Return the result\n    return sum_greater_numbers\n\n# Test the function with some sample data\nnumbers = [1, 2, 3, 4, 5, 6, 7"
  },
  {
    "id": 61,
    "question": "Write a Python program to find the sum of all even numbers in a list.",
    "answer": "Here is a simple Python program to find the sum of all even numbers in a given list:\n\n```python\n# Given list\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Function to find sum of even numbers\ndef sum_of_evens(numbers_list):\n sum = 0\n for num in numbers_list:\n if num % 2 == 0:\n sum += num\n return sum\n\n# Call the function and print the result\nprint(sum_of_evens(numbers))\n```\n\nOutput: `20`\n\nThis program defines a function `sum_of_evens` which takes a list as an argument and initializes a variable `sum` to store the sum of even numbers. It then iterates through each number in the list using a `for` loop. If the number is even (i.e., if its remainder when divided by 2 is 0), it is added to the sum. Finally, the function returns"
  },
  {
    "id": 62,
    "question": "Write a Python function to find the factorial of a given number (n) using recursion.",
    "answer": "Here's a Python function that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5)) # Output: 120\n```\n\nIn this function, the base case is when `n` is equal to 0, in which case the function returns 1. Otherwise, the function calls itself with the argument `n-1` and multiplies the result by `n`. This continues until the base case is reached, at which point the recursion unwinds and the final result is obtained."
  },
  {
    "id": 63,
    "question": "Write a Python program to find the factorial of a given number using recursion.",
    "answer": "Here's a Python program that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = int(input(\"Enter a positive integer: \"))\nif number < 0:\n    print(\"Factorial is not defined for negative numbers.\")\nelse:\n    result = factorial(number)\n    print(f\"The factorial of {number} is {result}.\")\n```\n\nThis program takes an input number and checks if it's a positive integer. If the number is valid, it recursively calculates the factorial by multiplying the number with the factorial of the number minus one until it reaches the base case (n=0), at which point it returns 1. The result is then printed out."
  },
  {
    "id": 64,
    "question": "Write a Python function that takes a list of integers as an argument and returns the largest product of any contiguous subarray of the list.",
    "answer": "Here's a Python function that solves the problem using Kadane's algorithm:\n\n```python\ndef max_subarray_product(nums):\n    \"\"\"\n    :param nums: List of integers\n    :return: The largest product of any contiguous subarray\n    \"\"\"\n    current_product = 1\n    max_product = current_product\n\n    for num in nums:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        max_product = max(max_product, current_product)\n\n    return max_product\n```\n\nThis function initializes the variables `current_product` and `max_product` to 1. It then iterates through the input list, updating `current_product` to the product of the current number and the previous product, and updating `max_product` to the maximum of the current product and the previous maximum product. The function returns the final"
  },
  {
    "id": 65,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif choice == '1':\n    print(num1, \"+\", num2, \"=\", add(num1, num2"
  },
  {
    "id": 66,
    "question": "Write a Python program to find the sum of numbers from a list, but only include the numbers that are greater than zero.",
    "answer": "Here's a Python solution for the problem:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum = 0\n\n# Iterate through the list and add only the numbers greater than zero to sum\nfor num in numbers:\n    if num > 0:\n        sum += num\n\n# Print the final sum\nprint(sum)\n```\n\nThis program initializes an empty list called `numbers` with some integers. It also initializes a variable called `sum` with a value of 0. The program then uses a for loop to iterate through each number in the list. For each number, it checks if the number is greater than zero using the `if` statement. If the number is greater than zero, it adds the number to the sum variable using the `+=` operator. Finally, the program prints the value of the sum variable."
  },
  {
    "id": 67,
    "question": "Write a Python function to reverse a string without using in-built functions.",
    "answer": "Here's a simple Python function that reverses a given string without using any built-in functions:\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    This function reverses a given string without using any built-in functions.\n\n    Args:\n        input_str (str): The given string to be reversed.\n\n    Returns:\n        str: The reversed string.\n    \"\"\"\n\n    # Initialize an empty string to store the reversed string\n    reversed_str = ''\n\n    # Iterate through the given string from the end to the beginning\n    for index in range(len(input_str) - 1, -1, -1):\n        reversed_str += input_str[index]\n\n    return reversed_str\n```\n\nExample usage:\n\n```python\n>>> reverse_string('Hello')\n'olleH'\n```\n\nThis function uses a `for` loop to iterate through the string from the end to the beginning and adds each character to the `revers"
  },
  {
    "id": 68,
    "question": "Write a Python program to find the second largest number in a list.",
    "answer": "Here's a simple Python program to find the second largest number in a list. This solution assumes that the list contains at least two unique numbers.\n\n```python\ndef second_largest(numbers):\n    # Find the largest number\n    largest = max(numbers)\n\n    # Remove the largest number from the list\n    numbers.remove(largest)\n\n    # Find the second largest number\n    second_largest = max(numbers)\n\n    return second_largest\n\n# Test the function\nnumbers = [10, 15, 20, 25, 30]\nresult = second_largest(numbers)\nprint(\"The second largest number is:\", result)\n```\n\nThis program defines a function `second_largest` that takes a list as an argument. It first finds the largest number using the `max` function, then removes it from the list using the `remove` method. Finally, it finds the second largest number using the `max` function again.\n\nHowever, it's important to"
  },
  {
    "id": 69,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        print(\"Error! Division by zero is not allowed.\")\n        return None\n    else:\n        return x / y\n\nprint(\"Select operation:\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    if choice in ('1', '2', '3'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number"
  },
  {
    "id": 70,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division using user input.",
    "answer": "Here's a simple Python calculator program that takes user input for two numbers and an operation symbol (+, -, *, /) to perform the desired arithmetic operation:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif operator == \"-\":\n            print(num1, \"-\", num2,"
  },
  {
    "id": 71,
    "question": "Write a Python program to print the Fibonacci sequence up to a given number 'n'.",
    "answer": "Here is a simple Python program to print the Fibonacci sequence up to a given number 'n'.\n\n```python\ndef fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n\n# Get user input for 'n'\nn = int(input(\"Enter the number up to which you want to print the Fibonacci sequence: \"))\nfibonacci(n)\n```\n\nThis program uses a `def`inition for a function named `fibonacci` which takes an argument `n`. The function uses two variables `a` and `b` initially set to `0` and `1` respectively. The while loop runs as long as the value of `a` is less than the given number `n`. Inside the loop, the current value of `a` is printed using the `print` statement and then `a` and `b` are updated for the next iteration. Once the loop term"
  },
  {
    "id": 72,
    "question": "Write a Python program to print the Fibonacci sequence up to n numbers.",
    "answer": "Here's a Python program to print the Fibonacci sequence up to a given number 'n':\n\n```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    print(fib_sequence)\n\n# Test the function\nfibonacci(10)\n```\n\nThis program defines a function `fibonacci(n)` that generates the Fibonacci sequence up to the given number 'n'. The function initializes the sequence with the first two numbers, 0 and 1. Then, it enters a while loop that continues until the length of the sequence is greater than or equal to 'n'. In each iteration of the loop, the function appends the sum of the last two numbers in the sequence and continues until the desired length is reached. Finally, it prints the generated sequence."
  },
  {
    "id": 73,
    "question": "Write a Python program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Python program to find the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n    :param n: The number whose factorial is to be calculated.\n    :return: The factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnumber = int(input(\"Enter a number: \"))\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\nIn this program, the `factorial` function is defined with a single parameter `n`. The function checks if the number `n` is equal to zero. If it is, the function returns 1 (since the factorial of 0 is 1). Otherwise, the function calls itself with the argument `n-1` and multiplies the result with"
  },
  {
    "id": 74,
    "question": "Write a Python function `reverse_string` that takes a string as an argument and returns the reversed version of that string.",
    "answer": "Here is a simple Python function `reverse_string` that takes a string as an argument and returns the reversed version of that string:\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    Reverse a given string.\n\n    :param input_str: str\n    :return: str\n    \"\"\"\n    return input_str[::-1]\n```\n\nThis function uses Python's slice notation to reverse the given string. The double colon `::` is used to specify a slice that starts at the end of the string and moves backwards to the beginning. The `-1` value indicates that the last character should be the starting index for the slice. This results in the string being reversed.\n\nExample usage:\n\n```python\n>>> reverse_string(\"hello\")\n'olleh'\n```\n\n```python\n>>> reverse_string(\"Python\")\n'htonoyP'\n```"
  },
  {
    "id": 75,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program that implements a calculator using a dictionary to map the operations to functions, and takes user input for the numbers and operation:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\noperations = {\n    '+': add,\n    '-': subtract,\n    '*': multiply,\n    '/': divide\n}\n\nprint(\"Enter 'q' to quit\")\nwhile True:\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        result = operations[operator](num1,"
  },
  {
    "id": 76,
    "question": "Write a Python function that accepts a list of numbers as an argument and returns a new list that contains only the even numbers from the original list.",
    "answer": "Here's a Python function named `even_numbers` that accepts a list of numbers as an argument and returns a new list containing only the even numbers:\n\n```python\ndef even_numbers(numbers):\n    even_list = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n```\n\nExample usage:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers_list = even_numbers(numbers)\nprint(even_numbers_list)\n```\n\nOutput:\n\n```python\n[2, 4, 6]\n```"
  },
  {
    "id": 77,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. Usually starting with 0 and 1. Here's a Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number (0)\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n    \n    # Update the values of a and b\n    a, b = b, c\n    \n# Print the last number (the 10th one)\nprint(b)\n```\n\nThis program uses a for loop to iterate 9 times, calculating each new number in the sequence and updating the values of `a` and `b`. The first number (0) is printed before the loop starts. The last number (the"
  },
  {
    "id": 78,
    "question": "Write a Python function to find the common elements between two lists.",
    "answer": "To find the common elements between two lists in Python, you can use the built-in set data type and list comprehension. Here's a simple function called `common_elements()`:\n\n```python\ndef common_elements(list1, list2):\n    # Convert both lists to sets and find their intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1 & set2\n\n    # Convert the set back to a list and return it\n    return list(common)\n```\n\nThis function takes two lists as arguments, converts them to sets, finds their intersection, and then converts the resulting set back to a list before returning it.\n\nExample usage:\n\n```python\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(common_elements(list1, list2))  # Output: [4, 5]\n```"
  },
  {
    "id": 79,
    "question": "Write a Python function that takes a list of numbers and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    Function to calculate the sum of all even numbers in a given list.\n\n    :param numbers: list\n    :return: int\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nYou can test this function with different lists, like this:\n\n```python\nprint(sum_even_numbers([1, 2, 3, 4, 5])) # Output: 10\nprint(sum_even_numbers([-2, 1, 0, 3, 5])) # Output: 2\nprint(sum_even_numbers([])) # Output: 0\n```"
  },
  {
    "id": 80,
    "question": "Write a Python program to find the sum of two numbers using user input.",
    "answer": "Here's a simple Python program that prompts the user to input two numbers and then calculates and prints their sum:\n\n```python\n# Ask the user for two numbers\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\n# Calculate the sum of the two numbers\nsum = num1 + num2\n\n# Print the sum to the console\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n```\n\nThis program uses the `input()` function to get user input as strings, which are then converted to floating-point numbers using the `float()` function. The sum of the two numbers is calculated using the `+` operator, and the result is printed to the console using the `print()` function."
  },
  {
    "id": 81,
    "question": "Write a Python program to implement a simple calculator with addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the operation.",
    "answer": "Here is a simple Python program that implements a calculator with addition, subtraction, multiplication, and division operations:\n\n```python\ndef calculator(num1, num2, operator):\n    if operator == '+':\n        result = num1 + num2\n    elif operator == '-':\n        result = num1 - num2\n    elif operator == '*':\n        result = num1 * num2\n    elif operator == '/':\n        if num2 != 0:\n            result = num1 / num2\n        else:\n            print(\"Error: Cannot divide by zero\")\n            return None\n    else:\n        print(\"Invalid operator\")\n        return None\n\n    return result\n\n# Test the calculator function\nnum1 = 5\nnum2 = 3\noperator = '+'\nprint(calculator(num1, num2, operator)) # Output: 8\n\nnum1 ="
  },
  {
    "id": 82,
    "question": "Write a Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in that list.",
    "answer": "Here's the Python function that takes a list of numbers as an argument and returns the sum of all the even numbers in that list:\n\n```python\ndef sum_even_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nThis function is named `sum_even_numbers` and it takes a single argument `numbers` which is a list of numbers. It initializes a variable `total` to keep track of the sum of even numbers. Then it iterates through each number in the list using a `for` loop. For each number, it checks if it's even by using the modulo operator `%` and checking if the remainder is zero. If the number is even, it adds it to the `total` variable. Finally, the function returns the value of `total` after all the even numbers have been added."
  },
  {
    "id": 83,
    "question": "Write a Python program to find the sum of numbers from a list. The list contains only integers.",
    "answer": "Here's a simple Python program to find the sum of numbers from a list:\n\n```python\n# Define the list\nnumbers = [1, 2, 3, 4, 5]\n\n# Use the sum() function to find the sum of all numbers in the list\nsum = sum(numbers)\n\n# Print the sum\nprint(\"The sum of numbers in the list is:\", sum)\n```\n\nIn this example, the `sum()` function is used to calculate the sum of all the numbers in the list `numbers`. The sum is then printed to the console using the `print()` function."
  },
  {
    "id": 84,
    "question": "Write a Python function that takes a list of numbers and returns the sum of all even numbers in the list.",
    "answer": "Here's a simple Python function that does that:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the sum of all even numbers in the list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n```\n\nYou can call this function with a list of numbers like this:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(numbers)\nprint(result) # Output: 20\n```"
  },
  {
    "id": 85,
    "question": "Write a Python program to find the common elements between two lists.",
    "answer": "To find the common elements between two lists in Python, you can use the set data structure and list comprehension. Here's the code:\n\n```python\n# Two input lists\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 5]\n\n# Convert lists to sets, find intersection, and convert back to list\ncommon_elements = list(set(list1) & set(list2))\n\n# Print the result\nprint(\"Common elements:\")\nprint(common_elements)\n```\n\nThis code snippet first converts both input lists to sets, then finds the intersection of these sets using the `&` operator, and finally converts the result back to a list. This method works efficiently for large lists as well."
  },
  {
    "id": 86,
    "question": "Write a Python program to find the sum of two numbers using user input.",
    "answer": "Here's a simple Python program that asks for user input and finds the sum of two numbers:\n\n```python\n# Take user input for first number\nnum1 = int(input(\"Enter the first number: \"))\n\n# Take user input for second number\nnum2 = int(input(\"Enter the second number: \"))\n\n# Find the sum of the two numbers\nsum = num1 + num2\n\n# Display the sum\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n```\n\nThis program uses the `input()` function to get user input as a string, then converts the strings to integers using the `int()` function. After that, it calculates the sum and displays it using the `print()` function."
  },
  {
    "id": 87,
    "question": "Write a Python function that takes a list of numbers and returns the second largest number in the list.",
    "answer": "Here's a Python function that does exactly that:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n\n    # Filter out the largest number and find the second largest\n    second_largest = max(filter(lambda x: x != largest, numbers))\n\n    return second_largest\n\n# Test the function with some examples\nprint(second_largest([1, 2, 3, 4, 5]))  # Output: 4\nprint(second_largest([6, 7, 8, 9, 10])) # Output: 8\nprint(second_largest([1, 2, 3]))       # Output: Error: no second largest number\n```\n\nThis function uses the built-in `max` function to find the largest number in the list, and then uses a list comprehension and the `filter` function to find the second largest number by excluding the largest number from consideration. If"
  },
  {
    "id": 88,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple Python program that implements a calculator using a dictionary for storing the mathematical operations and their corresponding functions:\n\n```python\ndef calculator():\n    operations = {\n        \"+\": lambda x, y: x + y,\n        \"-\": lambda x, y: x - y,\n        \"*\": lambda x, y: x * y,\n        \"/\": lambda x, y: x / y\n    }\n\n    while True:\n        try:\n            num1 = float(input(\"Enter first number: \"))\n            operator = input(\"Enter operator (+, -, *, /): \")\n            num2 = float(input(\"Enter second number: \"))\n\n            result = operations[operator](num1, num2)\n            print(f\"Result: {result}\")\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter valid numbers and operators.\")\n\ncalculator()\n```\n\nThis program uses a dictionary named `operations` to store the mathematical operations and their corresponding lambda"
  },
  {
    "id": 89,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the corresponding operation.",
    "answer": "Here's a simple Python program for a calculator that takes two numbers and an operator as input and returns the result of the corresponding operation:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef calculator():\n    num1 = float(input(\"Enter first number: \"))\n    operator = input(\"Enter operator (+, -, *, /): \")\n    num2 = float(input(\"Enter second number: \"))\n\n    if operator == \"+\":\n        print(num1, \"+\", num2, \"=\", add(num1, num2))\n    elif operator == \"-\":\n        print"
  },
  {
    "id": 90,
    "question": "Write a Python program to find the sum of all numbers in a list that are greater than a given number.",
    "answer": "Here's a simple Python program to solve the problem:\n\n```python\n# Function to find sum of numbers greater than a given number in a list\ndef sum_greater(numbers, given_number):\n    total = 0\n    for num in numbers:\n        if num > given_number:\n            total += num\n    return total\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ngiven_number = 5\nresult = sum_greater(numbers, given_number)\nprint(\"The sum of numbers greater than\", given_number, \"in the list is:\", result)\n```\n\nIn this example, we define a function `sum_greater` that takes a list of numbers and a given number as arguments. The function initializes a variable `total` to 0, then iterates through each number in the list. If a number is greater than the given number, it"
  },
  {
    "id": 91,
    "question": "Write a Python program to find the sum of numbers from a list.",
    "answer": "Here's a simple Python program to find the sum of numbers in a list:\n\n```python\n# List of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Use the sum() function to calculate the sum of numbers in the list\nsum_of_numbers = sum(numbers)\n\n# Print the result\nprint(\"The sum of numbers in the list is:\", sum_of_numbers)\n```\n\nThis program defines a list of numbers, uses the built-in `sum()` function to calculate the sum of numbers in the list, and prints the result."
  },
  {
    "id": 92,
    "question": "Write a Python program to print the first `n` numbers in the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first `n` numbers in the Fibonacci sequence using a loop:\n\n```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        print(a)\n        a, b = b, a + b\n\n# Test the function\nfibonacci(10)\n```\n\nThis program defines a function `fibonacci` that takes an integer argument `n`. It initializes two variables `a` and `b` to 0 and 1, respectively. Then it uses a `for` loop to print the first `n` numbers in the Fibonacci sequence. In each iteration of the loop, it prints the current value of `a`, updates the values of `a` and `b` to compute the next number in the sequence, and continues until it has printed `n` numbers.\n\nYou can test the function by calling it with an argument of 10, for example, to print the first"
  },
  {
    "id": 93,
    "question": "Write a Python program to find the sum of all numbers in a list whose value is greater than a given number.",
    "answer": "Here's a simple Python program that accomplishes the task:\n\n```python\n# Function to find the sum of numbers in a list greater than a given number\ndef sum_greater(numbers, threshold):\n    total = 0\n    for num in numbers:\n        if num > threshold:\n            total += num\n    return total\n\n# Sample list and threshold value\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nthreshold = 5\n\n# Call the function with the list and threshold value\nsum_result = sum_greater(numbers, threshold)\nprint(f\"The sum of numbers greater than {threshold} in the list is: {sum_result}\")\n```\n\nIn this example, the function `sum_greater` takes a list `numbers` and a threshold value `threshold` as arguments. It initializes a variable `total` to zero and iterates through each number in the list. If the number is"
  },
  {
    "id": 94,
    "question": "Write a Python function that takes a list of integers as an argument and returns a new list containing only the even numbers.",
    "answer": "Here's a simple Python function that does exactly that:\n\n```python\ndef filter_even(numbers):\n    \"\"\"\n    Takes a list of integers as an argument and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n```\n\nYou can use a list comprehension to generate the new list, which is more Pythonic and concise than using a for loop and an empty list. The `if num % 2 == 0` condition checks if the number is even by checking if its remainder when divided by 2 is equal to 0."
  },
  {
    "id": 95,
    "question": "Write a Python program to find the common elements between two lists.",
    "answer": "To find the common elements between two lists in Python, you can use list comprehension and the `set` data type. Here's the code:\n\n```python\n# Define the two lists\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\n# Convert both lists to sets\nset1 = set(list1)\nset2 = set(list2)\n\n# Find the intersection of the two sets and convert it back to a list\ncommon_elements = list(set1.intersection(set2))\n\n# Print the common elements\nprint(\"The common elements are:\", common_elements)\n```\n\nThis code defines two lists, converts each list to a set, finds the intersection of the two sets using the `intersection()` method, and then converts the resulting set back to a list. The output will be:\n\n```\nThe common elements are: [3, 4, 5]\n```"
  },
  {
    "id": 96,
    "question": "Write a Python program to find the sum of numbers from a list.",
    "answer": "Here's a simple Python program to find the sum of numbers from a given list:\n\n```python\ndef sum_list(numbers):\n    \"\"\"\n    Function to calculate the sum of numbers in a given list\n    :param numbers: list\n    :return: sum of numbers in the list\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = sum_list(numbers)\nprint(\"Sum of numbers in the list is: \", result)\n```\n\nIn this example, we define a function `sum_list` that takes a list as an argument and calculates the sum of all numbers in the list. The function initializes a variable `total` to 0 and then iterates through each number in the list, adding it to the `total` variable. Finally, the function returns the `total` value. We then call this function with a list of numbers as an argument and print the result."
  },
  {
    "id": 97,
    "question": "Write a Python function to find the factorial of a given number using recursion.",
    "answer": "Here's a Python function that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    Parameters:\n    n (int): The number for which the factorial is to be calculated.\n\n    Returns:\n    int: The factorial of the given number.\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: n! = n * (n-1)!\n        return n * factorial(n-1)\n```\n\nExample usage:\n\n```python\n>>> factorial(5)\n120\n```"
  },
  {
    "id": 98,
    "question": "Write a Python program to find the factorial of a number using recursion.",
    "answer": "Here is a simple Python program to find the factorial of a number using recursion:\n\n```python\n# Function to find the factorial of a number using recursion\ndef factorial(n):\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: n! = n * (n-1)!\n        return n * factorial(n-1)\n\n# Test the function\nnum = int(input(\"Enter a number: \"))\nprint(f\"The factorial of {num} is {factorial(num)}\")\n```\n\nIn this code, the `factorial` function takes an integer `n` as an argument and returns its factorial. The base case for the recursion is when `n` is equal to 0, in which case the function returns 1. Otherwise, the function makes a recursive call with the argument `n-1` and multiplies the result by `n`. This continues until the base case is reached"
  },
  {
    "id": 99,
    "question": "Write a Python program to find the second largest number in a given list of numbers.",
    "answer": "Here's a Python solution to find the second largest number in a given list:\n\n```python\ndef second_largest(numbers):\n    # Find the largest number in the list\n    largest = max(numbers)\n    # Remove the largest number from the list\n    numbers.remove(largest)\n    # Find and return the second largest number\n    return max(numbers)\n\n# Test the function with some inputs\nnumbers = [7, 1, 8, 5, 2, 9, 6, 3, 4]\nprint(\"The second largest number in the given list is:\", second_largest(numbers))\n```\n\nIn this solution, we define a function `second_largest` that takes a list of numbers as an argument. We first find the largest number in the list using the built-in `max` function. Then, we remove the largest number from the list using the `remove` method. Finally, we find and return the second largest number using the `max` function again.\n\nNote"
  },
  {
    "id": 100,
    "question": "Write a Python program to find the common elements between two lists.",
    "answer": "Here's a simple Python program that uses sets to find the common elements between two lists:\n\n```python\n# Two input lists\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\n\n# Convert both lists to sets and find intersection\ncommon_elements = list(set(list1) & set(list2))\n\n# Convert the result back to a list and print it\nprint(list(common_elements))\n```\n\nOutput: `[4, 5]`\n\nThis program uses sets to remove any duplicates and find the intersection of the two sets, which gives us the common elements. The result is then converted back to a list before being printed."
  },
  {
    "id": 101,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program to print numbers from 1 to 10 using a for loop:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 10, and the `for` loop iterates through each number in that sequence, printing it out using the `print()` function."
  },
  {
    "id": 102,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Calculate the next number in the sequence\n    c = a + b\n    \n    # Print the next number and update the variables\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next 9 numbers in the Fibonacci sequence, starting from the first two numbers, 0 and 1. The loop is controlled by the `range` function with an argument of 9, which generates the numbers 0 through 8. In each iteration of the loop, the next number in the sequence is calculated by adding the previous two numbers, and then both variables `a` and `b` are updated with the previous"
  },
  {
    "id": 103,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor i in range(9):\n    # Calculate the next number in the sequence\n    c = a + b\n\n    # Print the current number and update the previous two numbers\n    print(c)\n    a, b = b, c\n```\n\nThis program initializes the first two numbers in the sequence (0 and 1), then uses a `for` loop to calculate and print the next 9 numbers in the sequence. The `a` and `b` variables are updated at each iteration to keep track of the previous two numbers."
  },
  {
    "id": 104,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here is a simple Python program that uses a for loop to print the numbers from 1 to 10:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nIn this example, the `range()` function generates a sequence of numbers from 1 to 10, and the for loop iterates through each number in the sequence, printing it to the console. The output of this program will be:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```"
  },
  {
    "id": 105,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n    \n    # Print the next number and update the sequence\n    print(c)\n    \n    # Update a and b for the next iteration\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, while keeping track of the previous two numbers using variables `a` and `b`. The loop runs 9 times to print the first 10 numbers of the sequence."
  },
  {
    "id": 106,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here is a simple Python program that prints the numbers from 1 to 10 using a for loop:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nIn the above code, the `range()` function generates a sequence of numbers from 1 to 10. The for loop then iterates over each number in this sequence and prints it out using the `print()` function."
  },
  {
    "id": 107,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# initialize the first two numbers of the sequence\na, b = 0, 1\n\n# print the first number\nprint(a)\n\n# print the next 9 numbers\nfor _ in range(9):\n    # calculate the next number in the sequence\n    next_number = a + b\n\n    # print the number and update the variables\n    print(next_number)\n    a, b = b, next_number\n```\n\nThis program uses a `for` loop to generate the next 9 numbers in the sequence, and updates the variables `a` and `b` after each iteration. The `_` variable in the `for` loop is a common convention to indicate that we don't care about the iteration index. The first number in the sequence is 0, and the second number is 1, so we initialize these variables before the loop. The program prints each number as it is generated."
  },
  {
    "id": 108,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor i in range(9):\n    c = a + b\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next numbers in the Fibonacci sequence, starting with the first two numbers (0 and 1). The variables `a` and `b` are updated in each iteration to calculate the next number in the sequence."
  },
  {
    "id": 109,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor i in range(9):\n    c = a + b\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, while keeping track of the previous two numbers using variables `a` and `b`. The sequence starts with 0 and 1, so we print the first number (0) before the loop."
  },
  {
    "id": 110,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number of the sequence\nprint(a)\n\n# Loop to print the next 9 numbers\nfor _ in range(9):\n    # Update the values of a and b for the next number\n    c = a + b\n    a, b = b, c\n\n    # Print the next number in the sequence\n    print(c)\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, starting from the first two numbers (0 and 1). The loop runs 9 times to generate the next 9 numbers, and the `print` statement inside the loop is used to print each number. The output of this program will be the first 10 numbers of the Fibonacci sequence: 0, 1, 1, 2, 3"
  },
  {
    "id": 111,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that uses a for loop to print the numbers from 1 to 10:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 10, and the `for` loop iterates through each number in the sequence, printing it to the console."
  },
  {
    "id": 112,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's the Python code to print the numbers from 1 to 10 using a for loop:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 10. The `for` loop then iterates through each number in this sequence, and the `print()` function is used to display each number on the screen."
  },
  {
    "id": 113,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number (0)\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n\n    # Update the variables a and b\n    a, b = b, c\n\n    # Print the current number\n    print(c)\n```\n\nThis program initializes the first two numbers in the Fibonacci sequence (0 and 1), then uses a for loop to generate and print the next 9 numbers in the sequence. The current number is calculated as the sum of the previous two numbers, and the variables a and b are updated to store the previous two numbers in the sequence."
  },
  {
    "id": 114,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# initialize the first two numbers of the Fibonacci sequence\na, b = 0, 1\n\n# print the first number\nprint(a)\n\n# loop through to print the next 9 numbers\nfor _ in range(9):\n    # calculate the next number in the sequence\n    c = a + b\n\n    # print the current number and update the variables\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next 9 numbers in the Fibonacci sequence, starting with the first two numbers (0 and 1). The `a` and `b` variables are updated in each iteration to calculate the next number in the sequence."
  },
  {
    "id": 115,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Calculate the next number in the sequence\n    next_number = a + b\n\n    # Print the number and update the values of a and b\n    print(next_number)\n    a, b = b, next_number\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence until the desired number of prints (10 in this case) is reached. The `_` variable in the `for` loop is used as a placeholder, as it is not needed in this particular loop."
  },
  {
    "id": 116,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number in the sequence\nprint(a)\n\n# Print the next 9 numbers in the sequence\nfor i in range(9):\n    # Calculate the next number in the sequence\n    next_number = a + b\n\n    # Print the current number and update a and b\n    print(next_number)\n    a, b = b, next_number\n```\n\nThis program uses a loop to calculate and print the next 9 numbers in the sequence after the initial `0` and `1`. The `a` and `b` variables are updated after each iteration to calculate the next number in the sequence."
  },
  {
    "id": 117,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n\n    # Print the current number\n    print(c)\n\n    # Update the values of a and b for the next iteration\n    a, b = b, c\n```\n\nThis program uses a `for` loop to generate the next 9 numbers in the Fibonacci sequence after the initial two numbers. It then prints each number as it's generated. The `_` variable in the `for` loop is a throwaway variable that is not used in the loop, it is just there to satisfy the loop's requirement for a variable."
  },
  {
    "id": 118,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's the Python code to print numbers from 1 to 10 using a for loop:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nIn this code, the `range()` function generates a sequence of numbers from 1 to 10, and the `for` loop iterates through each number in the sequence, printing it to the console."
  },
  {
    "id": 119,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here is a simple Python program that uses a for loop to print the numbers from 1 to 10:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 10, and the `for` loop is used to iterate through each number in the sequence, printing it to the console."
  },
  {
    "id": 120,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Calculate the next number in the sequence\n    next_number = a + b\n\n    # Print the next number\n    print(next_number)\n\n    # Update the variables a and b for the next iteration\n    a, b = b, next_number\n```\n\nThis program initializes the first two numbers in the sequence, `a` and `b`, and then prints the first number (`a`). It then enters a loop that runs 9 times, during which it calculates the next number in the sequence, prints it, and updates the variables `a` and `b` for the next iteration. After the loop finishes, the program has printed the first"
  },
  {
    "id": 121,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program to print numbers from 1 to 10 using a for loop:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nThis code uses the `range()` function to generate a sequence of numbers from 1 to 10. The for loop then iterates through each number in this sequence, printing it to the console with the `print()` function."
  },
  {
    "id": 122,
    "question": "Write a Python program to find the factorial of a given number (n) using a recursive function.",
    "answer": "Here's a simple Python program to find the factorial of a given number (n) using a recursive function:\n\n```python\n# Function to find factorial using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Get the number from user\nnumber = int(input(\"Enter a number: \"))\n\n# Find factorial of the given number\nresult = factorial(number)\n\n# Print the result\nprint(f\"The factorial of {number} is {result}\")\n```\n\nThis program defines a recursive function `factorial(n)` that calculates the factorial of a given number `n`. The base case for the recursion is when `n` equals to 0, in which case the function returns 1. For any other value of `n`, the function calls itself with the argument `n-1` and multiplies the result by `n`. The user is prompted to"
  },
  {
    "id": 123,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number (0)\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    # Update the values of a and b\n    a, b = b, a + b\n\n    # Print the current number\n    print(a)\n```\n\nThis program initializes the first two numbers in the sequence (0 and 1), then uses a for loop to print the next 9 numbers by updating the values of `a` and `b` in each iteration."
  },
  {
    "id": 124,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here is a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    c = a + b\n    print(c)\n    a, b = b, c\n```\n\nThis program uses two variables, `a` and `b`, to represent the previous and current numbers in the sequence, respectively. It starts by printing the first number (0), then enters a loop to print the next 9 numbers. In each iteration of the loop, it calculates the next number (`c`) by adding the previous two numbers, prints it, and updates the variables `a` and `b` to represent the previous and current numbers, respectively."
  },
  {
    "id": 125,
    "question": "Write a Python program to print the numbers from 1 to 5 using a for loop.",
    "answer": "Here's a simple Python program that uses a for loop to print the numbers from 1 to 5:\n\n```python\n# Use a for loop to print numbers from 1 to 5\nfor number in range(1, 6):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 5. The `for` loop then iterates through this sequence, printing each number as it goes. The `range()` function includes the starting number (1) but excludes the ending number (6), so the loop will print the numbers 1 through 5."
  },
  {
    "id": 126,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's the Python code to print numbers from 1 to 10 using a for loop:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nThis code uses the `range()` function to generate a sequence of numbers from 1 to 10. The `for` loop then iterates through each number in this sequence, printing it out to the console."
  },
  {
    "id": 127,
    "question": "Write a Python program to find the sum of two numbers.",
    "answer": "Here is a simple Python program to find the sum of two numbers:\n\n```python\n# Take input from the user\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n```\n\nThis program asks the user for two numbers as input, converts them to integers, adds them together, and then prints the result."
  },
  {
    "id": 128,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here is a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to generate the next numbers\nfor _ in range(9):\n    # Update the values of a and b\n    a, b = b, a + b\n\n# Print the last number\nprint(b)\n```\n\nThis program uses a loop to calculate the next numbers in the sequence by adding the last two numbers together. The first two numbers (0 and 1) are initialized outside of the loop. The `_` in the loop variable list is a common convention to indicate that we don't care about the value of the loop variable, and is only used to satisfy the syntax requirements of the `range` function."
  },
  {
    "id": 129,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that prints the numbers from 1 to 10 using a for loop:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nIn this program, we use the `range()` function to generate a sequence of numbers from 1 to 10. The `for` loop then iterates through each number in the sequence, and the `print()` function is used to display the number on the screen."
  },
  {
    "id": 130,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence\n    c = a + b\n\n    # Update the variables\n    a, b = b, c\n\n    # Print the current number\n    print(c)\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, starting with the first two numbers (0 and 1). The loop runs 9 times, printing each new number as it is calculated. The final output will be the first 10 numbers of the Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21."
  },
  {
    "id": 131,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    a, b = b, a + b\n    print(b)\n```\n\nThis program uses a loop to generate the next numbers in the sequence by adding the previous two numbers. The `for` loop runs 9 times to print the next 9 numbers, and the first number is printed separately before the loop. The variables `a` and `b` are updated in each iteration to store the previous and current numbers in the sequence."
  },
  {
    "id": 132,
    "question": "Write a Python program to print the numbers from 1 to 5 using a for loop.",
    "answer": "Here is a simple Python program that prints the numbers from 1 to 5 using a for loop:\n\n```python\n# Using a for loop to print numbers from 1 to 5\nfor number in range(1, 6):\n    print(number)\n```\n\nThis program uses the `range()` function to generate a sequence of numbers from 1 to 5, and the `for` loop is used to iterate through each number in the sequence, printing it out using the `print()` function."
  },
  {
    "id": 133,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that uses a for loop to print the numbers from 1 to 10:\n\n```python\n# Using a for loop to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n```\n\nExplanation:\n\nThe `range()` function generates a sequence of numbers starting from the first argument (1 in this case) and ending before the second argument (11 in this case). The for loop then iterates through each number in the sequence, and the print statement is used to display the number on the screen."
  },
  {
    "id": 134,
    "question": "Write a Python program to find the sum of two numbers.",
    "answer": "Here is a simple Python program to find the sum of two numbers:\n\n```python\n# Take two numbers as input from the user\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Find the sum of two numbers\nsum = num1 + num2\n\n# Print the sum\nprint(\"The sum of\", num1, \"and\", num2, \"is:\", sum)\n```\n\nIn this program, we take two numbers as input from the user using the `input()` function, convert them to the float data type using the `float()` function, find their sum using the `+` operator, and then print the result using the `print()` function."
  },
  {
    "id": 135,
    "question": "Write a Python program to print the numbers from 1 to 10.",
    "answer": "Here's a simple Python program that prints the numbers from 1 to 10:\n\n```python\n# Using a for loop to iterate from 1 to 10 and print each number\nfor i in range(1, 11):\n    print(i)\n```\n\nOr you can use a `for` loop with the `range` function and the `len` function as follows:\n\n```python\n# Using a for loop and range function to print numbers from 1 to 10\nfor i in range(1, 11):\n    print(i)\n\n# Using a for loop and len function to print numbers from 1 to 10\nnumbers = list(range(1, 11))\nfor num in numbers:\n    print(num)\n```\n\nOr even simpler using a `for` loop with the `xrange` function (Python 2) or `xrange` function with step argument (Python 3):\n\n```python\n# Using a for loop and xrange function"
  },
  {
    "id": 136,
    "question": "Write a Python program to find the sum of two numbers.",
    "answer": "Here's a simple Python program to find the sum of two numbers:\n\n```python\n# Taking input from the user\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\n# Adding the numbers\nsum = num1 + num2\n\n# Printing the sum\nprint(\"The sum of\", num1, \"and\", num2, \"is\", sum)\n```\n\nThis program asks the user for two numbers as input, converts them to float type for easier arithmetic, adds the numbers, and then prints out the sum."
  },
  {
    "id": 137,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that prints the numbers from 1 to 10 using a for loop:\n\n```python\n# Use a for loop to iterate from 1 to 10 and print each number\nfor number in range(1, 11):\n    print(number)\n```\n\nThis program uses the built-in `range()` function to generate a sequence of numbers from 1 to 10. The `for` loop then iterates through each number in the sequence, and the `print()` function is used to display the number on the screen."
  },
  {
    "id": 138,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that prints the numbers from 1 to 10 using a for loop:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nExplanation:\n\nThe `range()` function generates a sequence of numbers from the given start (1) to the end (11, but not including it) with a default increment of 1. The `for` loop iterates through each number in the sequence generated by the `range()` function and prints it using the `print()` function."
  },
  {
    "id": 139,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Print the next 9 numbers\nfor _ in range(9):\n    a, b = b, a + b\n    print(b)\n```\n\nThis program initializes the first two numbers of the sequence, `0` and `1`, and then uses a `for` loop to calculate and print the next 9 numbers of the sequence. The variables `a` and `b` are updated in each iteration of the loop to represent the previous and current numbers of the sequence, respectively. The `_` in the `for` loop is a throwaway variable that is not used in the loop, but is required to receive the special `_` value that is returned when the loop index is not used."
  },
  {
    "id": 140,
    "question": "Write a Python program to print the numbers from 1 to 5 using a for loop.",
    "answer": "Here's the Python code to print the numbers from 1 to 5 using a for loop:\n\n```python\nfor number in range(1, 6):\n    print(number)\n```\n\nExplanation: The `range()` function generates a sequence of numbers starting from the first argument and ending before the second argument. In this case, we want numbers from 1 to 5, so we use `range(1, 6)`. The `for` loop iterates through each number in the sequence, and the `print()` function displays the number on the screen."
  },
  {
    "id": 141,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program that uses a for loop to print the numbers from 1 to 10:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nIn this program, we use the `range()` function to generate a sequence of numbers from 1 to 10. The `for` loop then iterates through each number in the sequence, and the `print()` function is used to display each number on the screen."
  },
  {
    "id": 142,
    "question": "Write a Python program to print the numbers from 1 to 10.",
    "answer": "Here's a simple Python program to print the numbers from 1 to 10:\n\n```python\n# Using a for loop\nfor number in range(1, 11):\n    print(number)\n\n# Using a while loop\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1\n```\n\nBoth the above code snippets will print the numbers from 1 to 10 when executed. The first solution uses a `for` loop with the `range()` function, while the second solution uses a `while` loop with manual variable incrementation."
  },
  {
    "id": 143,
    "question": "Write a Python program to print the numbers from 1 to 10.",
    "answer": "Here is a simple Python program to print the numbers from 1 to 10:\n\n```python\n# Using a for loop to iterate from 1 to 10 and print each number\nfor number in range(1, 11):\n    print(number)\n```\n\nOr, you can also use a `for` loop with the `xrange()` function (Python 2.x) or the `range()` function (Python 3.x) to generate the sequence of numbers and print them directly:\n\n```python\n# Using range function to print numbers from 1 to 10\nfor number in range(1, 11):\n    print(number)\n\n# Or using xrange function in Python 2.x\n# for number in xrange(1, 11):\n#     print number\n```"
  },
  {
    "id": 144,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# initialize the first two numbers of the sequence\na, b = 0, 1\n\n# print the first number\nprint(a)\n\n# print the next 9 numbers\nfor _ in range(9):\n    # calculate the next number in the sequence\n    c = a + b\n\n    # print the new number and update the previous two numbers\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, starting from the initial values of 0 and 1. The loop runs 9 times, and with each iteration, it calculates the next number in the sequence and updates the previous two numbers. Finally, it prints the 10th number in the sequence."
  },
  {
    "id": 145,
    "question": "Write a Python program to print the numbers from 1 to 10 using a for loop.",
    "answer": "Here's a simple Python program to print the numbers from 1 to 10 using a for loop:\n\n```python\nfor number in range(1, 11):\n    print(number)\n```\n\nExplanation: The `range()` function generates a sequence of numbers starting from the first argument (1) and ending at, but not including, the second argument (11). The `for` loop then iterates through each number in the sequence, and the `print()` function is used to display each number on the screen."
  },
  {
    "id": 146,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program that prints the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to print the next 9 numbers\nfor _ in range(9):\n    # Update the values of a and b\n    a, b = b, a + b\n\n    # Print the current number\n    print(a)\n```\n\nThis program initializes the first two numbers in the Fibonacci sequence, then uses a `for` loop to calculate and print the next 9 numbers. The `_` in the loop variable is used as a placeholder and can be named anything, as it is not used in the loop body."
  },
  {
    "id": 147,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here is a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers of the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to print the next numbers in the sequence\nfor _ in range(9):\n    # Update the values of a and b\n    a, b = b, a + b\n\n# Print the last number\nprint(b)\n```\n\nThis program initializes the first two numbers of the sequence (0 and 1), prints the first number, and then uses a loop to calculate and print the next 9 numbers in the sequence. The values of `a` and `b` are updated in each iteration of the loop, with `a` taking the value of `b` and `b` taking the value of `a + b`. The loop terminates after 9 iterations, and the last number (`b`) is printed as the 10th number"
  },
  {
    "id": 148,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# initialize the first two numbers of the sequence\na, b = 0, 1\n\n# print the first number\nprint(a)\n\n# print the next 9 numbers\nfor i in range(9):\n    # calculate the next number in the sequence\n    next_number = a + b\n\n    # print the current number and update a and b\n    print(next_number)\n    a, b = b, next_number\n```\n\nThis program uses a loop to calculate and print the next numbers in the sequence, starting with the first two numbers (0 and 1). The `for` loop runs 9 times, printing and updating the numbers in each iteration."
  },
  {
    "id": 149,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to generate and print the next numbers in the sequence\nfor _ in range(9):\n    # Update the values of a and b\n    a, b = b, a + b\n\n    # Print the new number\n    print(b)\n```\n\nThis program uses a loop to generate the next numbers in the sequence by updating the values of `a` and `b` in each iteration. The `range(9)` function generates numbers from 0 to 8, and we use the `_` (underscore) variable as a throw-away variable to ignore the numbers being generated, as we only care about the number of iterations. We print each new number as it is generated. The first number, `a`, is initialized to 0"
  },
  {
    "id": 150,
    "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here is a simple Python program to print the first 10 numbers of the Fibonacci sequence:\n\n```python\n# Initialize the first two numbers in the Fibonacci sequence\na, b = 0, 1\n\n# Print the first number\nprint(a)\n\n# Loop to print the next 9 numbers\nfor _ in range(9):\n    # Store the next number in the sequence in a temporary variable\n    c = a + b\n\n    # Print the current number and update a and b\n    print(c)\n    a, b = b, c\n```\n\nThis program uses a loop to calculate and print the first 10 numbers of the Fibonacci sequence. The first two numbers, 0 and 1, are initialized outside the loop, and each subsequent number is calculated by adding the previous two numbers together. The current number is printed, and then the variables a and b are updated to store the next two numbers in the sequence."
  },
  {
    "id": 151,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple C++ program for a calculator that takes two numbers as input and performs the basic arithmetic operations using user-defined functions.\n\n```cpp\n#include<iostream>\n\nusing namespace std;\n\nvoid add(int num1, int num2){\n    int sum = num1 + num2;\n    cout << \"Sum: \" << sum << endl;\n}\n\nvoid subtract(int num1, int num2){\n    int difference = num1 - num2;\n    cout << \"Difference: \" << difference << endl;\n}\n\nvoid multiply(int num1, int num2){\n    int product = num1 * num2;\n    cout << \"Product: \" << product << endl;\n}\n\nvoid divide(int num1, int num2){\n    if(num2 != 0){\n        float quotient = static_cast<float>(num1) / num2;\n        cout << \"Quotient: \" << quotient << endl"
  },
  {
    "id": 152,
    "question": "Write a C++ program to find the sum of the first n numbers using recursion.",
    "answer": "Here's a simple C++ program that finds the sum of the first n numbers using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint sum(int n);\n\nint main() {\n    int num;\n\n    cout << \"Enter the number of terms: \";\n    cin >> num;\n\n    cout << \"Sum of first \" << num << \" numbers: \" << sum(num) << endl;\n\n    return 0;\n}\n\nint sum(int n) {\n    if (n > 0)\n        return n + sum(n - 1);\n    else\n        return 0;\n}\n```\n\nThis program takes an input number `n` from the user and calculates the sum of the first `n` numbers using a recursive function `sum(n)`. The base case for the recursion is when `n` is less than or equal to 0, in which case the sum is 0. Otherwise, the sum is the current number `n` plus"
  },
  {
    "id": 153,
    "question": "Write a C++ program to find the sum of two matrices. The matrices must have the same dimensions.",
    "answer": "To write a C++ program to find the sum of two matrices, follow the steps below:\n\n1. Define the structure or class for matrix with data members as number of rows, number of columns, and a 2D array to store elements.\n2. Write the constructor to initialize the matrix.\n3. Write member functions to input matrices, display matrices, and find the sum of two matrices.\n\nHere is the code:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n#define ROW 3\n#define COL 3\n\nstruct Matrix {\n    int row, col;\n    int mat[ROW][COL];\n};\n\nvoid inputMatrix(Matrix& mat) {\n    for (int i = 0; i < mat.row; i++) {\n        for (int j = 0; j < mat.col; j++) {\n            cin >> mat.mat[i][j];\n        }\n    }\n}\n\nvoid displayMatrix(Matrix mat) {\n    for (int i ="
  },
  {
    "id": 154,
    "question": "Write a C++ program to implement a stack with the following functions: push, pop, top, size and isEmpty.",
    "answer": "Here's an example implementation of a stack using a vector in C++:\n\n```cpp\n#include <vector>\n#include <stdexcept>\n\nclass Stack {\nprivate:\n    std::vector<int> data;\n\npublic:\n    // Check if the stack is empty\n    bool isEmpty() const {\n        return data.empty();\n    }\n\n    // Get the size of the stack\n    int size() const {\n        return data.size();\n    }\n\n    // Push an element onto the stack\n    void push(int value) {\n        data.push_back(value);\n    }\n\n    // Pop an element off the stack\n    int pop() {\n        if (isEmpty()) {\n            throw std::runtime_error(\"Cannot pop from an empty stack\");\n        }\n        int value = data.back();\n        data.pop_back();\n        return value;\n    }\n\n    // Get the top element of the stack\n    int top()"
  },
  {
    "id": 155,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and the desired operation as input.",
    "answer": "Here's a simple C++ program for a calculator that takes two numbers as input and performs addition, subtraction, multiplication, and division based on user input.\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Enter the desired operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The"
  },
  {
    "id": 156,
    "question": "Write a C++ program to find the second largest number in an array of integers.",
    "answer": "To find the second largest number in an array of integers, you can follow these steps:\n\n1. Find the largest number in the array.\n2. Iterate through the array again and keep track of the second largest number.\n3. If the current number is greater than the current second largest number, update the second largest number.\n\nHere's the code for this problem:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[10], largest, secondLargest;\n\n    cout << \"Enter 10 integers: \";\n    for(int i = 0; i < 10; i++) {\n        cin >> arr[i];\n    }\n\n    largest = arr[0];\n    secondLargest = arr[0];\n\n    for(int i = 1; i < 10; i++) {\n        if(arr[i] > largest) {\n            secondLargest = largest;\n            largest = arr[i];"
  },
  {
    "id": 157,
    "question": "Write a C++ program to find the second largest number in an array of 10 integers without using the STL.",
    "answer": "Here's a simple C++ program to find the second largest number in an array of 10 integers without using the Standard Template Library (STL):\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[10]; // declare an array of 10 integers\n    int first_largest = INT_MIN; // initialize first_largest with minimum integer value\n    int second_largest = INT_MIN; // initialize second_largest with minimum integer value\n\n    // take input from user and find the first largest number\n    for(int i = 0; i < 10; i++) {\n        cin >> arr[i];\n        if(arr[i] > first_largest) {\n            second_largest = first_largest; // save current first_largest as second_largest\n            first_largest = arr[i]; // update first_largest with new number\n        }\n        else if("
  },
  {
    "id": 158,
    "question": "Write a C++ program to find the factorial of a given number using a recursive function.",
    "answer": "Here is a simple C++ program that calculates the factorial of a given number using a recursive function:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Recursive function to find the factorial of a given number\nint factorial(int n) {\n    if (n == 0) {\n        return 1; // Base case\n    } else {\n        return n * factorial(n-1); // Recursive call\n    }\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Factorial is not defined for negative numbers.\" << endl;\n        return 1;\n    }\n\n    // Calculate the factorial of the given number\n    int result = factorial(num);\n    cout << \"Factorial of \" << num << \" = \" << result << endl;"
  },
  {
    "id": 159,
    "question": "Write a C++ program to calculate the sum of two matrices of equal size. The user should be able to input the size of the matrices and the elements of each matrix.",
    "answer": "Here's a simple C++ program that accomplishes the task:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int MAX_SIZE = 10; // Maximum size of matrices\n\nvoid inputMatrix(int matrix[][MAX_SIZE], int row, int col) {\n    for (int i = 0; i < row; i++) {\n        for (int j = 0; j < col; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[][MAX_SIZE], int row, int col) {\n    for (int i = 0; i < row; i++) {\n        for (int j = 0; j < col; j++) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid sumMatrices(int matrix1[][MAX"
  },
  {
    "id": 160,
    "question": "Write a C++ program to find the sum of two matrices, given the dimensions and elements of each matrix are provided.",
    "answer": "To find the sum of two matrices in C++, follow these steps:\n\n1. Define a struct or a class for matrix representation, including the dimensions and elements as vectors.\n2. Write a function to input the matrix elements from the user.\n3. Write a function to calculate the sum of two matrices.\n4. Write a main function to take input matrices, call the sum function, and print the result.\n\nHere is the sample code:\n\n```cpp\n#include<iostream>\n#include<vector>\n\nusing namespace std;\n\nstruct Matrix {\n    int rows, cols;\n    vector<vector<int>> elements;\n};\n\nvoid inputMatrix(Matrix& mat) {\n    cout << \"Enter the dimensions of the matrix (rows cols): \";\n    cin >> mat.rows >> mat.cols;\n\n    cout << \"Enter the elements of the matrix: \" << endl;\n\n    mat.elements.resize(mat.rows, vector<int>(mat.cols, 0));"
  },
  {
    "id": 161,
    "question": "Write a C++ program to implement a stack using an array. The stack should support the following operations: push, pop, top, and size.",
    "answer": "Here is a simple C++ implementation of a stack using an array:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n#define MAX_SIZE 1000\n\nclass Stack {\n    int top;\n    int arr[MAX_SIZE];\n\npublic:\n    Stack() { top = -1; }\n    bool push(int x);\n    int pop();\n    int top_element();\n    int size();\n};\n\nbool Stack::push(int x)\n{\n    if (top >= (MAX_SIZE - 1)) {\n        cout << \"Stack Overflow\";\n        return false;\n    }\n    else {\n        arr[++top] = x;\n    }\n    return true;\n}\n\nint Stack::pop()\n{\n    if (top < 0) {\n        cout << \"Stack Underflow\";\n        return -1;\n    }\n    else {\n        int x = arr[top--"
  },
  {
    "id": 162,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and return the result of the operation performed on those integers.",
    "answer": "Here's a simple C++ program that implements a calculator with the required functionality:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    char operator_sign;\n    double result;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Choose the operation (+, -, *, /): \";\n    cin >> operator_sign;\n\n    switch (operator_sign) {\n        case '+':\n            result = static_cast<double>(num1) + static_cast<double>(num2);\n            break;\n        case '-':\n            result = static_cast<double>(num1) - static_cast<double>(num2);\n            break"
  },
  {
    "id": 163,
    "question": "Write a C++ program to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using a recursive function:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Recursive function to find factorial\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" = \" << factorial(num) << endl;\n    return 0;\n}\n\n// Recursive function to find factorial\nint factorial(int n) {\n    if(n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;\n}\n```\n\nThis program asks the user for a positive integer, then calculates and displays its factorial using the `factorial()` recursive function. The base case for the recursion is when `n` is less than or equal to 1, in which case the"
  },
  {
    "id": 164,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two integers.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division of two integers:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    float result;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation:\\n\";\n    cout << \"1. Addition\\n\";\n    cout << \"2. Subtraction\\n\";\n    cout << \"3. Multiplication\\n\";\n    cout << \"4. Division\\n\";\n    cout << \"Enter your choice: \";\n    cin >> choice;\n\n    switch (choice) {\n        case 1:\n            result = static_cast<float>(num1) + static_cast<float>(num2);"
  },
  {
    "id": 165,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and output the result of the operation.",
    "answer": "Here is a simple C++ program that implements a calculator as described:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    char op;\n    double num1, num2;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the operator (+, -, *, /): \";\n    cin >> op;\n\n    switch(op) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is: \" << num1 * num2 << endl;"
  },
  {
    "id": 166,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division of two numbers:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2, result;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if(num2 == 0) {\n                cout << \"Error! Division by zero is"
  },
  {
    "id": 167,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple C++ program to create a calculator that can perform the basic arithmetic operations:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch (operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << num1 << \" * \" << num2 << \" = \" << num1 * num2"
  },
  {
    "id": 168,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and display the result of the chosen operation.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    char sign;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> sign;\n\n    switch (sign) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is"
  },
  {
    "id": 169,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's an example of a simple C++ program to find the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Recursive function to find the factorial of a number\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }\n}\n\nint main() {\n    int num;\n\n    // Input the number\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check if the number is valid\n    if (num < 0) {\n        cout << \"Error! Factorial is not defined for negative numbers.\";\n        return -1;\n    }\n\n    // Calculate and display the factorial of the number\n    cout << \"Factorial of \" << num << \" = \" << factorial(num) << endl;\n\n    return 0;\n}\n``"
  },
  {
    "id": 170,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using recursion:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n// Function to find factorial using recursion\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Calling the recursive function\n    int fact = factorial(num);\n    cout << \"Factorial of \" << num << \" is: \" << fact << endl;\n    return 0;\n}\n```\n\nThis program takes an integer as input and calculates its factorial using the recursive function `factorial()`. The base case for recursion is when the number becomes zero, at which point the function returns 1. Otherwise, it multiplies the current number with the factorial of the number"
  },
  {
    "id": 171,
    "question": "Write a C++ program to calculate the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Function to calculate factorial using recursion\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Calculate factorial and display result\n    cout << \"Factorial of \" << num << \" = \" << factorial(num) << endl;\n\n    return 0;\n}\n```\n\nIn this program, the `factorial` function is defined recursively. It takes an integer `n` as an argument and calculates its factorial by calling itself with the argument `n-1` until it reaches the base case where `n` equals 0, at which point it returns 1"
  },
  {
    "id": 172,
    "question": "Write a C++ program to find the second largest number in an array of integers. The array size will be given as a command line argument.",
    "answer": "Here's a simple C++ program to find the second largest number in an array. This program takes the array size as the first command line argument and each element of the array as subsequent arguments.\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" array_size followed by array elements\" << std::endl;\n        return EXIT_FAILURE;\n    }\n\n    int arraySize = std::atoi(argv[1]);\n    std::vector<int> numbers(argv + 2, argv + 2 + arraySize);\n\n    int max = numbers[0];\n    int secMax = numbers[0];\n\n    for (const int& number : numbers) {\n        if (number > max) {\n            sec"
  },
  {
    "id": 173,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to choose the operation and enter the operands.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations based on user input.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    char operation;\n    double num1, num2;\n\n    cout << \"Enter operation (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter first operand: \";\n    cin >> num1;\n\n    cout << \"Enter second operand: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            cout << \"Result: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"Result: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"Result: \" << num1 * num2 << endl;"
  },
  {
    "id": 174,
    "question": "Write a C++ program to find the second largest number in an array of 10 integers.",
    "answer": "Here's a simple C++ program to find the second largest number in an array of 10 integers:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[10], first = INT_MIN, second = INT_MIN;\n\n    cout << \"Enter 10 integers: \";\n    for(int i = 0; i < 10; i++) {\n        cin >> arr[i];\n        if(arr[i] > first) {\n            second = first;\n            first = arr[i];\n        } else if(arr[i] > second && arr[i] != first) {\n            second = arr[i];\n        }\n    }\n\n    cout << \"The second largest number is: \" << second;\n\n    return 0;\n}\n```\n\nThis program initializes two variables, `first` and `second`, to the minimum integer value. It then reads 10 integers from the user and"
  },
  {
    "id": 175,
    "question": "Write a C++ program to find the second largest number in an array of integers. The size of the array is given.",
    "answer": "Here's a simple C++ program to find the second largest number in an array.\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int arr[10]; // Assuming the size of the array is 10\n    int n, first, second;\n\n    cout << \"Enter the number of elements in the array: \";\n    cin >> n;\n\n    cout << \"Enter the elements of the array: \";\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    // Find the first largest number\n    first = *max_element(arr, arr + n);\n\n    // Remove the first largest number from the array\n    int it = find(arr, arr + n, first);\n    if(it != arr + n) {\n        *it = arr[n - 1]; // Replace the first largest number with the last number"
  },
  {
    "id": 176,
    "question": "Write a C++ program to find the second largest number in an array of integers. The array size will always be greater than or equal to 2.",
    "answer": "Here's a simple C++ program that finds the second largest number in an array of integers. This program first finds the largest number and then removes it from the array, leaving the second largest number.\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int arr[100]; // Initialize an array of 100 integers\n    int n; // Array size\n\n    cout << \"Enter the size of the array: \";\n    cin >> n;\n\n    cout << \"Enter \" << n << \" integers: \";\n\n    // Initialize the array\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    // Find the largest number\n    int largest = *max_element(arr, arr + n);\n\n    // Remove the largest number from the array\n    int secondLargest;\n    for(int"
  },
  {
    "id": 177,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and provide the user with an option to choose the operation.",
    "answer": "Here is a simple C++ program that implements a calculator as per the given requirements:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"\\nChoose an operation:\\n\";\n    cout << \"1. Addition\\n\";\n    cout << \"2. Subtraction\\n\";\n    cout << \"3. Multiplication\\n\";\n    cout << \"4. Division\\n\";\n    cout << \"5. Exit\\n\";\n\n    cout << \"\\nEnter your choice: \";\n    cin >> choice;\n\n    switch(choice) {\n        case 1:\n            cout << \"The sum of \" <<"
  },
  {
    "id": 178,
    "question": "Write a C++ program to calculate the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program to calculate the factorial of a given number using recursion:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n// Function to calculate factorial using recursion\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" = \" << factorial(num);\n    return 0;\n}\n\n// Recursive function to calculate factorial\nint factorial(int n) {\n    if (n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;\n}\n```\n\nThis program takes an integer as input and calculates its factorial using a recursive function named `factorial`. The base case for the recursion is when `n` is less than or equal to 1, in which case the function returns 1. Otherwise, it returns the product of the current"
  },
  {
    "id": 179,
    "question": "Write a C++ program to calculate the factorial of a given number using recursion.",
    "answer": "Here's an example of a simple C++ program that calculates the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Function to calculate factorial using recursion\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Calculate and display the factorial of the given number\n    cout << \"Factorial of \" << num << \" = \" << factorial(num);\n    return 0;\n}\n```\n\nIn this program, the `factorial` function takes an integer argument `n` and calculates its factorial using recursion. The base case for the recursion is when `n` equals 0, in which case the function returns 1. Otherwise, the function multiplies `n`"
  },
  {
    "id": 180,
    "question": "Write a C++ program to find the second largest number in an array of integers.",
    "answer": "Here is a simple C++ program to find the second largest number in an array of integers. This program assumes that the input array has at least two distinct numbers.\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n; // number of elements in the array\n    int arr[100]; // array of integers\n\n    // Input the array elements\n    cout << \"Enter the number of elements in the array: \";\n    cin >> n;\n\n    cout << \"Enter the array elements: \";\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    // Sort the array in descending order\n    sort(arr, arr + n, greater<int>());\n\n    // Print the second largest number\n    if (n < 2) {\n        cout << \"Array should have at least 2 elements.\";\n    } else {\n        cout << \"The second largest number is:"
  },
  {
    "id": 181,
    "question": "Write a C++ program to find the sum of two matrices. The matrices should have equal dimensions.",
    "answer": "Here's a simple C++ program to find the sum of two matrices of equal dimensions:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Define the size of the matrices\n#define ROWS 2\n#define COLS 2\n\nvoid inputMatrix(int matrix[][COLS], string name) {\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            cout << name << \"[\" << i << \"][\" << j << \"]: \";\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid displayMatrix(int matrix[][COLS], string name) {\n    cout << \"\\n\" << name << \":\\n\";\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            cout << matrix[i][j] << \" \";"
  },
  {
    "id": 182,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers.",
    "answer": "Here's a simple C++ program for a calculator that takes two numbers as input and performs addition, subtraction, multiplication, and division using user-defined functions:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Function prototypes\nvoid add(float num1, float num2);\nvoid subtract(float num1, float num2);\nvoid multiply(float num1, float num2);\nvoid divide(float num1, float num2);\n\nint main() {\n    float num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            add(num1, num2);\n            break;\n        case '-':"
  },
  {
    "id": 183,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and an operation symbol (+, -, *, /) as input from the user. The program should print the result of the given operation.",
    "answer": "Here is a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter second number: \";\n    cin >> num2;\n    cout << \"Enter an operation symbol (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \""
  },
  {
    "id": 184,
    "question": "Write a C++ program to implement a stack using an array of size 10. The program should allow the user to push and pop elements from the stack. If the stack is full, the push operation should return an error message. If the stack is empty and the user tries to pop an element, the pop operation should return an error message.",
    "answer": "Here is a simple C++ program to implement a stack using an array of size 10:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n#define MAX_SIZE 10\n\nclass Stack {\n    private:\n        int arr[MAX_SIZE];\n        int top;\n    public:\n        Stack() { top = -1; }\n\n        bool push(int x) {\n            if (top >= MAX_SIZE - 1) {\n                cout << \"Stack Overflow\\n\";\n                return false;\n            }\n            arr[++top] = x;\n            return true;\n        }\n\n        int pop() {\n            if (top < 0) {\n                cout << \"Stack Underflow\\n\";\n                return"
  },
  {
    "id": 185,
    "question": "Write a C++ program to find the second largest number in an array of integers. The array size should be defined at compile time using a template.",
    "answer": "Here's a simple C++ program that meets the requirements:\n\n```cpp\n#include <iostream>\n#include <typeinfo>\n\ntemplate <typename T, size_t N>\nclass SecondLargest {\nprivate:\n    T arr[N];\n    T largest, secondLargest;\n\npublic:\n    void initialize() {\n        for (int i = 0; i < N; i++) {\n            std::cin >> arr[i];\n            if (!largest || arr[i] > largest) {\n                secondLargest = largest;\n                largest = arr[i];\n            } else if (arr[i] != largest && arr[i] > secondLargest) {\n                secondLargest = arr[i];\n            }\n        }\n\n        std::cout << \"The second largest number is: \" << secondLargest << std::endl;\n    }\n};\n\nint main() {"
  },
  {
    "id": 186,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input from the user, perform the desired operation, and display the result.",
    "answer": "Here's a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    char operator_sign;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operator_sign;\n\n    switch (operator_sign) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \""
  },
  {
    "id": 187,
    "question": "Write a C++ program to find the sum of two matrices of the same size. The program should take the size of the matrices and their elements as input from the user.",
    "answer": "Here's a simple C++ program to find the sum of two matrices of the same size:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n; // Declare m x n matrices\n\n    cout << \"Enter the number of rows and columns: \";\n    cin >> m >> n; // Take size as input\n\n    int matrix1[m][n], matrix2[m][n], sum[m][n]; // Declare matrices and sum matrix\n\n    cout << \"Enter elements of first matrix: \";\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> matrix1[i][j];\n        }\n    }\n\n    cout << \"Enter elements of second matrix: \";\n    for (int i = 0; i < m; i++) {\n        for (int j ="
  },
  {
    "id": 188,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and an operator (+, -, *, /) as input from the user.",
    "answer": "Here is a simple C++ program to implement a calculator as per your requirements:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n    double result;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter second number: \";\n    cin >> num2;\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            result = static_cast<double>(num1) + static_cast<double>(num2);\n            break;\n        case '-':\n            result = static_cast<double>(num1) - static_cast<double>(num2);\n            break;\n        case '*':\n            result ="
  },
  {
    "id": 189,
    "question": "Write a C++ program to find the sum of two matrices given their dimensions and elements.",
    "answer": "To find the sum of two matrices in C++, you first need to ensure that the matrices have the same dimensions. Here's a simple example of how you can implement this:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int MAX = 10; // Maximum size of matrices\n\nvoid inputMatrix(int matrix[MAX][MAX], int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid displayMatrix(int matrix[MAX][MAX], int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid addMatrices("
  },
  {
    "id": 190,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and should display the result of the selected operation.",
    "answer": "Here is a simple C++ program that implements a calculator with the required functionalities:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << num1"
  },
  {
    "id": 191,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and output the result of the operation.",
    "answer": "Here is a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the operator (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case"
  },
  {
    "id": 192,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Recursive function to find the factorial of a given number\nint factorial(int num) {\n    if (num == 0) { // base case\n        return 1;\n    } else {\n        return num * factorial(num - 1); // recursive call\n    }\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Please enter a positive integer.\" << endl;\n        return 1;\n    }\n\n    int result = factorial(num);\n    cout << \"Factorial of \" << num << \" = \" << result << endl;\n\n    return 0;\n}\n```\n\nThis program defines a recursive"
  },
  {
    "id": 193,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to find the factorial using recursion\nint factorial(int n) {\n    if(n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;\n}\n\nint main() {\n    int num;\n\n    // Input the number\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Calculate and display the factorial\n    cout << \"Factorial of \" << num << \" = \" << factorial(num);\n\n    return 0;\n}\n```\n\nThis program defines a recursive function `factorial()` that calculates the factorial of a given number. The base case for the recursion is when the number is less than or equal to 1, in which case the function returns 1. Otherwise, it calls itself with the argument"
  },
  {
    "id": 194,
    "question": "Write a C++ program to find the sum of the digits of a given number using recursion.",
    "answer": "Here's an example of a simple C++ program to find the sum of the digits of a given number using recursion:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to find the sum of digits of a number using recursion\nint sumOfDigits(int num) {\n    if(num < 0) { // Base case: error if the number is negative\n        cout << \"Error: Negative numbers not allowed.\" << endl;\n        exit(EXIT_FAILURE);\n    }\n\n    int digit = num % 10; // Get the last digit\n    int sum = digit + sumOfDigits(num / 10); // Recursive call to find the sum of the remaining digits\n    return sum;\n}\n\nint main() {\n    int number;\n    cout << \"Enter a number: \";\n    cin >> number;\n\n    int sum = sumOfDigits(number); // Call the function to find the sum of digits\n    cout << \""
  },
  {
    "id": 195,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two integers and choose the operation they want to perform using a menu.",
    "answer": "Here is a simple C++ program that implements a calculator with the given requirements:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n\n    cout << \"Simple Calculator\" << endl;\n    cout << \"------------------\" << endl;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Choose operation:\" << endl;\n    cout << \"1. Add\" << endl;\n    cout << \"2. Subtract\" << endl;\n    cout << \"3. Multiply\" << endl;\n    cout << \"4. Divide\" << endl;\n\n    cout << \"Enter your choice: \";\n    cin >> choice;\n\n    switch (choice) {"
  },
  {
    "id": 196,
    "question": "Write a C++ program to find the second largest number in an array of 10 integers.",
    "answer": "To find the second largest number in an array of 10 integers in C++, you can use the following approach:\n\n1. Initialize two variables `largest` and `secondLargest` with the first two elements of the array.\n2. Iterate through the remaining elements of the array.\n3. If the current element is greater than `largest`, update `secondLargest` with the current value of `largest` and `largest` with the current element.\n4. If the current element is greater than `secondLargest` but less than `largest`, update `secondLargest` with the current element.\n\nHere is the code for the above approach:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[10];\n    int largest = arr[0], secondLargest = arr[1];\n\n    for(int i = 1; i < 10; i++) {\n        if(arr[i] > largest"
  },
  {
    "id": 197,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple C++ program that implements a calculator with basic arithmetic operations:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch (operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << num1 << \" * \" << num2 << \" = \" << num1 * num2 << endl;"
  },
  {
    "id": 198,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two integers and choose the operation they want to perform.",
    "answer": "Here's a simple C++ program that meets the requirements:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first integer: \";\n    cin >> num1;\n\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is: \" << num1 * num2 << endl;\n            break;\n        case"
  },
  {
    "id": 199,
    "question": "Write a C++ program to implement a stack using an array of fixed size. The stack should support the following operations: push, pop, and top.",
    "answer": "Here's a simple C++ program that implements a stack using an array of fixed size. This example assumes the stack size is 10.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int MAX_SIZE = 10;\n\nclass Stack {\n    private:\n        int arr[MAX_SIZE];\n        int top;\n\n    public:\n        Stack() { top = -1; }\n\n        bool push(int value) {\n            if (top >= MAX_SIZE - 1) {\n                cout << \"Stack is full. Cannot push \" << value << \".\" << endl;\n                return false;\n            }\n            arr[++top] = value;\n            cout << value << \" pushed to stack.\" << endl;\n            return true;\n        }\n\n        int pop() {\n            if (top < 0) {\n                cout << \"Stack is empty. Cannot pop.\" << endl;"
  },
  {
    "id": 200,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input from the user and provide the user with the option to choose the operation.",
    "answer": "Here's a simple C++ program that implements a calculator with the given functionality:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first integer: \";\n    cin >> num1;\n    cout << \"Enter second integer: \";\n    cin >> num2;\n    cout << \"Enter operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is: \" << num1 * num2 << endl"
  },
  {
    "id": 201,
    "question": "Write a C++ program to find the sum of two matrices. The matrices should be of equal dimensions and the user should be able to input the dimensions and elements of the matrices.",
    "answer": "Here's an example of a C++ program that accomplishes this task:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int m, n; // dimensions of matrices\n\n    cout << \"Enter number of rows and columns: \";\n    cin >> m >> n;\n\n    // input matrices\n    vector<vector<int>> mat1(m, vector<int>(n));\n    vector<vector<int>> mat2(m, vector<int>(n));\n\n    cout << \"Enter elements of first matrix: \" << endl;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> mat1[i][j];\n        }\n    }\n\n    cout << \"Enter elements of second matrix: \" << endl;\n    for (int i = 0;"
  },
  {
    "id": 202,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple C++ program that implements a calculator with basic arithmetic operations:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n\n        case '*':\n            cout << \"The result is: \" << num1 * num2 << endl;\n            break;\n\n        case '/':\n            if (num"
  },
  {
    "id": 203,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple C++ program that implements a calculator with the mentioned operations:\n\n```cpp\n#include<iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << num1 << \" * \" << num2 << \" = \" << num1 * num2 << endl;"
  },
  {
    "id": 204,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The calculator should take two integers as input from the user and should display the result of the chosen operation.",
    "answer": "Here is a simple C++ program that implements a calculator with the specified functionality:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    char operator;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Choose operation (+, -, *, /): \";\n    cin >> operator;\n\n    switch(operator) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n\n        case '*':\n            cout << \"The result is: \" << num1 *"
  },
  {
    "id": 205,
    "question": "Write a C++ program to find the sum of two matrices of the same size. The matrices are input as 2D arrays and the size is given as user input.",
    "answer": "Here's a simple C++ program that takes two matrices as input, checks if they have the same size, and then calculates and prints their sum:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int MAX_SIZE = 10; // Maximum size of matrices\n\nvoid inputMatrix(int matrix[][MAX_SIZE], int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[][MAX_SIZE], int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            cout << matrix[i][j] << \" \";\n        }"
  },
  {
    "id": 206,
    "question": "Write a C++ program to find the sum of the digits of a given number.",
    "answer": "Here is a simple C++ program to find the sum of digits of a given number:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while(num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int num, result;\n    cout << \"Enter a number: \";\n    cin >> num;\n    result = sumOfDigits(num);\n    cout << \"Sum of digits: \" << result;\n    return 0;\n}\n```\n\nIn this program, we define a function `sumOfDigits()` which takes an integer as an argument and returns the sum of its digits. Inside this function, we use a while loop to extract each digit from the number using the modulus operator and add it to the sum until the number becomes zero. In the main function, we take a"
  },
  {
    "id": 207,
    "question": "Write a C++ program to implement a stack using an array with the following functionalities:\n\n1. Initialize the stack with default size 5.\n2. Check if the stack is empty.\n3. Push an integer element onto the stack.\n4. Pop an integer element from the stack.\n5. Display the top element of the stack.\n6. Find the size of the stack.",
    "answer": "```cpp\n#include<iostream>\nusing namespace std;\n\n#define MAX 5\n\nclass Stack {\n private:\n    int top;\n    int arr[MAX];\n\n public:\n    Stack() { top = -1; } // constructor\n\n    bool isEmpty() { return (top == -1); } // check if empty\n\n    void push(int x) {\n        if (top >= MAX - 1) {\n            cout << \"Stack Overflow\";\n            return;\n        }\n        arr[++top] = x;\n    }\n\n    int pop() {\n        if (top < 0) {\n            cout << \"Stack Underflow\";\n            return -1;\n        }"
  },
  {
    "id": 208,
    "question": "Write a C++ program to find the sum of two matrices, given their dimensions and elements.",
    "answer": "Here's a simple C++ program to find the sum of two matrices. This assumes the matrices have the same dimensions.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int N = 3; // Define the size of the matrix\n\nvoid inputMatrix(int matrix[N][N], string message) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            cout << message << \"[\" << i + 1 << \"][\" << j + 1 << \"]: \";\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[N][N]) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid sumMat"
  },
  {
    "id": 209,
    "question": "Write a C++ program to find the second largest number in an array of integers.",
    "answer": "To find the second largest number in an array of integers, you can follow these steps:\n\n1. First, find the largest number in the array using the standard algorithm of finding the maximum element.\n2. After finding the largest number, iterate through the array again and keep track of the second largest number by comparing it with the current number.\n\nHere's the code:\n\n```cpp\n#include<iostream>\n#include<climits>\nusing namespace std;\n\nint main() {\n    int arr[10];\n    int n, first = INT_MIN, second = INT_MIN;\n\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n\n    cout << \"Enter \" << n << \" integers: \";\n\n    for(int i = 0; i < n; i++) {\n        int num;\n        cin >> num;\n\n        if(num > first) {\n            second = first;\n            first = num;\n        }\n        else if(num > second"
  },
  {
    "id": 210,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input from the user and allow the user to choose the operation they want to perform.",
    "answer": "Here's a simple C++ program that implements a calculator as per your requirements:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter first integer: \";\n    cin >> num1;\n\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n\n        case '*':\n            cout << \"The result is: \" << num"
  },
  {
    "id": 211,
    "question": "Write a C++ program to find the sum of two matrices if their dimensions are equal.",
    "answer": "To find the sum of two matrices in C++, follow these steps:\n\n1. Define the matrix structure.\n2. Take user input for matrices.\n3. Check if matrices have the same dimensions.\n4. Write a function to find the sum of two matrices.\n5. Call the function and print the result.\n\nHere is the code:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nstruct Matrix {\n    int rows, cols;\n    int** elements;\n};\n\nvoid inputMatrix(Matrix& mat) {\n    cout << \"Enter the number of rows and columns: \";\n    cin >> mat.rows >> mat.cols;\n\n    mat.elements = new int*[mat.rows];\n    for (int i = 0; i < mat.rows; i++) {\n        mat.elements[i] = new int[mat.cols];\n        for (int j = 0; j < mat.cols; j++) {\n            cin >> mat.elements[i][j];"
  },
  {
    "id": 212,
    "question": "Write a C++ program to find the second largest number in an array of integers. The size of the array is given.",
    "answer": "Here's a simple C++ program to find the second largest number in an array:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int arr[100], n, first = INT_MIN, second = INT_MIN;\n\n    cout << \"Enter the number of elements in the array: \";\n    cin >> n;\n\n    cout << \"Enter the elements of the array: \";\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        if(arr[i] > first) {\n            second = first;\n            first = arr[i];\n        } else if(arr[i] > second && arr[i] != first) {\n            second = arr[i];\n        }\n    }\n\n    if(first == second) {\n        cout << \"The array has only one largest element.\";\n    } else {\n        cout << \"The second largest number in the array"
  },
  {
    "id": 213,
    "question": "Write a C++ program to find the sum of two matrices of equal dimensions.",
    "answer": "To find the sum of two matrices of equal dimensions in C++, follow the steps below:\n\n1. Declare two 2D arrays (matrices) with equal dimensions.\n2. Take user input to fill the matrices.\n3. Write a function to find the sum of two matrices.\n4. Call the function and print the result.\n\nHere's the code for the above steps:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int ROWS = 2;\nconst int COLS = 2;\n\nvoid inputMatrix(int matrix[ROWS][COLS]) {\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid printMatrix(int matrix[ROWS][COLS]) {\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0;"
  },
  {
    "id": 214,
    "question": "Write a C++ program to find the sum of two matrices if their dimensions are equal. The matrices are given as input using the command line arguments.",
    "answer": "Here is a simple C++ program that takes two matrices as command line arguments, checks if their dimensions are equal, and then finds the sum of the matrices element-wise.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    if (argc != 5) {\n        cout << \"Usage: SumMatrices <matrix1_rows> <matrix1_cols> <matrix1_data> <matrix2_rows> <matrix2_cols> \";\n        cout << \"<matrix2_data>\" << endl;\n        return 1;\n    }\n\n    int rows1 = stoi(argv[1]);\n    int cols1 = stoi(argv[2]);\n    int rows2 = stoi(argv[4]);\n    int cols2 = stoi(argv[5]);\n\n    if (rows1 != rows2 || cols1 != cols2) {"
  },
  {
    "id": 215,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and display the result of the specified operation.",
    "answer": "Here's a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the operator (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;"
  },
  {
    "id": 216,
    "question": "Write a C++ program to find the sum of two matrices if their dimensions are equal.",
    "answer": "Here is a simple C++ program to find the sum of two matrices of equal dimensions. This program assumes that the user enters the dimensions and the elements of the matrices.\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int m, n; // dimensions of matrices\n    cout << \"Enter the number of rows and columns: \";\n    cin >> m >> n;\n\n    int matrix1[m][n], matrix2[m][n], sum[m][n]; // initialize matrices and sum matrix\n\n    cout << \"Enter the elements of first matrix: \" << endl;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> matrix1[i][j];\n        }\n    }\n\n    cout << \"Enter the elements of second matrix: \" << endl;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j <"
  },
  {
    "id": 217,
    "question": "Write a C++ program to find the second largest number in an array of integers. The array size will be given as a command line argument.",
    "answer": "Here's a simple C++ program to find the second largest number in an array of integers. This program uses the standard library `vector` container for easier handling of arrays.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        std::cout << \"Please provide the size of the array as a command line argument.\" << std::endl;\n        return 1;\n    }\n\n    int arraySize = std::stoi(argv[1]);\n    std::vector<int> numbers(arraySize);\n\n    std::cout << \"Enter \" << arraySize << \" numbers: \" << std::endl;\n\n    for (int i = 0; i < arraySize; ++i) {\n        std::cin >> numbers[i];\n    }\n\n    int firstLarge = numbers[0];\n    int secondLarge = numbers[1];\n\n    for"
  },
  {
    "id": 218,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers using user input.",
    "answer": "Here's a simple C++ program that implements a calculator with the given functionality:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            cout << \"Result: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"Result: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"Result: \" << num1 * num2 << endl;\n            break;\n        case '/':\n            if(num2 != 0.0"
  },
  {
    "id": 219,
    "question": "Write a C++ program to calculate the factorial of a given number using a recursive function.",
    "answer": "Here's a simple C++ program that calculates the factorial of a given number using a recursive function:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Function to calculate factorial using recursion\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Factorial is not defined for negative numbers.\" << endl;\n        return 1;\n    }\n\n    // Calculate and display the factorial\n    cout << \"Factorial of \" << num << \" = \" << factorial(num) << endl;\n    return 0;\n}\n\n// Recursive function to calculate factorial\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);"
  },
  {
    "id": 220,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division of two numbers:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    double result;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> choice;\n\n    switch (choice) {\n        case '+':\n            result = static_cast<double>(num1) + static_cast<double>(num2);\n            cout << num1 << \" + \" << num2 << \" = \" << result << endl;\n            break;\n        case '-':\n            result = static_cast<double>(num1) - static_cast<double>(num2);\n            cout << num"
  },
  {
    "id": 221,
    "question": "Write a C++ program to find the sum of two matrices of the same dimensions.",
    "answer": "Here is a simple C++ program that takes two matrices of the same dimensions as input and returns their sum as an output:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int SIZE = 3; // Define the size of the matrix\n\nvoid inputMatrix(int matrix[SIZE][SIZE]) { // Function to take input of matrix\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            cin >> matrix[i][j];\n        }\n    }\n}\n\nvoid displayMatrix(int matrix[SIZE][SIZE]) { // Function to display the matrix\n    for (int i = 0; i < SIZE; i++) {\n        for (int j = 0; j < SIZE; j++) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvoid sumMatrices(int mat1[SIZE][SIZE], int mat2"
  },
  {
    "id": 222,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform.",
    "answer": "Here's a simple C++ program to implement a calculator that can perform addition, subtraction, multiplication, and division operations based on user input.\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout"
  },
  {
    "id": 223,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n\n        case '*':\n            cout << num1 << \" * \" << num2 << \""
  },
  {
    "id": 224,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and the desired operation as input.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division operations based on user input:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the desired operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is"
  },
  {
    "id": 225,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to choose the operation and input the operands.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations based on user input.\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    char operation;\n    double num1, num2;\n\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch (operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case"
  },
  {
    "id": 226,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple C++ program to find the factorial of a given number using recursion:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint factorial(int n); // Function prototype\n\nint main() {\n    int num, fact;\n\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    fact = factorial(num); // Calling the recursive function\n\n    cout << \"Factorial of \" << num << \" = \" << fact << endl;\n\n    return 0;\n}\n\nint factorial(int n) {\n    if(n > 1)\n        return n * factorial(n - 1); // Recursive call\n    else\n        return 1; // Base case\n}\n```\n\nIn this program, the `factorial` function is defined recursively. It calculates the factorial by multiplying the number with the factorial of the number minus one until it reaches the base case where the number is equal to 1,"
  },
  {
    "id": 227,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two integers as input and allow the user to choose the operation.",
    "answer": "Here's a simple C++ program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first integer: \";\n    cin >> num1;\n\n    cout << \"Enter the second integer: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is:"
  },
  {
    "id": 228,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and display the result of the specified operation.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n    cout << \"Enter the second number: \";\n    cin >> num2;\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result is: \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout << \"The result is:"
  },
  {
    "id": 229,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program to find the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Function to find factorial using recursion\nint factorial(int n) {\n    if (n == 0) {\n        return 1; // Base case\n    }\n    else {\n        return n * factorial(n - 1); // Recursive call\n    }\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Factorial is not defined for negative numbers.\";\n        return 1;\n    }\n\n    int result = factorial(num);\n    cout << \"Factorial of \" << num << \" = \" << result << endl;\n\n    return 0;\n}\n```\n\nThis program takes an integer as input and"
  },
  {
    "id": 230,
    "question": "Write a C++ program to find the sum of two matrices if their dimensions are equal. The input to the program will be two matrices with their dimensions.",
    "answer": "To find the sum of two matrices in C++, you can follow the steps below:\n\n1. Define the size of the matrix and the number of rows and columns using constants.\n2. Allocate memory for the matrices using 2D arrays or vectors.\n3. Read the elements of the matrices from the user input.\n4. Check if the dimensions of the matrices are equal.\n5. If the dimensions are equal, find the sum of corresponding elements and store it in the result matrix.\n6. Display the sum of the matrices.\n\nHere's the sample code:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n#define ROWS 2\n#define COLS 2\n\nvoid inputMatrix(int matrix[][COLS], string name) {\n    cout << name << \" matrix elements: \" << endl;\n    for (int i = 0; i < ROWS; i++) {\n        for (int j = 0; j < COLS; j"
  },
  {
    "id": 231,
    "question": "Write a C++ program to implement a stack with the following operations: push, pop, top, size, and isEmpty.",
    "answer": "Here is a simple implementation of a stack using an array in C++:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n#define MAX 1000\n\nclass Stack {\n    int top;\n\npublic:\n    int arr[MAX];\n\n    Stack() { top = -1; }\n\n    bool push(int x) {\n        if (top >= (MAX - 1)) {\n            cout << \"Stack Overflow\";\n            return false;\n        }\n        arr[++top] = x;\n        return true;\n    }\n\n    int pop() {\n        if (top < 0) {\n            cout << \"Stack Underflow\";\n            return 0;\n        }\n        return arr[top--];\n    }\n\n    int topElement() {\n        if (top < 0) {\n            cout << \"Stack is Empty\";\n            return 0;\n        }\n        return arr[top];\n    }"
  },
  {
    "id": 232,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two integers.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division of two integers:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, choice;\n    double result;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    cout << \"Choose an operation:\\n\";\n    cout << \"1. Addition\\n\";\n    cout << \"2. Subtraction\\n\";\n    cout << \"3. Multiplication\\n\";\n    cout << \"4. Division\\n\";\n    cout << \"Enter your choice: \";\n    cin >> choice;\n\n    switch(choice) {\n        case 1:\n            result = static_cast<double>(num1) + static_cast<double>(num2);\n            cout << num1"
  },
  {
    "id": 233,
    "question": "Write a C++ program to implement a stack using an array. The stack should have the following functionalities:\n\n1. Push: Add an element to the top of the stack.\n2. Pop: Remove and return the top element from the stack.\n3. Size: Return the current size of the stack.\n4. IsEmpty: Check if the stack is empty.",
    "answer": "Here's a simple C++ implementation of a stack using an array:\n\n```cpp\n#define MAX_SIZE 1000\n\nclass Stack {\nprivate:\n    int top;\n    int arr[MAX_SIZE];\n\npublic:\n    Stack() { top = -1; } // Constructor initializes the top to -1\n\n    bool push(int x) {\n        if (top >= MAX_SIZE - 1) {\n            std::cout << \"Stack is full. Cannot push: \" << x << std::endl;\n            return false;\n        }\n        arr[++top] = x;\n        return true;\n    }\n\n    int pop() {\n        if (top < 0) {\n            std::"
  },
  {
    "id": 234,
    "question": "Write a C++ program to find the second largest number in an array of 10 integers.",
    "answer": "Here's a simple C++ program to find the second largest number in an array of 10 integers:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int arr[10]; // Declare an integer array of size 10\n\n    // Input 10 integers in the array\n    for(int i = 0; i < 10; i++) {\n        cout << \"Enter number \" << i+1 << \": \";\n        cin >> arr[i];\n    }\n\n    // Initialize first and second largest numbers with first element of array\n    int first_largest = arr[0];\n    int second_largest = arr[0];\n\n    // Find the first and second largest numbers in the array\n    for(int i = 1; i < 10; i++) {\n        if(arr[i] > first_largest) {\n            second_largest = first_largest;\n            first_largest ="
  },
  {
    "id": 235,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers.",
    "answer": "Here's a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division of two numbers:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operation;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> operation;\n\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n\n        case '*':\n            cout << num1 << \" * \" <<"
  },
  {
    "id": 236,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's an example of a simple C++ program to find the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to find the factorial using recursion\nint factorial(int n) {\n    if (n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Error! Factorial is not defined for negative numbers.\" << endl;\n        return 1;\n    }\n\n    // Call the recursive function and display the result\n    int result = factorial(num);\n    cout << \"The factorial of \" << num << \" is: \" << result << endl;\n    return 0;\n}\n```\n\nThis program takes a positive integer"
  },
  {
    "id": 237,
    "question": "Write a C++ program to find the sum of two matrices if their dimensions are equal. The matrices should be initialized with user input.",
    "answer": "Here is a simple C++ program to find the sum of two matrices if their dimensions are equal. This program uses two-dimensional arrays to represent the matrices.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int m, n; // Define the number of rows and columns\n\n    // Input the dimensions of the matrices\n    cout << \"Enter the number of rows and columns: \";\n    cin >> m >> n;\n\n    int matrix1[m][n], matrix2[m][n], sum[m][n]; // Define the matrices and the sum matrix\n\n    // Input the elements of the first matrix\n    cout << \"Enter the elements of the first matrix: \\n\";\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> matrix1[i][j];\n        }\n    }\n\n    // Input the elements of the second matrix"
  },
  {
    "id": 238,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division of two numbers.",
    "answer": "Here's a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division of two numbers:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double num1, num2; // Declare two variables of type double to store numbers\n    char operation;   // Declare a character variable to store the operation symbol\n\n    cout << \"Enter the first number: \";\n    cin >> num1; // Read the first number from user input\n\n    cout << \"Enter the operation (+, -, *, /): \";\n    cin >> operation; // Read the operation symbol from user input\n\n    cout << \"Enter the second number: \";\n    cin >> num2; // Read the second number from user input\n\n    switch (operation) {\n        case '+':\n            cout << \"The result is: \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << \"The result"
  },
  {
    "id": 239,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to choose the desired operation using a menu.",
    "answer": "Here's a simple C++ program that implements a calculator with the given functionalities:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    do {\n        system(\"clear\"); // For Linux/MacOS use 'clear' instead of 'cls'\n        // For Windows use 'cls';\n\n        cout << \"\\nSimple Calculator Menu:\\n\";\n        cout << \"1. Add\\n\";\n        cout << \"2. Subtract\\n\";\n        cout << \"3. Multiply\\n\";\n        cout << \"4. Divide\\n\";\n        cout << \"5. Exit\\n\";\n        cout << \"\\nEnter your choice: \";\n        cin >> operation;\n\n        switch (operation) {\n            case '1':\n                cout << \"\\nEnter two numbers for addition: \";"
  },
  {
    "id": 240,
    "question": "Write a C++ program to find the sum of two matrices. The matrices should be of equal dimensions.",
    "answer": "Here's a simple C++ program to find the sum of two matrices. This program assumes that the matrices are 2-dimensional arrays and that their dimensions are provided as input.\n\n```cpp\n#include<iostream>\nusing namespace std;\n\n// Function to find the sum of two matrices\nvoid matrixSum(int matrix1[3][3], int matrix2[3][3], int result[3][3]) {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            result[i][j] = matrix1[i][j] + matrix2[i][j];\n        }\n    }\n}\n\nint main() {\n    int matrix1[3][3], matrix2[3][3], result[3][3];\n\n    // Input matrices\n    cout << \"Enter the elements of the first matrix: \";\n    for (int i = 0; i < 3; i++) {"
  },
  {
    "id": 241,
    "question": "Write a C++ program to implement a stack using an array of size 10. Perform the following operations: push, pop, peek, and check if the stack is full.",
    "answer": "Here's a simple C++ program that implements a stack using an array of size 10. This program includes the functions `push()`, `pop()`, `peek()`, and checks if the stack is full.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int MAX = 10;\n\nclass Stack {\n    private:\n        int top;\n        int arr[MAX];\n\n    public:\n        Stack() { top = -1; }\n\n        bool push(int value) {\n            if (top >= MAX - 1) {\n                cout << \"Stack is Full!\" << endl;\n                return false;\n            }\n            arr[++top] = value;\n            cout << value << \" pushed to stack.\" << endl;\n            return true;\n        }\n\n        int pop() {\n            if (top < 0) {\n                cout << \"Stack is Em"
  },
  {
    "id": 242,
    "question": "Write a C++ program to find the sum of two matrices. The dimensions of both matrices must be equal.",
    "answer": "To find the sum of two matrices in C++, you need to follow these steps:\n\n1. Define the structure for the matrix with two integers for rows and columns.\n2. Create two matrices and initialize their elements.\n3. Write a function to find the sum of two matrices.\n4. Inside the function, check if the matrices have the same dimensions.\n5. If the dimensions are equal, perform element-wise addition and return the sum matrix.\n6. If the dimensions are not equal, print an error message and return.\n\nHere's the code:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nstruct Matrix {\n    int rows, cols;\n    int** elements;\n};\n\nvoid inputMatrix(Matrix& mat) {\n    cout << \"Enter the number of rows and columns: \";\n    cin >> mat.rows >> mat.cols;\n\n    mat.elements = new int*[mat.rows];\n    for (int i = 0; i < mat.rows; i"
  },
  {
    "id": 243,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The program should take two integers and an operator as input from the user and output the result of the operation.",
    "answer": "Here's a simple C++ program to implement a calculator as per your requirements:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Enter the operator (+, -, *, /): \";\n    cin >> operation;\n\n    switch (operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':"
  },
  {
    "id": 244,
    "question": "Write a C++ program to find the sum of all elements in an array of integers. The size of the array and the elements themselves should be input by the user.",
    "answer": "Here's a simple C++ program that fulfills the given requirement:\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n\n    cout << \"Enter the size of the array: \";\n    cin >> n;\n\n    int arr[n];\n\n    cout << \"Enter the elements of the array: \";\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        sum += arr[i];\n    }\n\n    cout << \"Sum of all elements in the array: \" << sum << endl;\n\n    return 0;\n}\n```\n\nThis program takes the size of the array and each element as input from the user. It then initializes an array of that size and calculates the sum of all elements by iterating through the array and adding each element to the sum variable. Finally, it prints out the sum"
  },
  {
    "id": 245,
    "question": "Write a C++ program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The program should take two integers as input and allow the user to choose which operation to perform.",
    "answer": "Here is a simple C++ program that implements a calculator with the described functionality:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num1, num2;\n    char operation;\n\n    cout << \"Enter the first integer: \";\n    cin >> num1;\n\n    cout << \"Enter the second integer: \";\n    cin >> num2;\n\n    cout << \"Choose an operation (+, -, *, /): \";\n    cin >> operation;\n\n    switch(operation) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;\n        case '*':\n            cout <<"
  },
  {
    "id": 246,
    "question": "Write a C++ program to find the factorial of a given number using a recursive function.",
    "answer": "Here is a simple C++ program to find the factorial of a given number using a recursive function:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Recursive function to find factorial\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Please enter a positive integer.\";\n        return 1;\n    }\n\n    // Call recursive function to find factorial\n    int fact = factorial(num);\n    cout << \"Factorial of \" << num << \" = \" << fact << endl;\n\n    return 0;\n}\n\n// Recursive function to find factorial\nint factorial(int n) {\n    if (n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;\n}"
  },
  {
    "id": 247,
    "question": "Write a C++ program to find the second largest number in an array of integers. The array size should be taken as input from the user.",
    "answer": "Here is a simple C++ program that finds the second largest number in an array of integers. The array size is taken as input from the user.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, first = INT_MIN, second = INT_MIN;\n\n    cout << \"Enter the size of the array: \";\n    cin >> n;\n\n    int arr[n];\n\n    cout << \"Enter the elements of the array: \";\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n\n        if (arr[i] > first) {\n            second = first;\n            first = arr[i];\n        } else if (arr[i] > second && arr[i] != first) {\n            second = arr[i];\n        }\n    }\n\n    cout << \"The second largest number is: \" << second;\n\n    return 0"
  },
  {
    "id": 248,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The user should be able to input two numbers and an operator (+, -, *, /) and the program should display the result of the operation.",
    "answer": "Here's a simple C++ program to implement a calculator as per your requirements:\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    char op;\n    double num1, num2, result;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    cout << \"Enter an operator (+, -, *, /): \";\n    cin >> op;\n\n    switch(op) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if("
  },
  {
    "id": 249,
    "question": "Write a C++ program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The user should be able to enter the operators and numbers as input.",
    "answer": "Here is a simple C++ program for a calculator that performs addition, subtraction, multiplication, and division operations based on user input.\n\n```cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2;\n    char operator;\n\n    cout << \"Enter the first number: \";\n    cin >> num1;\n\n    cout << \"Enter the operator (+, -, *, /): \";\n    cin >> operator;\n\n    cout << \"Enter the second number: \";\n    cin >> num2;\n\n    switch(operator) {\n        case '+':\n            cout << num1 << \" + \" << num2 << \" = \" << num1 + num2 << endl;\n            break;\n\n        case '-':\n            cout << num1 << \" - \" << num2 << \" = \" << num1 - num2 << endl;\n            break;"
  },
  {
    "id": 250,
    "question": "Write a C++ program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple C++ program to find the factorial of a given number using recursion:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to find the factorial of a given number using recursion\nint factorial(int n) {\n    if (n == 0) {\n        return 1; // Base case\n    }\n    else {\n        return n * factorial(n-1); // Recursive call\n    }\n}\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n\n    // Check for valid input\n    if (num < 0) {\n        cout << \"Invalid input! Factorial is not defined for negative numbers.\";\n        return 1;\n    }\n\n    int fact = factorial(num); // Call the recursive function\n    cout << \"Factorial of \" << num << \" is: \" << fact << endl;\n\n    return 0;\n}\n```"
  },
  {
    "id": 251,
    "question": "Write a Python program to calculate the sum of all even numbers between 1 and 100.",
    "answer": "Here's a simple Python program to calculate the sum of all even numbers between 1 and 100:\n\n```python\nsum_even_numbers = 0\n\nfor number in range(1, 101):\n    if number % 2 == 0:\n        sum_even_numbers += number\n\nprint(\"The sum of all even numbers between 1 and 100 is:\", sum_even_numbers)\n```\n\nThis program initializes a variable `sum_even_numbers` to 0, and then uses a `for` loop to iterate through all numbers from 1 to 100. For each number, it checks if it's even by using the modulo operator `%` to see if the number leaves a remainder of 0 when divided by 2. If the number is even, it's added to the `sum_even_numbers` variable. Finally, the program prints the sum of all even numbers between 1 and 100."
  },
  {
    "id": 252,
    "question": "Write a Python program to reverse a given string without using any in-built functions.",
    "answer": "Here's a simple Python program to reverse a given string without using any in-built functions:\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    This function takes a string as an input and returns the reversed string.\n    \"\"\"\n    reversed_string = ''\n    length = len(input_str)\n\n    # Iterate through each character in the string from the end to the beginning\n    for i in range(length - 1, -1, -1):\n        reversed_string += input_str[i]\n\n    return reversed_string\n\n# Test the function\ninput_str = 'Hello, World!'\noutput_str = reverse_string(input_str)\nprint('Original String:', input_str)\nprint('Reversed String:', output_str)\n```\n\nThis program defines a function `reverse_string` that takes a string as an argument and returns the reversed string by iterating through the string from the end to the beginning and appending each character to a new string"
  },
  {
    "id": 253,
    "question": "Write a program to calculate the factorial of a given number using recursion in Python.",
    "answer": "Here is a simple Python program that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    :param n: An integer number\n    :return: The factorial of the given number\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: n! = n * (n-1)!\n        return n * factorial(n-1)\n\n# Test the function\nnumber = int(input(\"Enter a number: \"))\nprint(f\"The factorial of {number} is {factorial(number)}\")\n```\n\nThis program defines a function called `factorial` that takes an integer `n` as an argument. The base case for the recursion is when `n` is equal to 0, in which case the function returns 1. Otherwise,"
  },
  {
    "id": 254,
    "question": "Write a Python program to reverse a string without using the built-in reverse function or slicing.",
    "answer": "To reverse a string in Python without using the built-in reverse function or slicing, you can use a for loop and store the characters in a list or another string in reverse order. Here's an example:\n\n```python\ndef reverse_string(input_string):\n    reversed_string = ''\n    for char in input_string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\ninput_string = 'Hello, World!'\noutput_string = reverse_string(input_string)\nprint(output_string)\n```\n\nThis function, `reverse_string`, takes an input string as an argument and initializes an empty string `reversed_string`. It then iterates through each character in the input string and appends it to the beginning of the `reversed_string`. After all the characters have been processed, the function returns the reversed string.\n\nYou can test this function with the given input string 'Hello, World!'. The output should be 'dlroW ,olle"
  },
  {
    "id": 255,
    "question": "Write a program to calculate the factorial of a given number using a recursive function.",
    "answer": "Here's a simple Python solution for calculating the factorial of a given number using a recursive function:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    :param n: An integer representing the number whose factorial is to be calculated.\n    :return: The factorial of the given number.\n    \"\"\"\n\n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n\n    # Recursive case: multiply n with the factorial of (n-1)\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnumber = int(input(\"Enter a number: \"))\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\nIn this solution, the `factorial` function takes an integer `n` as an argument and calculates its factorial using recursion"
  },
  {
    "id": 256,
    "question": "Write a Python program to reverse the order of words in a given sentence while keeping each word in its original form. For example, if the input is \"Hello World, I am a programmer\", the output should be \"programmer a am I, World Hello\".",
    "answer": "To reverse the order of words in a given sentence while keeping each word in its original form, you can split the sentence into words using the `split()` method, reverse the order of the list of words using the `reverse()` method, and join the words back together using the `join()` method. Here's the code:\n\n```python\ndef reverse_sentence(sentence):\n    words = sentence.split()\n    words.reverse()\n    reversed_sentence = \" \".join(words)\n    return reversed_sentence\n\nsentence = \"Hello World, I am a programmer\"\nprint(reverse_sentence(sentence))\n```\n\nOutput:\n```\nprogrammer a am I, World Hello\n```"
  },
  {
    "id": 257,
    "question": "Write a Python program to find the sum of all numbers in a list, given that the list can contain both positive and negative numbers.",
    "answer": "Here's a simple Python program to find the sum of all numbers in a list, regardless of whether they are positive or negative:\n\n```python\ndef find_sum(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"The sum of the numbers in the list is:\", find_sum(numbers))\n\nnumbers = [1, 2, 3, 4, -5, -6, -7, -8, -9, -10]\nprint(\"The sum of the numbers in the list is:\", find_sum(numbers))\n```\n\nThis program defines a function `find_sum()`"
  },
  {
    "id": 258,
    "question": "Write a Python program to reverse the words in a given string while maintaining the original word order.",
    "answer": "To reverse the words in a given string while maintaining the original word order, you can split the string into words using the `split()` method, reverse the order of the words using `reverse()` method on the list, and then join the words back together using the `join()` method. Here's the Python code for that:\n\n```python\ndef reverse_words(input_string):\n    words = input_string.split()\n    words.reverse()\n    reversed_string = ' '.join(words)\n    return reversed_string\n\n# Test the function\ninput_string = \"The quick brown fox jumps over the lazy dog\"\noutput_string = reverse_words(input_string)\nprint(output_string)\n```\n\nOutput:\n```\ndog lazy the over jumps brown quick The\n```"
  },
  {
    "id": 259,
    "question": "Write a Python program to reverse the string \"hello\" and print the reversed string.",
    "answer": "Here's a simple Python program that reverses the string \"hello\" and prints the reversed string:\n\n```python\n# Use slicing to reverse the string\nreversed_string = \"hello\"[::-1]\n\n# Print the reversed string\nprint(reversed_string)\n```\n\nOutput:\n```\nolleh\n```\n\nExplanation:\nIn Python, you can reverse a string using slicing. The `[::-1]` slice notation reverses the order of the string. In the given code, we first assign the string \"hello\" to a variable named `reversed_string`. Then, we use slicing to reverse the string and assign the reversed string to the same variable. Finally, we print the reversed string using the `print()` function."
  },
  {
    "id": 260,
    "question": "Write a program in Python to find the sum of all the numbers in a list.",
    "answer": "Here's a simple Python program to find the sum of all the numbers in a list:\n\n```python\n# Create a list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Initialize a variable to store the sum\ntotal = 0\n\n# Use a for loop to iterate through the list and add each number to the sum\nfor num in numbers:\n    total += num\n\n# Print the final sum\nprint(total)\n```\n\nIn this example, we first create a list of numbers called `numbers`. We then initialize a variable `total` to 0, which we will use to store the sum of all the numbers in the list. We use a `for` loop to iterate through each number in the list and add it to the `total` variable using the `+=` operator. Finally, we print the value of `total` to the console, which will be the sum of all the numbers in the list."
  },
  {
    "id": 261,
    "question": "Write a Python program to calculate the factorial of a given number using recursion.",
    "answer": "Here is a simple Python program to calculate the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a given number using recursion.\n\n    Parameters:\n        n (int): The number to find the factorial of.\n\n    Returns:\n        int: The factorial of the given number.\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: multiply n by the factorial of n-1\n        return n * factorial(n-1)\n\n# Test the function\nnumber = 5\nprint(\"The factorial of\", number, \"is\", factorial(number))\n```\n\nThis program defines a function called `factorial` that takes an integer `n` as an argument and returns its factorial using recursion. The base case is when `n` is equal to 0, in which case the function returns"
  },
  {
    "id": 262,
    "question": "Write a Python program to reverse the order of words in a given sentence while keeping each word in its original order.",
    "answer": "To reverse the order of words in a given sentence while keeping each word in its original order, you can split the sentence into a list of words, reverse the order of the list, and then join the list back into a sentence. Here's a simple Python program to do that:\n\n```python\ndef reverse_words(sentence):\n    words = sentence.split()\n    words.reverse()\n    reversed_sentence = ' '.join(words)\n    return reversed_sentence\n\n# Test the function\nprint(reverse_words(\"The quick brown fox jumps over the lazy dog\"))\n# Output: dog lazy the over jumps brown quick The\n```\n\nIn this example, the `reverse_words` function takes a sentence as an argument, splits it into a list of words using the `split` method, reverses the order of the list using the `reverse` method, and then joins the list back into a sentence using the `join` method with a space as the separator. The reversed sentence is then returned"
  },
  {
    "id": 263,
    "question": "Write a Python program to reverse a string without using the built-in reverse function.",
    "answer": "Here's a simple Python program that reverses a string without using the built-in reverse function:\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    Reverses a given string without using the built-in reverse function.\n    \"\"\"\n    reversed_str = \"\"\n    i = len(input_str) - 1\n    while i >= 0:\n        reversed_str += input_str[i]\n        i -= 1\n    return reversed_str\n\n# Test the reverse_string function\ninput_str = \"Hello, World!\"\noutput_str = reverse_string(input_str)\nprint(output_str)\n```\n\nIn this program, we define a function named `reverse_string` that takes a string as an argument. We initialize an empty string named `reversed_str` and a variable `i` that represents the index of the current character in the string. We then use a `while` loop to iterate through the string from the end to the beginning and add each character"
  },
  {
    "id": 264,
    "question": "Write a Python program to find the sum of all numbers in a list.",
    "answer": "Here's a simple Python program to find the sum of all numbers in a list:\n\n```python\n# Define a list of numbers\nnumbers = [1, 2, 3, 4, 5]\n\n# Initialize a variable to store the sum\ntotal = 0\n\n# Use a for loop to iterate through the list and add each number to the sum\nfor num in numbers:\n    total += num\n\n# Print the result\nprint(f\"The sum of the numbers in the list is: {total}\")\n```\n\nThis program defines a list `numbers` containing five numbers, initializes a variable `total` to store the sum, uses a `for` loop to iterate through the list and add each number to the sum, and finally prints the result."
  },
  {
    "id": 265,
    "question": "Write a Python program to reverse the order of words in a given sentence while keeping each word in its original form.",
    "answer": "Here's a simple Python program that reverses the order of words in a given sentence:\n\n```python\ndef reverse_words(sentence):\n    # Split the sentence into a list of words\n    words = sentence.split()\n\n    # Reverse the order of the words in the list\n    reversed_words = words[::-1]\n\n    # Join the reversed words back into a sentence\n    reversed_sentence = ' '.join(reversed_words)\n\n    return reversed_sentence\n\n# Test the function\nsentence = \"The quick brown fox jumps over the lazy dog\"\nreversed_sentence = reverse_words(sentence)\nprint(reversed_sentence)\n```\n\nThis program defines a function `reverse_words` that takes a sentence as an argument, splits it into a list of words using the `split` method, reverses the order of the words in the list using slicing, and then joins the reversed words back"
  },
  {
    "id": 266,
    "question": "Write a Python program to reverse a string using a list.",
    "answer": "Here's a simple Python program that reverses a string using a list:\n\n```python\ndef reverse_string(input_str):\n    # Create a list from the input string\n    list_str = list(input_str)\n\n    # Reverse the list\n    list_str.reverse()\n\n    # Join the list elements back into a string\n    reversed_str = ''.join(list_str)\n\n    return reversed_str\n\n# Test the function\nprint(reverse_string(\"Hello\"))\n```\n\nThis function `reverse_string` takes a string as an argument, creates a list from it, reverses the list using the `reverse()` method, and then joins the list elements back together into a string using the `join()` method. The reversed string is then returned as the output."
  },
  {
    "id": 267,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that can perform addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nwhile True:\n    choice = input(\"Enter choice (1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))"
  },
  {
    "id": 268,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that performs addition, subtraction, multiplication, and division operations using user input:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nwhile True:\n    choice = input(\"Enter choice (1/2/3/4): \")\n\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))"
  },
  {
    "id": 269,
    "question": "Write a program in Python to calculate the sum of the first N even numbers.",
    "answer": "Here's a simple Python program to calculate the sum of the first N even numbers:\n\n```python\ndef sum_even(n):\n    \"\"\"\n    Calculate the sum of the first N even numbers.\n\n    Parameters:\n    n (int): The number of even numbers to sum.\n\n    Returns:\n    int: The sum of the first N even numbers.\n    \"\"\"\n    total = 0\n    i = 0\n    while total < n:\n        total += i + 1\n        i += 2\n    return total\n\n# Test the function\nn = 10\nprint(sum_even(n))  # Output: 38 (The sum of the first 10 even numbers: 2 + 4 + 6 + ... + 38)\n```\n\nIn this example, we define a function called `sum_even` that takes an integer `n` as an argument. The function initializes a variable `total` to 0 and a variable `i` to 0. We then use a `"
  },
  {
    "id": 270,
    "question": "Write a Python program to reverse the order of words in a given sentence while keeping each word in its original form.",
    "answer": "To reverse the order of words in a given sentence while keeping each word in its original form, you can split the sentence into a list of words using the `split()` method, reverse the order of the list using the `reverse()` method, and then join the words back into a sentence using the `join()` method. Here's the code:\n\n```python\nsentence = \"The quick brown fox jumps over the lazy dog\"\n\n# Split the sentence into a list of words\nwords = sentence.split()\n\n# Reverse the order of the list\nwords.reverse()\n\n# Join the words back into a sentence\nreversed_sentence = \" \".join(words)\n\nprint(reversed_sentence)\n```\n\nOutput:\n```\ndog lazy the over jumps fox brown quick The\n```"
  },
  {
    "id": 271,
    "question": "Write a program in Python to reverse the order of words in a given sentence while keeping each word in its original order.",
    "answer": "To reverse the order of words in a given sentence while keeping each word in its original order, you can split the sentence into a list of words, reverse the order of the list, and then join the words back together into a sentence. Here's the code:\n\n```python\nsentence = \"The quick brown fox jumps over the lazy dog\"\n# Split sentence into a list of words\nwords = sentence.split()\n# Reverse the order of the list\nwords.reverse()\n# Join the words back together into a sentence\nreversed_sentence = \" \".join(words)\nprint(reversed_sentence)\n```\n\nOutput:\n```\ndog lazy the over jumps brown quick The\n```"
  },
  {
    "id": 272,
    "question": "Write a Python program to reverse the order of words in a given string, where each word is separated by a single space.",
    "answer": "To reverse the order of words in a given string, where each word is separated by a single space, you can follow these steps:\n\n1. Split the given string into a list of words using the `split()` method.\n2. Reverse the order of the list using the `reverse()` method.\n3. Join the list back into a single string using the `join()` method.\n\nHere's the code:\n\n```python\ndef reverse_words(string):\n    words = string.split()\n    words.reverse()\n    reversed_string = ' '.join(words)\n    return reversed_string\n\n# Test the function\ninput_string = \"Hello World\"\noutput_string = reverse_words(input_string)\nprint(output_string)\n```\n\nOutput:\n```\nWorld Hello\n```"
  },
  {
    "id": 273,
    "question": "Write a Python program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Python program that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    :param n: An integer number.\n    :return: The factorial of the given number.\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n\n    # Recursive case: multiply n with the factorial of n-1\n    else:\n        return n * factorial(n - 1)\n\n# Test the function\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\nThis Python program defines a `factorial` function that takes an integer as its argument and calculates its factorial using recursion. The base case is when the number is 0, and the factorial of 0 is 1. In"
  },
  {
    "id": 274,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator function that can perform addition, subtraction, multiplication, and division operations:\n\n```python\ndef calculator(num1, num2, operation):\n    if operation == 'add':\n        result = num1 + num2\n    elif operation == 'subtract':\n        result = num1 - num2\n    elif operation == 'multiply':\n        result = num1 * num2\n    elif operation == 'divide':\n        if num2 != 0:\n            result = num1 / num2\n        else:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n    else:\n        print(\"Error: Invalid operation.\")\n        return\n\n    print(f\"The result is: {result}\")\n\n# Example usage:\ncalculator(5, 3, 'add') # Output: The result is: 8\ncalculator(10, 2, 'subtract') # Output: The result is"
  },
  {
    "id": 275,
    "question": "Write a Python program to reverse a given string without using any built-in functions.",
    "answer": "To reverse a given string in Python without using any built-in functions, you can use slicing. Here's a simple example:\n\n```python\ndef reverse_string(input_str):\n    \"\"\"\n    Reverses a given string without using any built-in functions.\n    :param input_str: The input string\n    :return: The reversed string\n    \"\"\"\n    reversed_str = \"\"\n    length = len(input_str)\n\n    # Iterate through the string from end to start and add each character to reversed_str\n    for i in range(length - 1, -1, -1):\n        reversed_str += input_str[i]\n\n    return reversed_str\n\n# Test the function\nprint(reverse_string(\"Hello World\"))\n```\n\nThis program defines a function `reverse_string` that takes a string as an argument and returns its reversed version. It initializes an empty string `reversed_str` and then uses a for loop to iterate through the input string"
  },
  {
    "id": 276,
    "question": "Write a Python program to find the sum of all even numbers in a list.",
    "answer": "Here's a simple Python program to find the sum of all even numbers in a given list:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all even numbers in the list.\n    \"\"\"\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_even_numbers(numbers))\n```\n\nThis program defines a function called `sum_even_numbers` that takes a list of numbers as an argument. It initializes a variable `sum` to 0, then iterates through each number in the list using a `for` loop. If the number is even (i.e., if its remainder when divided by 2 is 0), the number is added to the `"
  },
  {
    "id": 277,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that can perform addition, subtraction, multiplication, and division operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        print(\"Error: Division by zero is not allowed.\")\n        return None\n    else:\n        return x / y\n\nprint(\"Select operation.\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = input(\"Enter choice (1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif choice == '1':\n    print(num1, \"+\","
  },
  {
    "id": 278,
    "question": "Write a Python program to find the second largest number in a list of integers.",
    "answer": "Here's a simple Python program to find the second largest number in a given list of integers:\n\n```python\ndef find_second_largest(numbers):\n    # Find the largest number\n    largest = max(numbers)\n\n    # Remove the largest number from the list\n    numbers.remove(largest)\n\n    # Find the second largest number\n    second_largest = max(numbers)\n\n    return second_largest\n\n# Test the function\nnumbers = [10, 5, 32, 15, 25, 6, 45, 2]\nsecond_largest = find_second_largest(numbers)\nprint(\"The second largest number in the list is:\", second_largest)\n```\n\nThis program defines a function called `find_second_largest` that takes a list of numbers as an argument. It first finds the largest number using the built-in `max` function and removes it from the list. Then, it finds the second largest number"
  },
  {
    "id": 279,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that can perform basic arithmetic operations:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    print(\"Select operation:\")\n    print(\"1. Add\")\n    print(\"2. Subtract\")\n    print(\"3. Multiply\")\n    print(\"4. Divide\")\n\n    choice = input(\"Enter choice (1/2/3/4): \")\n\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n\n    if choice == '1':\n        print(num1, \"+\", num2, \"="
  },
  {
    "id": 280,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that takes two numbers as input and performs addition, subtraction, multiplication, and division operations using user-defined functions:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y != 0:\n        return x / y\n    else:\n        return \"Error: Division by zero is not allowed.\"\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nwhile True:\n    choice = int(input(\"Enter choice (1/2/3/4): \"))\n    if choice in (1, 2, 3, 4):\n        num1 = float(input(\"Enter first number: \"))"
  },
  {
    "id": 281,
    "question": "Write a Python program to reverse a string without using the built-in reverse function or slicing.",
    "answer": "To reverse a string in Python without using the built-in reverse function or slicing, you can use a for loop and swap the characters from the beginning and end of the string. Here's an example:\n\n```python\ndef reverse_string(input_str):\n    reversed_str = ''\n    i = 0\n    length = len(input_str)\n\n    while i < length:\n        reversed_str += input_str[length - 1 - i]\n        i += 1\n\n    return reversed_str\n\n# Test the function\ninput_str = \"Hello, World!\"\noutput_str = reverse_string(input_str)\nprint(output_str)\n```\n\nThis program defines a function `reverse_string` that takes an input string and returns the reversed string. It initializes an empty string `reversed_str` and a variable `i` that represents the current index in the string. The length of the input string is also calculated. The function then enters a while loop that runs"
  },
  {
    "id": 282,
    "question": "Write a Python program to reverse a string without using built-in functions or slicing.",
    "answer": "Here's a simple Python program to reverse a string without using built-in functions or slicing:\n\n```python\ndef reverse_string(input_str):\n    reversed_str = ''\n    index = len(input_str) - 1\n\n    while index >= 0:\n        reversed_str += input_str[index]\n        index -= 1\n\n    return reversed_str\n\n# Test the function\ninput_str = \"Hello, World!\"\nprint(reverse_string(input_str))\n```\n\nThis program defines a function `reverse_string` that takes an input string as an argument. It initializes an empty string `reversed_str` and a variable `index` set to the length of the input string minus one. The program then enters a while loop that runs as long as `index` is greater than or equal to zero. In each iteration of the loop, it appends the character at index `input_str[index]` to the `reversed_str` and decrements `index"
  },
  {
    "id": 283,
    "question": "Write a Python program to calculate the sum of the first n natural numbers using a function.",
    "answer": "Here's a simple Python function that calculates the sum of the first n natural numbers:\n\n```python\ndef sum_of_n_numbers(n):\n    \"\"\"\n    This function calculates the sum of the first n natural numbers.\n\n    :param n: An integer representing the number of natural numbers to sum.\n    :return: An integer representing the sum of the first n natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Calculate the sum using a for loop\n    for i in range(1, n+1):\n        sum += i\n\n    # Return the calculated sum\n    return sum\n\n# Test the function with some inputs\nprint(sum_of_n_numbers(5))  # Output: 15\nprint(sum_of_n_numbers(10))  # Output: 55\n```\n\nThis function takes an integer as an argument, `n`, and calculates the sum of the first `n` natural numbers using a for"
  },
  {
    "id": 284,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that uses a dictionary to map each operation to its corresponding function:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\noperations = {\n    '+': add,\n    '-': subtract,\n    '*': multiply,\n    '/': divide\n}\n\ndef calculator(num1, num2, operation):\n    if operation not in operations:\n        raise ValueError(\"Invalid operation\")\n    return operations[operation](num1, num2)\n\nprint(calculator(5, 3, '+'))        # 8\nprint(calculator(5, 3, '-'))        # 2\nprint(cal"
  },
  {
    "id": 285,
    "question": "Write a Python program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Python program to calculate the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function uses recursion to calculate the factorial of a given number.\n    :param n: The number whose factorial is to be calculated.\n    :return: The factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = int(input(\"Enter a number: \"))\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```\n\nIn this program, we define a function named `factorial` that takes an integer `n` as its argument. The function uses recursion to calculate the factorial of the given number. If the number is 0, the function returns 1 (since the factorial of 0 is 1). Otherwise, the function calls itself with the argument `n-1` and multi"
  },
  {
    "id": 286,
    "question": "Write a program in Python to find the factorial of a given number using a recursive function.",
    "answer": "In Python, you can write a recursive function to find the factorial of a number as follows:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n\n    :param n: The number whose factorial is to be calculated.\n    :return: The factorial of the given number.\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    else:\n        # Recursive call: multiply the number by the factorial of (number-1)\n        return n * factorial(n-1)\n\n# Test the function\nnum = 5\nresult = factorial(num)\nprint(f\"The factorial of {num} is {result}\")\n```\n\nThis function takes an integer `n` as an argument and returns the factorial of that number using recursion. The base case is when the number is 0, in which case the function returns"
  },
  {
    "id": 287,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that accepts user input for two numbers and an operation symbol (+, -, *, or /), then performs the corresponding arithmetic operation:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        symbol = input(\"Enter an operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if symbol == \"+\":\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n        elif symbol == \"-\":\n            print(num1, \"-\", num"
  },
  {
    "id": 288,
    "question": "Write a Python program to reverse the words in a given string while maintaining their order. For example, given the input \"The quick brown fox jumps over the lazy dog\", the output should be \"jumps over the lazy dog the quick brown fox\".",
    "answer": "To reverse the words in a given string while maintaining their order in Python, you can split the string into a list based on white spaces, reverse the order of the list, and then join the elements back together with a space as a separator. Here's the code:\n\n```python\ndef reverse_words(input_string):\n    words = input_string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\ninput_string = \"The quick brown fox jumps over the lazy dog\"\noutput_string = reverse_words(input_string)\nprint(output_string)\n```\n\nThis code defines a function called `reverse_words` that takes a string as an argument, splits it into a list of words, reverses the order of the list using slic"
  },
  {
    "id": 289,
    "question": "Write a Python program to reverse the order of words in a given sentence while keeping each word in its original form.",
    "answer": "To reverse the order of words in a given sentence while keeping each word in its original form, you can split the sentence into a list of words using the `split()` method, reverse the order of the list using the `reverse()` method, and then join the list back into a sentence using the `join()` method. Here's an example Python program:\n\n```python\nsentence = \"The quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\nwords.reverse()\nreversed_sentence = \" \".join(words)\nprint(reversed_sentence)\n```\n\nOutput:\n```\ndog lazy the over jumps fox brown quick The\n```\n\nThis program first splits the given sentence `\"The quick brown fox jumps over the lazy dog\"` into a list of words using the `split()` method with a space as the delimiter. The resulting list is `['The', 'quick', 'brown', 'fox', 'jumps', 'over', '"
  },
  {
    "id": 290,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program to create a calculator that can perform addition, subtraction, multiplication, and division operations.\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef calculator():\n    try:\n        print(\"Select operation.\")\n        print(\"1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        choice = int(input(\"Enter choice (1/2/3/4): \"))\n\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == 1:"
  },
  {
    "id": 291,
    "question": "Write a Python program to reverse a string without using any built-in functions or list methods.",
    "answer": "To reverse a string in Python without using built-in functions or list methods, you can use slicing. Here's a simple example:\n\n```python\ndef reverse_string(input_str):\n    reversed_str = ''\n    length = len(input_str)\n\n    # Iterate through the string from the end to the beginning\n    for i in range(length-1, -1, -1):\n        reversed_str += input_str[i]\n\n    return reversed_str\n\n# Test the function\nprint(reverse_string(\"Hello World\"))\n```\n\nIn this example, we define a function `reverse_string` that takes a single argument `input_str` (the string to be reversed). We initialize an empty string `reversed_str` to store the reversed string. We then calculate the length of the input string and iterate through it using a `for` loop with a step of -1, which moves the loop index backward. For each iteration, we append the current character to `revers"
  },
  {
    "id": 292,
    "question": "Write a Python program to calculate the sum of all even numbers in a given list.",
    "answer": "Here is a simple Python solution to calculate the sum of all even numbers in a given list:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    Function to calculate the sum of all even numbers in a given list\n    :param numbers: List of numbers\n    :return: Sum of all even numbers in the list\n    \"\"\"\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))\n```\n\nThis Python function `sum_even_numbers` takes a list of numbers as an argument and returns the sum of all even numbers in the list. It initializes a variable `total` to 0, then iterates through each number in the list using a for loop. If the number is even (i.e., its remainder when divided by 2 is 0"
  },
  {
    "id": 293,
    "question": "Write a program in Python to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that takes two numbers and an operator as input and returns the result of the corresponding mathematical operation:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    num1 = float(input(\"Enter first number: \"))\n    operator = input(\"Enter operator (+, -, *, /): \")\n    num2 = float(input(\"Enter second number: \"))\n\n    if operator == \"+\":\n        print(add(num1, num2))\n    elif operator == \"-\":\n        print(subtract(num1, num2))\n    elif operator == \"*\":\n        print(multiply(num1, num2))"
  },
  {
    "id": 294,
    "question": "Write a Python program to implement a simple calculator that can perform addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and display the result of the given operation.",
    "answer": "Here's a simple Python program that implements a calculator with the mentioned functionality:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operator = input(\"Enter operator (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operator == \"+\":\n            result = add(num1, num2)\n        elif operator == \"-\":\n            result = subtract(num1, num2)\n        elif operator == \"*\":"
  },
  {
    "id": 295,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should accept user input for two numbers and the desired operation.",
    "answer": "Here's a simple Python program that implements a calculator as described:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return x / y\n\ndef main():\n    try:\n        num1 = float(input(\"Enter first number: \"))\n        operation = input(\"Enter operation (+, -, *, /): \")\n        num2 = float(input(\"Enter second number: \"))\n\n        if operation == \"+\":\n            result = add(num1, num2)\n        elif operation == \"-\":\n            result = subtract(num1, num2)\n        elif operation == \"*\":\n            result = multiply(num1, num"
  },
  {
    "id": 296,
    "question": "Write a program in Python that takes a list of numbers as an argument and returns the sum of all the even numbers in the list.",
    "answer": "Here's a simple Python function that accomplishes this task:\n\n```python\ndef sum_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns the sum of all the even numbers in the list.\n    \"\"\"\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n```\n\nYou can call this function by passing a list of numbers as an argument, like so:\n\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(numbers)\nprint(result)\n```\n\nThis will output the sum of all even numbers in the list:\n\n```\n20\n```"
  },
  {
    "id": 297,
    "question": "Write a Python program to reverse the order of words in a given sentence while maintaining the original word order.",
    "answer": "To reverse the order of words in a given sentence while maintaining the original word order, you can split the sentence into words using the `split()` method, reverse the order of the list of words using the `reverse()` method, and then join the words back together into a sentence using the `join()` method. Here's the code:\n\n```python\ndef reverse_words_in_sentence(sentence):\n    words = sentence.split()\n    words.reverse()\n    reversed_sentence = \" \".join(words)\n    return reversed_sentence\n\n# Test the function\nsentence = \"The quick brown fox jumps over the lazy dog\"\nreversed_sentence = reverse_words_in_sentence(sentence)\nprint(reversed_sentence)\n\n# Output: \"dog the lazy over jumps the brown fox quick The\"\n```\n\nThis function takes a sentence as an argument, splits it into words using the `split()` method, reverses the order of"
  },
  {
    "id": 298,
    "question": "Write a Python program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Python program that calculates the factorial of a given number using recursion:\n\n```python\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number using recursion.\n    :param n: An integer number\n    :return: The factorial of the given number\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Get user input for the number\nnumber = int(input(\"Enter a number to find its factorial: \"))\n\n# Calculate the factorial\nresult = factorial(number)\n\n# Print the result\nprint(\"The factorial of {} is {}\".format(number, result))\n```\n\nThis program defines a recursive function called `factorial()` that takes an integer number as an argument. The base case for the recursion is when the number `n` is equal to 0, in which case the function returns 1. For any other value of `n"
  },
  {
    "id": 299,
    "question": "Write a Python program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Python program for a calculator that performs addition, subtraction, multiplication, and division operations using user inputs:\n\n```python\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        print(\"Error! Division by zero is not allowed.\")\n        return None\n    else:\n        return x / y\n\nprint(\"Select operation:\")\nprint(\"1. Add\")\nprint(\"2. Subtract\")\nprint(\"3. Multiply\")\nprint(\"4. Divide\")\n\nchoice = input(\"Enter choice(1/2/3/4): \")\n\nnum1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\nif choice == '1':\n    print(num1, \"+"
  },
  {
    "id": 300,
    "question": "Write a Python program to reverse the words in a given sentence while keeping the words in their original order.",
    "answer": "To reverse the words in a given sentence while keeping the words in their original order, you can split the sentence into a list of words, reverse each word in the list, and then join the words back together into a sentence using the reversed words. Here's an example implementation:\n\n```python\ndef reverse_words(sentence):\n    # Split the sentence into a list of words\n    words = sentence.split()\n\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words back together into a sentence\n    reversed_sentence = \" \".join(reversed_words)\n\n    return reversed_sentence\n\n# Test the function\nsentence = \"Hello World, I am a programmer\"\nreversed_sentence = reverse_words(sentence)\nprint(reversed_sentence)\n```\n\nThis program defines a function `reverse_words` that takes a sentence as an argument,"
  },
  {
    "id": 301,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this program, the `factorial` method is defined recursively. It takes an integer as an argument and returns the factorial of that number. If the number is 0, it returns 1 (since the factorial of 0 is 1). Otherwise, it multiplies the number with the factorial of the number minus one. This process"
  },
  {
    "id": 302,
    "question": "Write a Java program to find the sum of two integers using a method called \"addNumbers\". The method should take two integer arguments and return the sum as an integer.",
    "answer": "Here's a simple Java program that implements the \"addNumbers\" method as described:\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = addNumbers(num1, num2);\n        System.out.println(\"The sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n    }\n\n    public static int addNumbers(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n}\n```\n\nIn this program, the `addNumbers` method takes two integer arguments (`num1` and `num2`) and returns their sum as an integer. The `main` method initializes two integer variables, calls the `addNumbers` method, and prints the result."
  },
  {
    "id": 303,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple Java program that implements a calculator with basic arithmetic operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operator;\n\n        System.out.println(\"Enter first number:\");\n        num1 = scanner.nextDouble();\n\n        System.out.println(\"Enter operator (+, -, *, /):\");\n        operator = scanner.next().charAt(0);\n\n        System.out.println(\"Enter second number:\");\n        num2 = scanner.nextDouble();\n\n        switch (operator) {\n            case '+':\n                System.out.println(num1 + \" + \" + num2 + \" = \" + (num1 + num2));\n                break;\n            case '-':\n                System.out."
  },
  {
    "id": 304,
    "question": "Write a Java program to print the Fibonacci sequence up to n numbers.",
    "answer": "Here is a simple Java program to print the Fibonacci sequence up to a given number `n`. This program uses a loop to calculate each number in the sequence based on the previous two numbers.\n\n```java\npublic class FibonacciSequence {\n    public static void main(String[] args) {\n        int n = 10; // Change this value to print more or fewer numbers in the sequence\n        int first = 0;\n        int second = 1;\n\n        System.out.print(first + \" \");\n        System.out.print(second + \" \");\n\n        for (int i = 0; i < n - 2; i++) {\n            int next = first + second;\n            System.out.print(next + \" \");\n            first = second;\n            second = next;\n        }\n    }\n}\n```\n\nWhen you run this program, it will print the first `n` numbers in the Fibonacci sequence. For example, if you set `n` to 10, it"
  },
  {
    "id": 305,
    "question": "Write a Java program to find the sum of all even numbers between 1 to n (inclusive).",
    "answer": "Here's a simple Java program to find the sum of all even numbers between 1 to n (inclusive):\n\n```java\npublic class EvenSum {\n    public static void main(String[] args) {\n        int n = 10; // Change this value to test different numbers\n        int sum = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n\n        System.out.println(\"The sum of even numbers between 1 to \" + n + \" is \" + sum);\n    }\n}\n```\n\nThis program uses a `for` loop to iterate from 1 to n, and an `if` statement to check if the current number is even. If it is, the number is added to the sum. Finally, the sum is printed out to the console."
  },
  {
    "id": 306,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Java program to create a calculator class with methods for addition, subtraction, multiplication, and division operations:\n\n```java\npublic class Calculator {\n\n    public double add(double num1, double num2) {\n        return num1 + num2;\n    }\n\n    public double subtract(double num1, double num2) {\n        return num1 - num2;\n    }\n\n    public double multiply(double num1, double num2) {\n        return num1 * num2;\n    }\n\n    public double divide(double num1, double num2) {\n        if (num2 == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return num1 / num2;\n    }\n\n    public static void main(String[] args) {\n        Calculator calculator = new Calculator();\n\n        double num1 = 10.0;\n        double num2"
  },
  {
    "id": 307,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple Java program that calculates the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method takes an integer `n` as an argument and returns the factorial of that number. If the base case (n equals to 0) is met, the method returns 1. Otherwise, it calls itself recursively with the argument `n - 1` and multiplies the result by the current"
  },
  {
    "id": 308,
    "question": "Write a Java program to find the sum of two integers using function. The function should take two integers as arguments and return the sum as an integer.",
    "answer": "Here is a simple Java program that satisfies the requirements of the question:\n\n```java\npublic class Sum {\n\n    // Function to find the sum of two integers\n    public static int add(int num1, int num2) {\n        // Use the + operator to add the two numbers\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    // Main method to test the add function\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = add(num1, num2);\n        System.out.println(\"The sum of \" + num1 + \" and \" + num2 + \" is \" + sum);\n    }\n}\n```\n\nIn this program, we define a static function named `add` that takes two integers as arguments and returns their sum as an integer. We also define a `main` method to test the `add`"
  },
  {
    "id": 309,
    "question": "Write a Java program to reverse the words in a given sentence but keep the words in their original order. For example, given the input \"The quick brown fox jumps over the lazy dog\", the output should be \"the the a racek carab brown quick The jumps over the the a dog lazy the\".",
    "answer": "Here's a Java solution to reverse each word in the given sentence while preserving the original word order:\n\n```java\nimport java.util.Arrays;\n\npublic class ReverseWords {\n\n    public static void main(String[] args) {\n        String sentence = \"The quick brown fox jumps over the lazy dog\";\n        String[] words = sentence.split(\"\\\\s+\"); // Split the sentence into words using regular expression\n\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            String reversedWord = \"\";\n            for (int j = word.length() - 1; j >= 0; j--) {\n                reversedWord += word.charAt(j);\n            }\n            words[i] = reversedWord;"
  },
  {
    "id": 310,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        int result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n}\n```\n\nThis program defines a recursive method named `factorial` that calculates the factorial of a given number. The base case for the recursion is when the number is 0, in which case the method returns 1. Otherwise, the method calls itself with the argument `n-1` and multiplies the result by `n`. This process continues until"
  },
  {
    "id": 311,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations using user input:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operator;\n\n        System.out.print(\"Enter the first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the operator (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        System.out.print(\"Enter the second number: \");\n        num2 = scanner.nextDouble();\n\n        switch (operator) {\n            case '+':\n                System.out.println(\"The result is: \" + (num1 + num2));\n                break;\n            case '-':"
  },
  {
    "id": 312,
    "question": "Write a Java program to find the second largest number in an array of integers. The array size will not exceed 10 elements.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers with a size not exceeding 10 elements:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // Replace this with your input array\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int num : arr) {\n            if (num > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = num;\n            } else if (num > secondLargest && num != firstLargest) {\n                secondLargest = num;\n            }\n        }\n\n        System.out.println(\"The second"
  },
  {
    "id": 313,
    "question": "Write a Java program to find the sum of two integers using function call.",
    "answer": "Here's a simple Java program that defines a function named `addTwoNumbers` to find the sum of two integers and then demonstrates its usage:\n\n```java\npublic class Main {\n\n    public static int addTwoNumbers(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = addTwoNumbers(num1, num2);\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n```\n\nThis program defines a `Main` class with two methods: `addTwoNumbers` and `main`. The `addTwoNumbers` method accepts two integer arguments, calculates their sum, and returns the result. The `main` method initializes two integer variables, calls the `addTwoNumbers` method with these variables as arguments, and then prints the sum."
  },
  {
    "id": 314,
    "question": "Write a Java program to print the first N even numbers using a for loop.",
    "answer": "Here's the Java code to print the first N even numbers using a for loop:\n\n```java\npublic class PrintFirstNEvenNumbers {\n    public static void main(String[] args) {\n        int n = 10; // Change this value to print the first N even numbers\n        System.out.print(\"The first \" + n + \" even numbers are: \");\n        for (int i = 0; i < n; i += 2) {\n            System.out.print(i + \" \");\n        }\n        System.out.println();\n    }\n}\n```\n\nThis program initializes a variable `n` with the desired number of even numbers to be printed, then uses a `for` loop to iterate from `0` to `n` with a step of `2` (since even numbers have a zero remainder when divided by 2), and prints each number in the loop."
  },
  {
    "id": 315,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and output the result of the specified operation.",
    "answer": "Here is a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-"
  },
  {
    "id": 316,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and the operation they want to perform.",
    "answer": "Here's a simple Java program to create a calculator that performs addition, subtraction, multiplication, and division operations based on user input:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        double num1, num2;\n        char operator;\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter the operator (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num"
  },
  {
    "id": 317,
    "question": "Write a Java program to find the sum of two integers using function call.",
    "answer": "Here's a simple Java program that defines a function named `addTwoNumbers` to find the sum of two integers and then calls this function to demonstrate its usage:\n\n```java\npublic class SumOfTwoNumbers {\n    // Function to find the sum of two integers\n    public static int addTwoNumbers(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = addTwoNumbers(num1, num2); // Calling the function with two integers as arguments\n        System.out.println(\"The sum of \" + num1 + \" and \" + num2 + \" is: \" + sum);\n    }\n}\n```\n\nThis Java program defines a static method `addTwoNumbers` in the `SumOfTwoNumbers` class that takes two integers as arguments and returns their sum. The `"
  },
  {
    "id": 318,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and output the result of the specified operation.",
    "answer": "Here's a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-"
  },
  {
    "id": 319,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and display the result of the operation.",
    "answer": "Here's a simple Java program to implement a calculator as per your requirement:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2"
  },
  {
    "id": 320,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test with any number\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method takes an integer as an argument and returns the factorial of that number. The base case for the recursion is when the number is 0, in which case the method returns 1. Otherwise, the method multiplies the number by the factorial of the number minus one, effectively performing the multiplication recursively."
  },
  {
    "id": 321,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here's an example Java program to find the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different values\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` function is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. The base case for the recursion is when `n` equals 0, in which case the function returns 1. Otherwise, it returns the product of `n` and the factorial"
  },
  {
    "id": 322,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test with any positive integer\n        long result = 1;\n\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number, result));\n    }\n\n    public static long factorial(int n, long result) {\n        if (n > 0) {\n            result *= n;\n            return factorial(n - 1, result);\n        } else {\n            return result;\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method is defined recursively, taking an integer `n` and a long `result` as arguments. The base case for the recursion is when `n` is less than or equal to 0, in which case the method simply returns the current value"
  },
  {
    "id": 323,
    "question": "Write a Java program to find the sum of numbers from an array of integers using a for loop.",
    "answer": "Here's a simple Java program that finds the sum of numbers from an array of integers using a for loop:\n\n```java\npublic class ArraySum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5}; // Define an array of integers\n        int sum = 0; // Initialize a variable to store the sum\n\n        // Use a for loop to calculate the sum of the array elements\n        for (int i = 0; i < numbers.length; i++) {\n            sum += numbers[i]; // Add the current element to the sum variable\n        }\n\n        // Print the sum of the array elements\n        System.out.println(\"The sum of the array elements is: \" + sum);\n    }\n}\n```\n\nThis program defines an array of integers, initializes a variable to store the sum, uses a for loop to iterate through the array elements and add each one to the sum variable, and finally prints the sum of"
  },
  {
    "id": 324,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50}; // Your array of integers\n        int largest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int i = 0; i < arr.length; i++) {\n            int num = arr[i];\n            if (num > largest) {\n                secondLargest = largest;\n                largest = num;\n            } else if (num > secondLargest && num != largest) {\n                secondLargest = num;\n            }\n        }\n\n        System.out.println(\"The second largest number is: \" + secondLargest);\n    }\n}\n```\n\nThis program initializes the largest and second largest variables"
  },
  {
    "id": 325,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and output the result of the operation.",
    "answer": "Here is a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':"
  },
  {
    "id": 326,
    "question": "Write a Java program to find the sum of all even numbers in an array of integers.",
    "answer": "Here's a simple Java program that finds the sum of all even numbers in an array of integers:\n\n```java\npublic class SumOfEvenNumbers {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        int sum = 0;\n\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                sum += number;\n            }\n        }\n\n        System.out.println(\"Sum of even numbers: \" + sum);\n    }\n}\n```\n\nThis program declares an integer array `numbers` with 10 elements, initializes a variable `sum` to 0, and uses a `for-each` loop to iterate through each element in the array. If the number is even (i.e., its remainder when divided by 2 is 0), the number is added to the sum variable. Finally,"
  },
  {
    "id": 327,
    "question": "Write a Java program to find the sum of all numbers in an array of integers except for the smallest number.",
    "answer": "Here's a simple Java program to find the sum of all numbers in an array of integers except for the smallest number:\n\n```java\npublic class SumExceptSmallest {\n    public static void main(String[] args) {\n        int[] arr = {1, 5, 2, 8, 4}; // Input array\n        int smallest = arr[0]; // Initialize smallest with the first element\n        int sum = 0;\n\n        // Find the smallest number in the array\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < smallest) {\n                smallest = arr[i];\n            }\n        }\n\n        // Calculate the sum of all numbers except the smallest number\n        for (int num : arr) {\n            if (num != smallest) {\n                sum += num;\n            }\n        }\n\n        System.out.println(\"The sum of all numbers in the array except for the smallest number is: \""
  },
  {
    "id": 328,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 25, 35, 45, 27};\n        int first = Integer.MIN_VALUE;\n        int second = Integer.MIN_VALUE;\n\n        for (int num : arr) {\n            if (num > first) {\n                second = first;\n                first = num;\n            } else if (num > second && num != first) {\n                second = num;\n            }\n        }\n\n        System.out.println(\"The second largest number is: \" + second);\n    }\n}\n```\n\nThis program uses a single pass through the array to find the second largest number. The two variables, `first` and `second`, keep track of the largest and second largest numbers, respectively. If the"
  },
  {
    "id": 329,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose an operation.",
    "answer": "Here is a simple Java program for a calculator that takes two numbers as input and allows the user to choose an operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operation;\n\n        System.out.print(\"Enter the first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n\n        double result = 0;\n        switch (operation) {\n            case '+':\n                result = num1 + num2;"
  },
  {
    "id": 330,
    "question": "Write a Java program to reverse the order of words in a given string, but keep the words separated. For example, given the input \"The quick brown fox jumps over the lazy dog\", the output should be \"dog lazy the over jumps fox brown quick The\".",
    "answer": "Here's a Java solution for the given problem using String manipulation:\n\n```java\npublic class ReverseWords {\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        String[] words = input.split(\"\\\\s+\"); // split the string by one or more whitespaces\n\n        String reversed = \"\";\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed += words[i] + \" \"; // add each word followed by a space to the reversed string\n        }\n\n        System.out.println(reversed.trim()); // remove the leading space\n    }\n}\n```\n\nThis Java program first splits the given input string into an array of words using a regular expression to match one or more whites"
  },
  {
    "id": 331,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose an operation using input from the keyboard.",
    "answer": "Here's a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations based on user input:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        double num1, num2;\n        char operator;\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.printf(\"%.2f + %."
  },
  {
    "id": 332,
    "question": "Write a Java program to find the sum of two matrices if their dimensions are equal.",
    "answer": "Here's a simple Java program that takes two matrices as input, checks if their dimensions are equal, and then finds and prints their sum:\n\n```java\nimport java.util.Scanner;\n\npublic class MatrixSum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m, n;\n        System.out.print(\"Enter the number of rows and columns: \");\n        m = scanner.nextInt();\n        n = scanner.nextInt();\n\n        int[][] matrix1 = new int[m][n];\n        int[][] matrix2 = new int[m][n];\n\n        System.out.println(\"Enter the elements of first matrix:\");\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix1[i][j] = scanner.nextInt();\n            }\n        }\n\n        System.out.println(\""
  },
  {
    "id": 333,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a Java program to find the second largest number in an array of integers. This program assumes that the array is not empty and that there are at least two distinct numbers in the array.\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // replace with your array\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            if (num > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = num;\n            } else if (num > secondLargest && num != firstLargest) {\n                secondLargest = num;\n            }\n        }\n\n        System.out.println(\"The second largest number is: \" + secondLargest);\n    }"
  },
  {
    "id": 334,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 32, 15, 45, 27, 5};\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int num : arr) {\n            if (num > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = num;\n            } else if (num > secondLargest && num != firstLargest) {\n                secondLargest = num;\n            }\n        }\n\n        System.out.println(\"The second largest number in the array is: \" + secondLargest);\n    }\n}\n```\n\nThis program initializes the first largest and second largest variables with the"
  },
  {
    "id": 335,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nThis program defines a method named `factorial` that takes an integer `n` as an argument and returns the factorial of that number. The base case for the recursion is when `n` is equal to 0, in which case the method returns 1. Otherwise, the method calls itself with the argument `n-1` and multiplies the result"
  },
  {
    "id": 336,
    "question": "Write a Java program to reverse the words in a given string without reversing the words' internal characters. For example, given the input \"The quick brown fox jumps over the lazy dog\", the output should be \"the quick brown xof kciuq neb mor eht laz dog\".",
    "answer": "Here's a possible solution for the problem:\n\n```java\nimport java.util.Arrays;\n\npublic class ReverseWords {\n\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        String[] words = input.split(\"\\\\s+\"); // Split the input string into words based on whitespace\n\n        String reversed = \"\";\n        for (String word : words) {\n            char[] chars = word.toCharArray(); // Convert each word into a character array\n            int start = 0;\n            int end = chars.length - 1;\n\n            while (start < end) { // Swap characters from both ends of the array\n                char temp = chars[start];\n                chars[start] ="
  },
  {
    "id": 337,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and output the result of the specified operation.",
    "answer": "Here's a simple Java program that implements a calculator with the specified functionality:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter an operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num"
  },
  {
    "id": 338,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform using a menu.",
    "answer": "Here is a simple Java program that implements a calculator using a menu-driven approach:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        double num1, num2;\n        char operator;\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Welcome to the Simple Calculator!\");\n        System.out.println(\"Enter the first number:\");\n        num1 = scanner.nextDouble();\n\n        System.out.println(\"Enter the second number:\");\n        num2 = scanner.nextDouble();\n\n        System.out.println(\"Choose an operation:\");\n        System.out.println(\"1. Add\");\n        System.out.println(\"2. Subtract\");\n        System.out.println(\"3. Multiply\");"
  },
  {
    "id": 339,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here is a Java program to find the second largest number in an array of integers. This program first finds the largest number in the array and then iterates through the array again to find the second largest number.\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50, 60};\n        int largest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > largest) {\n                secondLargest = largest;\n                largest = arr[i];\n            } else if (arr[i] > secondLargest && arr[i] != largest) {\n                secondLargest = arr[i];\n            }\n        }\n\n        System.out.println(\"The second largest number in the array is:"
  },
  {
    "id": 340,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different factorials\n        long result = 1;\n\n        System.out.println(\"Factorial of \" + number + \" = \" + factorial(number, result));\n    }\n\n    public static long factorial(int n, long result) {\n        if (n > 0) {\n            result *= n;\n            return factorial(n - 1, result);\n        } else {\n            return result;\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method is defined recursively. It takes two arguments: an integer `n` and a long `result`. The method checks if `n` is greater than zero. If it is, the method multiplies the current value of `result` with `n`"
  },
  {
    "id": 341,
    "question": "Write a Java program to print the following pattern using nested loops.\n\n```\n    *\n   ***\n  *****\n *******\n*********\n```",
    "answer": "Here's a Java program that prints the given pattern using nested loops:\n\n```java\npublic class PatternPrinting {\n    public static void main(String[] args) {\n        int rows = 6; // Number of rows in the pattern\n\n        for (int i = 1; i <= rows; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\nThis program initializes the number of rows to 6 and uses two nested loops to print the stars. The outer loop runs from 1 to the number of rows, and the inner loop runs from 1 to the current row number. Inside the inner loop, it prints a star character using the `System.out.print()` method. After printing all the stars for the current row, it moves to the next row by using `System."
  },
  {
    "id": 342,
    "question": "Write a Java program to find the sum of two integers using function overloading.",
    "answer": "Here's an example Java program that demonstrates how to find the sum of two integers using function overloading:\n\n```java\npublic class Sum {\n\n    // Function overload to find sum of two integers\n    public int sum(int a, int b) {\n        return a + b;\n    }\n\n    // Function overload to find sum of two integers and an integer\n    public int sum(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    public static void main(String[] args) {\n        Sum obj = new Sum();\n\n        // Sum of two integers\n        int sum1 = obj.sum(10, 20);\n        System.out.println(\"Sum of two integers: \" + sum1);\n\n        // Sum of two integers and an integer\n        int sum2 = obj.sum(10, 20, 30);\n        System.out.println(\"Sum of two integers and an integer: \" + sum"
  },
  {
    "id": 343,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program that calculates the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different cases\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));\n    }\n}\n```\n\nIn this example, the `factorial` method takes an integer `n` as an argument and calculates its factorial using recursion. If the base case (n equals to 0) is met, it returns 1. Otherwise, it multiplies the current number by the factorial of the previous number (n-1). The `main` method demonstrates how to call the `factorial"
  },
  {
    "id": 344,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Java program for a calculator that takes two numbers and an operator as input and performs the specified arithmetic operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*"
  },
  {
    "id": 345,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation.",
    "answer": "Here's a simple Java program to create a calculator that takes two numbers as input and allows the user to choose an operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operation;\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n\n        switch (operation) {\n            case '+':\n                System.out.printf(\"%.2f + %.2f = %.2f\", num"
  },
  {
    "id": 346,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "To find the second largest number in an array of integers, you can follow these steps:\n\n1. Find the largest number in the array using the `Arrays.stream()` method and the `max()` function.\n2. Exclude the largest number from the array using various methods like `List.remove()`, `ArrayList.remove()`, or a simple loop.\n3. Find the maximum remaining number using the `Arrays.stream()` method and the `max()` function again.\n\nHere's a simple Java code snippet to solve this problem:\n\n```java\nimport java.util.Arrays;\n\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] arr = {12, 45, 67, 34, 89, 54, 23};\n        int firstMax = findFirstMax(arr);\n        int secondMax = findSecondMax(arr, firstMax);\n        System.out.println(\"The second largest number is: \" + secondMax"
  },
  {
    "id": 347,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform.",
    "answer": "Here is a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations using user input:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operation;\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n\n        switch (operation) {\n            case '+':\n                System.out.printf(\"%.2f + %.2f"
  },
  {
    "id": 348,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {12, 34, 6, 23, 56, 89, 33, 11};\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = arr[i];\n            } else if (arr[i] > secondLargest && arr[i] != firstLargest) {\n                secondLargest = arr[i];\n            }\n        }\n\n        if (secondLargest == Integer.MIN_VALUE) {"
  },
  {
    "id": 349,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform using a menu.",
    "answer": "Here's a simple Java program to create a calculator using a menu-driven approach:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        double num1, num2;\n        char operation;\n\n        System.out.println(\"Simple Calculator\");\n        System.out.println(\"1. Add\");\n        System.out.println(\"2. Subtract\");\n        System.out.println(\"3. Multiply\");\n        System.out.println(\"4. Divide\");\n        System.out.println(\"5. Exit\");\n\n        while (true) {\n            System.out.print(\"Enter your choice: \");\n            int choice = input.nextInt();\n\n            switch (choice) {\n                case 1"
  },
  {
    "id": 350,
    "question": "Write a Java program to find the second largest number in an array of integers. The array size will not exceed 10.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers with a size not exceeding 10:\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] numbers = {1, 5, 2, 8, 9, 3, 6, 7, 4, 10}; // Replace with your input\n\n        int largest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int number : numbers) {\n            if (number > largest) {\n                secondLargest = largest;\n                largest = number;\n            } else if (number > secondLargest && number != largest) {\n                secondLargest = number;\n            }\n        }\n\n        if (secondLargest == Integer.MIN_VALUE) {\n            System.out.println(\"There is no second largest"
  },
  {
    "id": 351,
    "question": "Write a Java program to print the following pattern using nested loops:\n\n```\n*\n**\n***\n****\n*****\n```",
    "answer": "Here's the Java code to print the given pattern using nested loops:\n\n```java\npublic class PatternPrinting {\n    public static void main(String[] args) {\n        int rows = 6; // Number of rows in the pattern\n\n        for (int i = 1; i <= rows; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\nThis Java program uses two nested loops to print the desired pattern. The outer loop iterates through each row of the pattern, and the inner loop prints the required number of stars for that row. The `System.out.println()` statement is used to move to the next line after printing a row."
  },
  {
    "id": 352,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50};\n        int first = Integer.MIN_VALUE;\n        int second = Integer.MIN_VALUE;\n\n        for (int num : arr) {\n            if (num > first) {\n                second = first;\n                first = num;\n            } else if (num > second && num != first) {\n                second = num;\n            }\n        }\n\n        System.out.println(\"The second largest number is: \" + second);\n    }\n}\n```\n\nExplanation:\n\nWe initialize two variables `first` and `second` with the minimum possible integer value. We then iterate through the array, and for each number, we update `first` and `second` if the number is"
  },
  {
    "id": 353,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to calculate the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}\n```\n\nIn this example, the `factorial` method takes an integer as an argument and returns the factorial value of that number. The base case for the recursion is when the number is equal to zero, in which case the method returns 1. For any other number, the method calls itself with the argument `n - 1` and multiplies the result by the current number `"
  },
  {
    "id": 354,
    "question": "Write a Java program to print the first 10 numbers of the Fibonacci sequence.",
    "answer": "Here's a Java program to print the first 10 numbers of the Fibonacci sequence:\n\n```java\npublic class FibonacciSequence {\n    public static void main(String[] args) {\n        int num1 = 0, num2 = 1, nextNumber;\n\n        System.out.print(num1 + \" \" + num2);\n\n        for (int i = 0; i < 8; ++i) {\n            nextNumber = num1 + num2;\n            System.out.print(\" \" + nextNumber);\n            num1 = num2;\n            num2 = nextNumber;\n        }\n    }\n}\n```\n\nThis program initializes the first two numbers of the Fibonacci sequence and then uses a `for` loop to calculate and print the next 8 numbers in the sequence. The variables `num1` and `num2` are updated after each iteration to calculate the next number in the sequence."
  },
  {
    "id": 355,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here's an example Java program to calculate the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. The base case for the recursion is when `n` equals 0, in which case the method returns 1. Otherwise, it multiplies `n` by the factorial of `n"
  },
  {
    "id": 356,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers. This program assumes that the array will always have at least two distinct numbers.\n\n```java\npublic class SecondLargest {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // Input array of integers\n\n        int firstLargest = Integer.MIN_VALUE; // Initialize first largest to the minimum integer value\n        int secondLargest = Integer.MIN_VALUE; // Initialize second largest to the minimum integer value\n\n        // Iterate through the array to find the first and second largest numbers\n        for (int num : numbers) {\n            if (num > firstLargest) {\n                secondLargest = firstLargest; // Save the current first largest as the second largest\n                firstLargest = num; // Update the first largest number\n            } else if (num > secondLargest && num != firstLarg"
  },
  {
    "id": 357,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nThis Java program defines a `Factorial` class with a `main` method that takes no arguments and calculates the factorial of a given number using the `factorial` method with recursion. The `factorial` method takes an integer as an argument and returns the factorial as a long. If the number is 0, the method returns 1 as the factorial"
  },
  {
    "id": 358,
    "question": "Write a Java program to find the sum of all even numbers between 1 to 100.",
    "answer": "Here's a simple Java program to find the sum of all even numbers between 1 to 100:\n\n```java\npublic class EvenSum {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int i = 2; i <= 100; i += 2) {\n            sum += i;\n        }\n        System.out.println(\"The sum of even numbers between 1 and 100 is: \" + sum);\n    }\n}\n```\n\nThis program initializes a variable `sum` to store the result and uses a `for` loop to iterate through all even numbers between 1 and 100, adding each number to the sum. The loop starts at 2 (the first even number after 1) and increments by 2 in each iteration to only consider even numbers. The `System.out.println()` statement is used to print the final result."
  },
  {
    "id": 359,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform using a menu.",
    "answer": "Here's a simple Java program that implements a calculator with the specified functionality:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        int choice;\n\n        System.out.println(\"Simple Calculator Menu:\");\n        System.out.println(\"1. Add\");\n        System.out.println(\"2. Subtract\");\n        System.out.println(\"3. Multiply\");\n        System.out.println(\"4. Divide\");\n        System.out.println(\"5. Exit\");\n\n        do {\n            System.out.print(\"\\nEnter first number: \");\n            num1 = scanner.nextDouble();\n            System.out.print(\"Enter second number: \");"
  },
  {
    "id": 360,
    "question": "Write a Java program to find the second largest number in an array of integers?",
    "answer": "Here's an example Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50}; // input array\n        int largest = Integer.MIN_VALUE; // initialize largest and secondLargest with minimum value\n        int secondLargest = Integer.MIN_VALUE;\n\n        // iterate through array and find largest and second largest numbers\n        for (int num : arr) {\n            if (num > largest) {\n                secondLargest = largest;\n                largest = num;\n            } else if (num > secondLargest && num != largest) {\n                secondLargest = num;\n            }\n        }\n\n        // print out the second largest number\n        System.out.println(\"The second largest number is: \" + secondLargest);\n    }\n}\n``"
  },
  {
    "id": 361,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's an example Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this program, the `factorial` method is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. If the base case (n equals to 0) is met, it returns 1. Otherwise, it multiplies the number `n` with the result of calling the `factorial` method with the argument"
  },
  {
    "id": 362,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here is a simple Java program to implement a calculator using four basic arithmetic operations: addition, subtraction, multiplication, and division.\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        double num1, num2;\n        char operator;\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        double result = 0;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result ="
  },
  {
    "id": 363,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform.",
    "answer": "Here's a simple Java program to create a calculator using Scanner for user input and switch statement for performing the desired operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operator;\n\n        System.out.print(\"Enter the first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.printf(\"%.2f + %.2f"
  },
  {
    "id": 364,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers. This program assumes that the array contains at least two distinct numbers.\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // Your array of integers here\n\n        // Initialize first and second largest numbers with first and second elements of the array\n        int firstLargest = numbers[0];\n        int secondLargest = numbers[1];\n\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = numbers[i];\n            } else if (numbers[i] > secondLargest && numbers[i] != firstLargest) {\n                secondLargest = numbers[i];"
  },
  {
    "id": 365,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 32, 8, 60, 2, 11, 45}; // Input array\n        int largest = Integer.MIN_VALUE; // Initialize largest to minimum value\n        int secondLargest = Integer.MIN_VALUE; // Initialize second largest to minimum value\n\n        // Loop through the array to find the largest and second largest numbers\n        for (int num : arr) {\n            if (num > largest) {\n                secondLargest = largest; // Save current largest to second largest\n                largest = num; // Update largest\n            } else if (num > secondLargest && num != largest) {\n                secondLargest = num; // Update second largest\n            }\n        }\n\n        // Print the second largest number\n        System.out"
  },
  {
    "id": 366,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and display the result of the specified operation.",
    "answer": "Here's an example Java program for a simple calculator:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;"
  },
  {
    "id": 367,
    "question": "Write a Java program to find the sum of all even numbers in an array of integers.",
    "answer": "Here's a simple Java program to find the sum of all even numbers in an array of integers:\n\n```java\npublic class EvenSumArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        int sum = 0;\n\n        for (int i = 0; i < numbers.length; i++) {\n            if (numbers[i] % 2 == 0) {\n                sum += numbers[i];\n            }\n        }\n\n        System.out.println(\"The sum of all even numbers in the array is: \" + sum);\n    }\n}\n```\n\nThis program initializes an integer array with some numbers and initializes a variable `sum` to 0. It then uses a `for` loop to iterate through each number in the array. If the number is even (i.e., if its remainder when divided by 2 is"
  },
  {
    "id": 368,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose which operation they want to perform.",
    "answer": "Here's an example Java program for a simple calculator that takes two numbers as input and allows the user to choose an operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operation;\n\n        System.out.print(\"Enter the first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n\n        switch (operation) {\n            case '+':\n                System.out.printf(\"%.2f + %.2f"
  },
  {
    "id": 369,
    "question": "Write a Java program to find the sum of two integers using function calls. The integers should be passed as arguments to the function and the sum should be returned as the result.",
    "answer": "Here is a simple Java program that implements the above requirement:\n\n```java\npublic class Sum {\n    // Function to find the sum of two integers\n    public static int add(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    // Main method to call the add function and print the sum\n    public static void main(String[] args) {\n        int num1 = 10;\n        int num2 = 5;\n        int sum = add(num1, num2);\n        System.out.println(\"The sum of \" + num1 + \" and \" + num2 + \" is \" + sum);\n    }\n}\n```\n\nIn this program, we define a function `add` that takes two integer arguments and returns their sum. The `main` method initializes two integer variables `num1` and `num2`, calls the `add` function with these"
  },
  {
    "id": 370,
    "question": "Write a Java program to reverse the words in a given sentence without reversing the words individually. For example, the input \"Hello World! Let's reverse these words\" should output \"words these Let's reverse Hello World!\".",
    "answer": "Here's a Java program that solves the problem by splitting the input sentence into words, reversing the order of the words, and then joining them back together:\n\n```java\nimport java.util.Arrays;\n\npublic class ReverseWords {\n\n    public static void main(String[] args) {\n        String input = \"Hello World! Let's reverse these words\";\n        String[] words = input.split(\"\\\\s+\"); // split the input into words using regular expression\n\n        // reverse the order of the words\n        String[] reversedWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            reversedWords[words.length - 1 - i] = words[i];\n        }\n\n        // join the reversed words back together\n        String output = Arrays.stream(reversedWords)."
  },
  {
    "id": 371,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's an example Java program for a simple calculator that takes two numbers as input and performs addition, subtraction, multiplication, and division operations using user-defined methods:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operator;\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = addition(num1, num2);\n                break;\n            case '-"
  },
  {
    "id": 372,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here is a simple Java program that calculates the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` function is defined recursively. It takes an integer as an argument and returns the factorial of that number. The base case for the recursion is when the number is 0, in which case the function returns 1. Otherwise, it returns the product of the number and the factorial of the number minus"
  },
  {
    "id": 373,
    "question": "Write a Java program to find the sum of numbers in an array of integers using a for loop.",
    "answer": "Here's a simple Java program that finds the sum of numbers in an array of integers using a for loop:\n\n```java\npublic class SumArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5}; // Initialize an array of integers\n        int sum = 0; // Initialize sum variable to 0\n\n        // Use a for loop to iterate through the array and add each number to the sum\n        for (int i = 0; i < numbers.length; i++) {\n            sum += numbers[i];\n        }\n\n        // Print the sum of the numbers in the array\n        System.out.println(\"The sum of the numbers in the array is: \" + sum);\n    }\n}\n```\n\nThis program initializes an array of integers, initializes a sum variable to 0, and then uses a for loop to iterate through the array, adding each number to the sum variable. Finally, it prints out"
  },
  {
    "id": 374,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this program, the `factorial` method is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. The base case for the recursion is when `n` equals 0, in which case the method returns 1. For all other values of `n`, the method returns the product of `"
  },
  {
    "id": 375,
    "question": "Write a Java program to find the sum of two integers using function call.",
    "answer": "Here's an example of a Java program that finds the sum of two integers using a function call:\n\n```java\npublic class Sum {\n    // Function to find the sum of two integers\n    public static int add(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = add(num1, num2);\n        System.out.println(\"Sum of \" + num1 + \" and \" + num2 + \" is \" + sum);\n    }\n}\n```\n\nIn this example, we define a static function named `add` that takes two integers as arguments and returns their sum. The `main` function initializes two integer variables `num1` and `num2`, calls the `add` function to find their sum, and then prints the result."
  },
  {
    "id": 376,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // Input array\n        int firstLargest = Integer.MIN_VALUE; // Initialize first largest number with minimum integer value\n        int secondLargest = Integer.MIN_VALUE; // Initialize second largest number with minimum integer value\n\n        // Find the first largest number\n        for (int number : numbers) {\n            if (number > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = number;\n            } else if (number > secondLargest && number != firstLargest) {\n                secondLargest = number;\n            }\n        }\n\n        // Print the second largest number\n        System.out.println(\"The second largest number is"
  },
  {
    "id": 377,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The user should be able to enter two numbers and choose the operation they want to perform.",
    "answer": "Here's a simple Java program that implements a calculator using Scanner for user input and the switch statement for selecting the operation:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        double num1, num2;\n        char operator;\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        num1 = input.nextDouble();\n\n        System.out.print(\"Enter the second number: \");\n        num2 = input.nextDouble();\n\n        System.out.print(\"Choose an operation (+, -, *, /): \");\n        operator = input.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.printf(\"%.2f + %.2f = %.2f%"
  },
  {
    "id": 378,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a Java program to find the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] arr = {10, 30, 20, 40, 50}; // Your array of integers\n        int largest = Integer.MIN_VALUE; // Initialize largest number with minimum integer value\n        int secondLargest = Integer.MIN_VALUE; // Initialize second largest number with minimum integer value\n\n        for (int num : arr) {\n            if (num > largest) {\n                secondLargest = largest; // Save current largest number\n                largest = num; // Update largest number\n            } else if (num != largest && num > secondLargest) {\n                secondLargest = num; // Update second largest number\n            }\n        }\n\n        System.out.println(\"The second largest number in the array is: \" + secondLargest);\n    }\n}"
  },
  {
    "id": 379,
    "question": "Write a Java program to find the sum of two integers using function call and passing arguments by value.",
    "answer": "Here's a simple Java program that demonstrates how to find the sum of two integers using a function call and passing arguments by value:\n\n```java\npublic class SumOfTwoNumbers {\n    // Function to find the sum of two integers\n    public static int add(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 10;\n        int sum = add(num1, num2); // Calling the add function with arguments\n        System.out.println(\"The sum of \" + num1 + \" and \" + num2 + \" is \" + sum);\n    }\n}\n```\n\nIn this example, we have a `SumOfTwoNumbers` class with a static `add` function that takes two integer arguments and returns their sum. We then call this function from the `main` method, passing the values of `"
  },
  {
    "id": 380,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's an example Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nThis program defines a `factorial` method that takes an integer as an argument and returns the factorial of that number. The method uses recursion to calculate the factorial by calling itself with a decremented value until it reaches the base case (when the number is 0). At that point, it returns 1, which is the factorial of 0. The main"
  },
  {
    "id": 381,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input and return the result of the operation.",
    "answer": "Here is a simple Java program that implements a calculator with addition, subtraction, multiplication, and division operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double num1, num2;\n        char operator;\n\n        System.out.print(\"Enter first number: \");\n        num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        operator = scanner.next().charAt(0);\n\n        double result = 0;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;"
  },
  {
    "id": 382,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations. The calculator should take two numbers and an operator as input from the user and output the result of the specified operation.",
    "answer": "Here's a simple Java program to implement a calculator that performs addition, subtraction, multiplication, and division operations:\n\n```java\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':"
  },
  {
    "id": 383,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here is a simple Java program to find the second largest number in an array of integers. This program assumes that the array is not empty and contains at least two distinct numbers.\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] numbers = {10, 3, 5, 8, 12, 7}; // Input array of integers\n\n        // Find the first largest number\n        int firstLargest = Integer.MIN_VALUE;\n        for (int number : numbers) {\n            if (number > firstLargest) {\n                firstLargest = number;\n            }\n        }\n\n        // Find the second largest number\n        int secondLargest = Integer.MIN_VALUE;\n        for (int number : numbers) {\n            if (number != firstLargest && number > secondLargest) {\n                secondLargest = number;\n            }\n        }\n\n        System.out.println(\"The second largest"
  },
  {
    "id": 384,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's an example Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = 1;\n\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number, result));\n    }\n\n    public static long factorial(int n, long fact) {\n        if (n == 0) {\n            return fact;\n        }\n        return factorial(n - 1, fact * n);\n    }\n}\n```\n\nIn this example, the `factorial` method is a recursive function that calculates the factorial of the given number. It takes two arguments: the current number `n` and the accumulator `fact`. The base case for the recursion is when `n` equals 0, at which point the function returns the accumulator value. Otherwise, the"
  },
  {
    "id": 385,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a Java program that finds the second largest number in an array of integers:\n\n```java\npublic class SecondLargestNumber {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // Input array of integers\n        int firstLargest = Integer.MIN_VALUE; // Initialize first largest to minimum integer value\n        int secondLargest = Integer.MIN_VALUE; // Initialize second largest to minimum integer value\n\n        for (int number : numbers) { // Iterate through the array\n            if (number > firstLargest) { // If current number is greater than first largest\n                secondLargest = firstLargest; // Store first largest in second largest\n                firstLargest = number; // Update first largest\n            } else if (number > secondLargest && number != firstLargest) { // If current number is greater than second largest but not first largest\n                secondLargest ="
  },
  {
    "id": 386,
    "question": "Write a Java program to find the sum of two matrices if they are of the same size.",
    "answer": "To find the sum of two matrices in Java, follow the steps below:\n\n1. Define the dimensions of the matrices.\n2. Create two-dimensional arrays to represent the matrices.\n3. Read the elements of the matrices from the user.\n4. Check if the matrices have the same dimensions.\n5. If the matrices have the same dimensions, find the sum element-wise and display the result.\n\nHere's a sample Java code to perform this task:\n\n```java\nimport java.util.Scanner;\n\npublic class MatrixSum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the number of rows and columns: \");\n        int rows = scanner.nextInt();\n        int cols = scanner.nextInt();\n\n        int[][] matrix1 = new int[rows][cols];\n        int[][] matrix2 = new int[rows][cols];\n\n        System.out.println(\"Enter elements of first"
  },
  {
    "id": 387,
    "question": "Write a Java program to implement a simple calculator that performs addition, subtraction, multiplication, and division operations.",
    "answer": "Here's a simple Java program to create a calculator class with methods for addition, subtraction, multiplication, and division operations:\n\n```java\npublic class Calculator {\n\n    // Method for addition operation\n    public double add(double num1, double num2) {\n        return num1 + num2;\n    }\n\n    // Method for subtraction operation\n    public double subtract(double num1, double num2) {\n        return num1 - num2;\n    }\n\n    // Method for multiplication operation\n    public double multiply(double num1, double num2) {\n        return num1 * num2;\n    }\n\n    // Method for division operation\n    public double divide(double num1, double num2) {\n        if (num2 == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed.\");\n        }\n        return num1 / num2;\n    }\n\n    // Main method for testing the calcul"
  },
  {
    "id": 388,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here is a simple Java program to find the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this example, the `factorial` method is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. The base case for the recursion is when `n` equals 0, in which case the method returns 1. Otherwise, it multiplies the current number `n` with the factorial"
  },
  {
    "id": 389,
    "question": "Write a Java program to find the sum of numbers from 1 to n, where n is a user input.",
    "answer": "Here's a simple Java program that prompts the user for an integer 'n' and calculates the sum of numbers from 1 to n.\n\n```java\nimport java.util.Scanner;\n\npublic class SumOfNumbers {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int sum = 0;\n\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n\n        System.out.println(\"The sum of numbers from 1 to \" + n + \" is: \" + sum);\n        scanner.close();\n    }\n}\n```\n\nThis program uses the `Scanner` class to read user input and the `for` loop to calculate the sum of numbers. The sum is then printed out to the console."
  },
  {
    "id": 390,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}\n```\n\nThis program defines a `factorial` method that takes an integer `n` as an argument and returns its factorial. The base case for the recursion is when `n` equals to 0, in which case the method returns 1. Otherwise, it calls itself with the argument `n - 1` and multiplies the result by `n`."
  },
  {
    "id": 391,
    "question": "Write a Java program to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple Java program that finds the factorial of a given number using a recursive function:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nThis program defines a `factorial` function that takes an integer as an argument and returns the factorial of that number. The function uses recursion to calculate the factorial by calling itself with the argument decremented by one until it reaches the base case where the number is zero, at which point it returns 1. The `main` function calls the"
  },
  {
    "id": 392,
    "question": "Write a Java program to reverse the words in a given string, not the individual characters. For example, given the input \"Hello World\", the output should be \"World Hello\".",
    "answer": "To reverse the words in a given string, you can split the string into words using the `String.split()` method, reverse each word using a loop, and then join the reversed words back together using the `String.join()` method. Here's the code:\n\n```java\npublic class ReverseWords {\n    public static void main(String[] args) {\n        String input = \"Hello World\";\n        String[] words = input.split(\" \");\n\n        String reversed = \"\";\n        for (int i = words.length - 1; i >= 0; i--) {\n            if (i != words.length - 1) {\n                reversed += words[i] + \" \";\n            } else {\n                reversed += words[i];\n            }\n        }\n\n        System.out.println(reversed);\n    }\n}\n```\n\nThis program first splits the input string into an array of"
  },
  {
    "id": 393,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different values\n        long result = 1;\n\n        System.out.println(\"Factorial of \" + number + \" = \" + factorial(number, result));\n    }\n\n    public static long factorial(int n, long result) {\n        if (n == 0) {\n            return result;\n        } else {\n            result *= n;\n            return factorial(n - 1, result);\n        }\n    }\n}\n```\n\nThis program defines a `factorial` method that takes an integer `n` and a long `result` as arguments. The method uses recursion to calculate the factorial of the given number `n`. The base case for the recursion is when `n` equals to 0, at which point the method returns the"
  },
  {
    "id": 394,
    "question": "Write a Java program to print the following pattern using a for loop.\n\n```\n1\n22\n333\n4444\n55555\n```",
    "answer": "Here is a Java program to print the given pattern using a for loop:\n\n```java\npublic class PatternPrinting {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(i + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\nExplanation:\n\nThe outer for loop runs from 1 to 5, and for each iteration, it initializes the inner for loop to print the number of spaces equal to the current iteration number `i`. The inner for loop runs from 1 to `i`, and for each iteration, it prints the current iteration number `i`. After printing all the numbers in a line, the program moves to the next line by printing a newline character using `System.out.println"
  },
  {
    "id": 395,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's an example Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this program, the `factorial` method is defined recursively. It takes an integer `n` as an argument and returns the factorial of that number. If the base case is reached (i.e., when `n` is 0), the method returns 1. Otherwise, it multiplies the current number `n` with the factorial of"
  },
  {
    "id": 396,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here is a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class FactorialRecursion {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this value to test different numbers\n        long result = 1;\n\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number, result));\n    }\n\n    public static long factorial(int n, long result) {\n        if (n == 0) {\n            return result;\n        } else {\n            result *= n;\n            return factorial(n - 1, result);\n        }\n    }\n}\n```\n\nThis program defines a `factorial` method that takes an integer `n` and a long `result` as arguments. The base case for the recursion is when `n` equals 0, at which point the method returns the current value of `result`. Otherwise, the method multiplies the current value"
  },
  {
    "id": 397,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different numbers\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nIn this program, the `factorial` method is defined recursively. It calculates the factorial of a given number by multiplying the number with the factorial of the number minus one until it reaches the base case where the number is zero, at which point it returns 1. The `main` method calls the `factorial` method with a given number and prints"
  },
  {
    "id": 398,
    "question": "Write a Java program to find the factorial of a given number using recursion.",
    "answer": "Here's a simple Java program to find the factorial of a given number using recursion:\n\n```java\npublic class Factorial {\n\n    public static void main(String[] args) {\n        int number = 5; // You can change this number to test different cases\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\nThis program defines a `factorial` method that takes an integer as an argument and returns the factorial of that number. The method uses recursion to calculate the factorial by repeatedly calling itself with decreasing values of the input until it reaches the base case (when the input is 0), at which point it returns 1. The main method calls the `factorial`"
  },
  {
    "id": 399,
    "question": "Write a Java program to find the sum of two integers using method overloading.",
    "answer": "Here's an example Java program that finds the sum of two integers using method overloading:\n\n```java\npublic class Sum {\n\n    // Method to find sum of two integers\n    public int sum(int a, int b) {\n        return a + b;\n    }\n\n    // Method to find sum of two integers with one integer and another as double\n    public double sum(int a, double b) {\n        return a + b;\n    }\n\n    // Method to find sum of two integers with both as double\n    public double sum(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        Sum obj = new Sum();\n        int sumInt = obj.sum(10, 20);\n        System.out.println(\"Sum of 2 integers: \" + sumInt);\n\n        double sumDouble1 = obj.sum(10.0, 20.0);\n        System.out.println(\""
  },
  {
    "id": 400,
    "question": "Write a Java program to find the second largest number in an array of integers.",
    "answer": "Here's a simple Java program to find the second largest number in an array of integers. This program assumes that the array is not empty and contains at least two distinct numbers.\n\n```java\npublic class SecondLargestNumber {\n\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40, 50}; // Input array of integers\n\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n\n        for (int number : numbers) {\n            if (number > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = number;\n            } else if (number > secondLargest && number != firstLargest) {\n                secondLargest = number;\n            }\n        }\n\n        System.out.println(\"The second largest number in the array is: \" + secondLargest);"
  },
  {
    "id": 401,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script that checks if a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n```php\n<?php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n$number = 11; // You can change this value to test different numbers\n\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n?>\n```\n\nThis script defines a function `isPrime` that takes a number as an argument and checks if it is prime or not by testing divisibility starting from 2 up to the square root of the number. If"
  },
  {
    "id": 402,
    "question": "Write a PHP script to generate an array of numbers from 1 to n, where n is a given number.",
    "answer": "Here's a simple PHP script to generate and print an array of numbers up to a given number (n):\n\n```php\n<?php\n$n = 5; // Set the value of n here\n$numbers = range(1, $n); // Generate an array with numbers from 1 to n\nprint_r($numbers); // Print the array\n?>\n```\n\nIn the example above, the script sets the value of `n` to 5 and generates an array of numbers from 1 to 5 using the `range()` function. The `print_r()` function is then used to display the array contents. You can change the value of `n` to generate an array with any desired number of elements."
  },
  {
    "id": 403,
    "question": "Write a PHP script that accepts two numbers as arguments and returns their sum.",
    "answer": "Here's a simple PHP script that accepts two numbers as command-line arguments and returns their sum:\n\n```php\n<?php\n\nif ($argc < 3) {\n    echo \"Usage: php sum.php number1 number2\\n\";\n    exit(1);\n}\n\n$num1 = $argv[1];\n$num2 = $argv[2];\n\nif (!is_numeric($num1) || !is_numeric($num2)) {\n    echo \"Both arguments must be numbers.\\n\";\n    exit(1);\n}\n\n$sum = $num1 + $num2;\necho \"The sum of {$num1} and {$num2} is {$sum}.\\n\";\n\n?>\n```\n\nTo run this script, save it to a file called `sum.php` and execute it from the command line with two numbers as arguments, like so:\n\n```\nphp sum.php 3 5\n```\n\nThis script checks for the correct number of arguments, validates that they are both"
  },
  {
    "id": 404,
    "question": "Write a PHP script that takes two numbers as input from the user and returns their sum.",
    "answer": "Here's a simple PHP script that fulfills the requirements:\n\n```php\n<?php\n// Get the first number from the user input\n$num1 = readline(\"Enter the first number: \");\n\n// Get the second number from the user input\n$num2 = readline(\"Enter the second number: \");\n\n// Convert both inputs to integers for arithmetic operations\n$num1 = intval($num1);\n$num2 = intval($num2);\n\n// Calculate the sum of the two numbers\n$sum = $num1 + $num2;\n\n// Display the result\necho \"The sum of {$num1} and {$num2} is: {$sum}\";\n?>\n```\n\nThis script uses the `readline()` function to get user input as strings, then converts them to integers using the `intval()` function before performing the addition operation. Finally, it displays the result using the `echo` statement."
  },
  {
    "id": 405,
    "question": "Write a PHP script to find the sum of all numbers in an array that are greater than a given number.",
    "answer": "Here's an example of a PHP script that fulfills the requirements of the question:\n\n```php\n<?php\n// Define the array and the given number\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$givenNumber = 5;\n\n// Initialize a variable to store the sum\n$sum = 0;\n\n// Loop through the array and add numbers greater than the given number to the sum\nforeach ($numbers as $number) {\n    if ($number > $givenNumber) {\n        $sum += $number;\n    }\n}\n\n// Print the sum\necho \"The sum of all numbers greater than $givenNumber is: $sum\";\n?>\n```\n\nThis script uses a `foreach` loop to iterate through each number in the array and an `if` statement to check if the number is greater than the given number. If it is, the number is added to the sum. Finally,"
  },
  {
    "id": 406,
    "question": "Write a PHP script to reverse the words in a given string but keep the words separate. For example, given the string \"The quick brown fox jumps over the lazy dog\", the output should be \"ox dog the lazy over jumps the brown quick The\".",
    "answer": "Here's a simple PHP script that implements the reverse words functionality:\n\n```php\n<?php\nfunction reverseWords($str) {\n  // Split the string into words using the explode function\n  $words = explode(' ', $str);\n\n  // Initialize an empty array to store reversed words\n  $reversedWords = [];\n\n  // Loop through each word, reverse it and add it to the array\n  foreach ($words as $key => $word) {\n    $reversedWords[$key] = strrev($word);\n  }\n\n  // Join the reversed words with a single space and return the result\n  return implode(' ', $reversedWords);\n}\n\n// Test the function with an example string\n$str = \"The quick brown fox jumps over the lazy dog\";\necho reverseWords($str);"
  },
  {
    "id": 407,
    "question": "Write a PHP script to generate an array of numbers from 1 to 25, then find the sum of all even numbers in the array and print the result.",
    "answer": "Here's a simple PHP script that does what you're asking for:\n\n```php\n<?php\n// Create an array of numbers from 1 to 25\n$numbers = range(1, 25);\n\n// Initialize a variable to store the sum of even numbers\n$sum = 0;\n\n// Loop through the array and add even numbers to the sum\nforeach ($numbers as $number) {\n    if ($number % 2 == 0) {\n        $sum += $number;\n    }\n}\n\n// Print the sum of even numbers in the array\necho \"The sum of even numbers from 1 to 25 is: \" . $sum;\n?>\n```\n\nThis script uses the `range()` function to create an array of numbers from 1 to 25, then uses a `foreach` loop to iterate through the array and add the even numbers to a variable called `$sum`. Finally, it prints out the"
  },
  {
    "id": 408,
    "question": "Write a PHP script to find the sum of two numbers and display the result.",
    "answer": "Here's a simple PHP script to find the sum of two numbers and display the result:\n\n```php\n<?php\n// Define the two numbers\n$num1 = 5;\n$num2 = 10;\n\n// Find the sum of the two numbers\n$sum = $num1 + $num2;\n\n// Display the result\necho \"The sum of \" . $num1 . \" and \" . $num2 . \" is: \" . $sum;\n?>\n```\n\nIn this example, we define two variables `$num1` and `$num2` and assign them the values 5 and 10, respectively. We then use the `+` operator to find their sum and store it in the variable `$sum`. Finally, we use the `echo` statement to display the result, which is the sum of the two numbers."
  },
  {
    "id": 409,
    "question": "Write a PHP script to generate an array of numbers from 1 to 10 and then display the sum of all the numbers in the array.",
    "answer": "Here is a simple PHP script that generates an array of numbers from 1 to 10 and then calculates and displays the sum of all the numbers in the array:\n\n```php\n<?php\n// Create an array with numbers from 1 to 10\n$numbers = range(1, 10);\n\n// Calculate the sum of all the numbers in the array\n$sum = array_sum($numbers);\n\n// Display the sum\necho \"The sum of numbers from 1 to 10 is: \" . $sum;\n?>\n```\n\nThis script uses the `range()` function to generate an array of numbers from 1 to 10, and the `array_sum()` function to calculate the sum of all the numbers in the array. Finally, it uses the `echo` statement to display the result."
  },
  {
    "id": 410,
    "question": "Write a PHP script to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple PHP script that calculates the factorial of a given number using a recursive function:\n\n```php\n<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n// Test the function\n$number = 5; // You can change this value to test different numbers\n$factorial = factorial($number);\necho \"The factorial of $number is: \" . $factorial;\n?>\n```\n\nIn this script, we define a recursive function `factorial()` that takes an integer `$n` as its argument. The base case for the recursion is when `$n` equals 0, in which case we return 1. Otherwise, we call the function recursively with the argument `$n - 1` and multiply the result by `$n`. The function eventually reaches the base case, at which point the multiplication chain is unw"
  },
  {
    "id": 411,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script to check if a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n```php\n<?php\n// Function to check if a number is prime\nfunction isPrime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $num; $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// User input\n$num = readline(\"Enter a number: \");\n\n// Check if the number is prime or not\nif (isPrime($num)) {\n    echo \"$num is a prime number.\";\n} else {\n    echo \"$num is not a prime number.\";\n}\n?>\n```\n\nThis script uses a function `isPrime()` to check if a given number is prime or not. The function checks if"
  },
  {
    "id": 412,
    "question": "Write a PHP script that accepts two numbers as input from the user and returns their sum.",
    "answer": "Here's a simple PHP script that accepts two numbers as input using the `fgets()` function from the standard input, `STDIN`, and returns their sum using the `+` operator:\n\n```php\n<?php\n// Initialize variables for user input\n$num1 = '';\n$num2 = '';\n\n// Get user input for the first number\necho \"Enter the first number: \";\n$num1 = trim(fgets(STDIN));\n\n// Get user input for the second number\necho \"Enter the second number: \";\n$num2 = trim(fgets(STDIN));\n\n// Convert input strings to integers\n$num1 = intval($num1);\n$num2 = intval($num2);\n\n// Calculate the sum and display it to the user\n$sum = $num1 + $num2;\necho \"The sum of {$num1} and {$num2} is {$sum}.\";\n?>\n```\n\nThis script uses the `fgets()` function to read lines from `ST"
  },
  {
    "id": 413,
    "question": "Write a PHP script that accepts a number as an argument and prints whether it's even or odd.",
    "answer": "Here's a simple PHP script that accepts a number as an argument and prints whether it's even or odd:\n\n```php\n<?php\nfunction isEvenOrOdd($number) {\n    if ($number % 2 == 0) {\n        echo \"$number is even.\";\n    } else {\n        echo \"$number is odd.\";\n    }\n}\n\n// Accept number as an argument\nif ($argc > 1) {\n    $number = $argv[1];\n    isEvenOrOdd($number);\n} else {\n    echo \"Please provide a number as an argument.\";\n}\n?>\n```\n\nTo use this script, save it in a file with a `.php` extension (e.g., `even_or_odd.php`), and then run it from the command line with the number as an argument:\n\n```bash\nphp even_or_odd.php 5\n```\n\nOutput: `5 is odd.`\n\nOr you can call the function from within"
  },
  {
    "id": 414,
    "question": "Write a PHP script to calculate the factorial of a given number using a recursive function.",
    "answer": "Here's a simple PHP script to calculate the factorial of a given number using a recursive function:\n\n```php\n<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n$number = 5; // You can change this value to test different numbers\n$result = factorial($number);\necho \"The factorial of {$number} is: {$result}\";\n?>\n```\n\nThis script defines a recursive function called `factorial` that takes an integer as an argument and calculates its factorial by multiplying the number with the factorial of the number minus one. The base case for the recursion is when the number is equal to zero, in which case the function returns 1."
  },
  {
    "id": 415,
    "question": "Write a PHP script that accepts a user input for a number and checks if it's an even number or an odd number. Display the result accordingly.",
    "answer": "Here's a simple PHP script that meets the requirements:\n\n```php\n<?php\n// Get user input\n$number = readline(\"Enter a number: \");\n\n// Check if the number is even or odd\nif ($number % 2 == 0) {\n    echo \"$number is an even number.\";\n} else {\n    echo \"$number is an odd number.\";\n}\n?>\n```\n\nIn this script, we use the `readline()` function to get user input. The `%` operator is used to find the remainder of the division of the number by 2. If the remainder is 0, the number is even; otherwise, it's odd."
  },
  {
    "id": 416,
    "question": "Write a PHP script to generate an array of numbers from 1 to 10 and then use a loop to print out each number multiplied by 2.",
    "answer": "Here's a simple PHP script that generates an array of numbers from 1 to 10 and then uses a loop to print out each number multiplied by 2:\n\n```php\n<?php\n// Generate an array of numbers from 1 to 10\n$numbers = range(1, 10);\n\n// Use a for loop to print out each number multiplied by 2\necho \"Numbers multiplied by 2:\\n\";\nfor ($i = 0; $i < count($numbers); $i++) {\n    $result = $numbers[$i] * 2;\n    echo \"$numbers[$i] * 2 = $result\\n\";\n}\n?>\n```\n\nWhen you run this script, it will output:\n\n```\nNumbers multiplied by 2:\n1 * 2 = 2\n2 * 2 = 4\n3 * 2 = 6\n4 * 2 = 8"
  },
  {
    "id": 417,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here's a simple PHP script to check if a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n```php\n<?php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test the function\n$number = 11;\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n?>\n```\n\nThis script defines a function `isPrime` that takes an integer as an argument and returns a boolean value indicating whether the number is prime or not. The function uses a simple loop to check divisibility starting from 2 and up to the square"
  },
  {
    "id": 418,
    "question": "Write a PHP script to find the factorial of a given number using a recursive function.",
    "answer": "Here's an example of a PHP script to find the factorial of a given number using a recursive function:\n\n```php\n<?php\n// Function to find the factorial of a given number using recursion\nfunction factorial($n) {\n  if ($n == 0) {\n    return 1;\n  } else {\n    return $n * factorial($n - 1);\n  }\n}\n\n// Get user input\n$number = readline(\"Enter a number to find its factorial: \");\n\n// Call the function and display the result\necho \"Factorial of {$number} = \" . factorial($number);\n?>\n```\n\nThis script defines a recursive function `factorial()` that takes an integer as an argument and returns its factorial. The base case for the recursion is when the number is 0, in which case the function returns 1. Otherwise, it multiplies the number by the factorial of the number minus one, which is the recursive call. The script then prompts the user"
  },
  {
    "id": 419,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script to check if a given number is prime or not:\n\n```php\n<?php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n$num = 11; // You can change this value to test other numbers\nif (isPrime($num)) {\n    echo \"$num is a prime number.\";\n} else {\n    echo \"$num is not a prime number.\";\n}\n?>\n```\n\nThis script defines a function `isPrime` that takes an integer as an argument and returns a boolean value indicating whether the number is prime or not. The function uses a simple loop to check divisibility starting from 2 up to the square root of the number. If the number is divisible by any number in this range, then"
  },
  {
    "id": 420,
    "question": "Write a PHP script that accepts two numbers as input from the user and returns their sum.",
    "answer": "Here's a simple PHP script that accepts two numbers as input from the user and returns their sum:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sum of Two Numbers</title>\n</head>\n<body>\n    <?php\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n            $num1 = $_POST[\"num1\"];\n            $num2 = $_POST[\"num2\"];\n            $sum = $num1 + $num2;\n            echo \"The sum of {$num1} and {$num2} is: {$sum}\";\n        }\n    ?>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <label for=\"num1\">Number 1:</label>\n        <input type=\""
  },
  {
    "id": 421,
    "question": "Write a PHP script that accepts two numbers as command-line arguments, performs addition, subtraction, multiplication, and division operations on those numbers, and displays the results.",
    "answer": "Here is a simple PHP script that accepts two command-line arguments and performs addition, subtraction, multiplication, and division operations on those numbers:\n\n```php\n<?php\n\n// Check if the correct number of arguments are provided\nif ($argc != 3) {\n    echo \"Usage: php arithmetic.php number1 number2\\n\";\n    exit(1);\n}\n\n// Assign command-line arguments to variables\n$number1 = $argv[1];\n$number2 = $argv[2];\n\n// Convert command-line arguments to integers\nif (!is_numeric($number1) || !is_numeric($number2)) {\n    echo \"Both arguments must be numbers.\\n\";\n    exit(1);\n}\n$number1 = intval($number1);\n$number2 = intval($number2);\n\n// Perform arithmetic operations\n$addition = $number1 + $number2;"
  },
  {
    "id": 422,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script to check if a given number is prime or not:\n\n```php\n<?php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $number; $i++) {\n        if ($number % $i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$number = 11; // You can change this number to test\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n?>\n```\n\nIn this script, we define a function `isPrime` that takes an integer as an argument and returns a boolean value. If the number is less than or equal to 1, it is not prime and we return false. Otherwise, we loop from 2 up to the square root of the number and check if it is divisible by any"
  },
  {
    "id": 423,
    "question": "Write a PHP script to display the Fibonacci sequence up to n numbers.",
    "answer": "Here is a simple PHP script to display the Fibonacci sequence up to a given number `n`. This script uses a loop to calculate each number in the sequence.\n\n```php\n<?php\n// Set the number of terms to be displayed in the sequence\n$n = 10;\n\n// Initialize the first two terms of the sequence\n$num1 = 0;\n$num2 = 1;\n\n// Display the first term\necho $num1;\n\n// Use a loop to calculate and display the next terms\nfor ($i = 0; $i < $n - 1; $i++) {\n    // Calculate the next term in the sequence\n    $next_term = $num1 + $num2;\n\n    // Display the next term\n    echo \" \" . $next_term;\n\n    // Update the first two terms in the sequence\n    $num1 = $num2;\n    $num2 = $next_term;\n}\n?>\n```\n\nWhen you run this script, it will display the"
  },
  {
    "id": 424,
    "question": "Write a PHP script to reverse the string \"Hello World!\" using a function.",
    "answer": "Here's a simple PHP function to reverse a given string:\n\n```php\nfunction reverseString($str) {\n    $length = strlen($str);\n    $reversed = '';\n    for ($i = 0; $i < $length; $i++) {\n        $reversed .= $str[$length - 1 - $i];\n    }\n    return $reversed;\n}\n\n// Usage\n$string = \"Hello World!\";\n$reversed = reverseString($string);\necho $reversed; // Output: dlroW olleH\n```\n\nThis function, `reverseString`, takes a string as an argument and returns the reversed string. It calculates the length of the string and then iterates through each character from the end to the beginning, appending it to the `$reversed` variable. Once all characters have been reversed, the function returns the reversed string."
  },
  {
    "id": 425,
    "question": "Write a PHP script to find the sum of all numbers in an array.",
    "answer": "Here is a simple PHP script to find the sum of all numbers in an array:\n\n```php\n<?php\n// Define an array of numbers\n$numbers = array(1, 2, 3, 4, 5);\n\n// Initialize a variable to store the sum\n$sum = 0;\n\n// Use a loop to iterate through the array and add each number to the sum\nforeach ($numbers as $number) {\n    $sum += $number;\n}\n\n// Output the sum\necho \"The sum of all numbers in the array is: \" . $sum;\n?>\n```\n\nThis script initializes an array of numbers, sets the sum variable to zero, uses a `foreach` loop to iterate through the array and add each number to the sum, and finally outputs the sum of all numbers in the array."
  },
  {
    "id": 426,
    "question": "Write a PHP script to find the factorial of a given number using a recursive function.",
    "answer": "Here's a simple PHP script that calculates the factorial of a given number using a recursive function:\n\n```php\n<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n$number = 5; // You can change this value to test different numbers\n$result = factorial($number);\necho \"The factorial of $number is: \" . $result;\n?>\n```\n\nIn this script, the `factorial` function takes an integer as an argument and calculates its factorial using recursion. If the number is 0, the function returns 1 (since the factorial of 0 is 1). Otherwise, the function calls itself with the argument decremented by 1 and multiplies the result by the current number. This process continues until the base case (number equals 0) is reached."
  },
  {
    "id": 427,
    "question": "Write a PHP script to generate an array of numbers from 1 to n, where n is a user-defined number. Then, calculate the sum of all the numbers in the array and print the result.",
    "answer": "Here's a simple PHP script that meets the requirements:\n\n```php\n<?php\n// Get user input for the number 'n'\nif(isset($_POST['number'])){\n    $n = intval($_POST['number']);\n}\n\n// Function to generate an array of numbers from 1 to n\nfunction generateArray($n){\n    $array = array();\n    for($i = 1; $i <= $n; $i++){\n        $array[] = $i;\n    }\n    return $array;\n}\n\n// Generate the array and calculate the sum\nif(isset($n)){\n    $array = generateArray($n);\n    $sum = array_sum($array);\n    echo \"The sum of numbers from 1 to {$n} is: {$sum}.\";\n}\n?>\n\n<!-- HTML form for user input -->\n<form method=\"post\">\n    <label for=\"number\">Enter"
  },
  {
    "id": 428,
    "question": "Write a PHP script to create an array of numbers from 1 to 10, then use a loop to print out each number in the array and add 2 to it, and print the result.",
    "answer": "Here's an example PHP script that solves the problem:\n\n```php\n<?php\n// Create an array of numbers from 1 to 10\n$numbers = range(1, 10);\n\n// Use a for loop to print out each number in the array, add 2, and print the result\nfor ($i = 0; $i < count($numbers); $i++) {\n    $result = $numbers[$i] + 2;\n    echo $numbers[$i] . \" + 2 = \" . $result . \"\\n\";\n}\n?>\n```\n\nThis script uses the `range()` function to create an array of numbers from 1 to 10, and then uses a `for` loop to iterate through each number in the array, adds 2 to it, and prints out the result. The `count()` function is used to get the number of elements in the array,"
  },
  {
    "id": 429,
    "question": "Write a PHP script to calculate the sum of two numbers using user input.",
    "answer": "Here's a simple PHP script to calculate the sum of two numbers using user input:\n\n```php\n<?php\n// Get user input\n$num1 = readline(\"Enter the first number: \");\n$num2 = readline(\"Enter the second number: \");\n\n// Convert user input to integers\n$num1 = intval($num1);\n$num2 = intval($num2);\n\n// Calculate the sum\n$sum = $num1 + $num2;\n\n// Display the result\necho \"The sum of \" . $num1 . \" and \" . $num2 . \" is: \" . $sum;\n?>\n```\n\nThis script uses the `readline()` function to get user input and the `intval()` function to convert user input to integers before performing the addition. Finally, it uses the `echo` statement to display the result to the user."
  },
  {
    "id": 430,
    "question": "Write a PHP script to display the Fibonacci sequence up to n numbers.",
    "answer": "Here's a simple PHP script to display the Fibonacci sequence up to a given number `n`:\n\n```php\n<?php\n$n = 10; // Set the number of Fibonacci numbers to display\n$a = $b = 0; // Initialize the first two numbers in the sequence\n\nfor ($i = 0; $i < $n; $i++) {\n    echo $a . \" \"; // Print the current number\n    $c = $a + $b; // Calculate the next number in the sequence\n    $a = $b; // Update the previous number\n    $b = $c; // Update the current number\n}\n?>\n```\n\nThis script initializes two variables `$a` and `$b` to 0, representing the first two numbers in the Fibonacci sequence. It then uses a `for` loop to calculate and print the next numbers in the sequence until it reaches the desired number `n`. The variables `$a` and `$b` are updated in each iteration to represent"
  },
  {
    "id": 431,
    "question": "Write a PHP script to generate an array of numbers from 1 to 25, and then use a loop to print out all the even numbers in that array.",
    "answer": "Here's a simple PHP script to generate an array of numbers from 1 to 25 and print out all the even numbers using a for loop:\n\n```php\n<?php\n// Create an array of numbers from 1 to 25\n$numbers = range(1, 25);\n\n// Use a for loop to print out all the even numbers in the array\necho \"Even numbers from 1 to 25: \";\nfor ($i = 0; $i < count($numbers); $i++) {\n    if ($numbers[$i] % 2 == 0) {\n        echo $numbers[$i] . \" \";\n    }\n}\necho \"\\n\";\n?>\n```\n\nThis script uses the `range()` function to generate an array of numbers from 1 to 25, and then uses a `for` loop to iterate through each number in the array. The `if` statement checks if the number is even by using"
  },
  {
    "id": 432,
    "question": "Write a PHP script to generate an array of numbers from 1 to n, where n is a user-supplied input. Display the generated array.",
    "answer": "Here's a simple PHP script that takes user input for the number 'n' and generates an array of numbers from 1 to n. It then displays the generated array using the `print_r()` function.\n\n```php\n<?php\n// Read user input\n$n = intval(readline(\"Enter the number: \"));\n\n// Generate array of numbers from 1 to n\n$array = range(1, $n);\n\n// Display the generated array\nprint_r($array);\n?>\n```\n\nThis script uses the `readline()` function to get user input, the `intval()` function to convert the user input to an integer, and the `range()` function to generate an array of numbers from 1 to n. The `print_r()` function is used to display the generated array."
  },
  {
    "id": 433,
    "question": "Write a PHP script to read a CSV file and print out the total sales for each product.",
    "answer": "To solve this problem, we'll use the PHP function `fgetcsv()` to read the CSV file line by line and extract the product name and sales information. We'll store this data in an associative array, where the keys will be the product names and the values will be the total sales for each product.\n\nHere's the code:\n\n```php\n<?php\n$file = 'sales.csv'; // Replace with the name of your CSV file\n$sales = []; // Initialize an empty associative array to store sales data\n\nif (($handle = fopen($file, 'r')) !== FALSE) {\n    while (($data = fgetcsv($handle, 1000, ',')) !== FALSE) {\n        $product = $data[0]; // Get the product name\n        $sales_amount = $data[1]; // Get the sales amount\n\n        if (!isset($sales[$product])) {\n            $sales[$product] = 0; // Initialize sales for new products"
  },
  {
    "id": 434,
    "question": "Write a PHP script to find the sum of two numbers using form data.",
    "answer": "Here's a simple PHP script that takes two numbers as input through an HTML form and returns their sum:\n\n```php\n<?php\n// Get input values from form data\n$num1 = $_POST['num1'];\n$num2 = $_POST['num2'];\n\n// Validate input to ensure numbers were provided\nif (is_numeric($num1) && is_numeric($num2)) {\n    $sum = $num1 + $num2;\n    echo \"The sum of {$num1} and {$num2} is {$sum}.\";\n} else {\n    echo \"Invalid input. Please provide numbers for the sum.\";\n}\n?>\n```\n\nHTML form:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sum of Two Numbers</title>\n</head>\n<body>\n    <"
  },
  {
    "id": 435,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here's a simple PHP script to check if a given number is prime or not:\n\n```php\n<?php\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $number; $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test the function\n$number = 11;\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n?>\n```\n\nThis script defines a function `isPrime()` that takes an integer as an argument and returns a boolean value indicating whether the number is prime or not. The function uses a simple loop to check if the number is divisible by any number from 2 to the square root of the number. If it is, then the number is not prime. If the"
  },
  {
    "id": 436,
    "question": "Write a PHP script that accepts an array of integers as input and returns the sum of all even numbers in the array.",
    "answer": "Here's a simple PHP script that accepts an array of integers as input and returns the sum of all even numbers in the array:\n\n```php\n<?php\nfunction sumEvenNumbers($numbers) {\n    $sum = 0;\n    foreach ($numbers as $number) {\n        if ($number % 2 == 0) {\n            $sum += $number;\n        }\n    }\n    return $sum;\n}\n\n// Example usage:\n$numbers = [1, 2, 3, 4, 5, 6];\n$sum = sumEvenNumbers($numbers);\necho \"The sum of even numbers is: \" . $sum;\n?>\n```\n\nThis script defines a function `sumEvenNumbers` that takes an array of integers as its argument. It initializes a variable `$sum` to 0 and uses a `foreach` loop to iterate through each number in the array. If a number is even (i.e., its remainder"
  },
  {
    "id": 437,
    "question": "Write a PHP script to reverse a given string without using built-in functions like strrev().",
    "answer": "To reverse a string without using the built-in strrev() function in PHP, you can create a custom function that swaps the characters at the beginning and end of the string and continues this process until the entire string is reversed. Here's an example:\n\n```php\nfunction reverseString($str) {\n    $len = strlen($str);\n    $reversed = '';\n\n    for ($i = 0; $i < $len; $i++) {\n        $reversed = $str[$i] . $reversed;\n    }\n\n    return $reversed;\n}\n\n// Test the function\n$str = 'Hello, World!';\n$reversed = reverseString($str);\necho $reversed; // Output: dlroW ,olleH\n```\n\nIn this example, the `reverseString()` function takes a string as an argument, calculates its length, initializes an empty string `$reversed`, and then iterates through each character in the input string using a `"
  },
  {
    "id": 438,
    "question": "Write a PHP script that takes two numbers as input from the user and displays their sum.",
    "answer": "Here is a simple PHP script that accomplishes this task:\n\n```php\n<?php\n// get input from user\n$num1 = readline(\"Enter first number: \");\n$num2 = readline(\"Enter second number: \");\n\n// convert input to integers\n$num1 = intval($num1);\n$num2 = intval($num2);\n\n// calculate sum and display result\n$sum = $num1 + $num2;\necho \"The sum of $num1 and $num2 is: $sum\";\n?>\n```\n\nThis script uses the `readline()` function to get input from the user and the `intval()` function to convert the input to integers. The sum of the two numbers is calculated and displayed using the `echo` statement."
  },
  {
    "id": 439,
    "question": "Write a PHP script that takes an array of numbers as an argument and returns the sum of all even numbers in the array.",
    "answer": "Here is a simple PHP script that fulfills the requirements:\n\n```php\n<?php\nfunction sumEvenNumbers($numbers) {\n    $sum = 0;\n    foreach ($numbers as $number) {\n        if ($number % 2 == 0) {\n            $sum += $number;\n        }\n    }\n    return $sum;\n}\n\n$numbers = [1, 2, 3, 4, 5, 6];\n$sum = sumEvenNumbers($numbers);\necho \"The sum of even numbers in the array is: \" . $sum;\n?>\n```\n\nIn this script, we define a function `sumEvenNumbers` that takes an array of numbers as an argument. We initialize a variable `$sum` to 0 and then use a `foreach` loop to iterate through each number in the array. If the number is even (i.e., its remainder when divided by 2 is 0), we add it to the `"
  },
  {
    "id": 440,
    "question": "Write a PHP script to find the factorial of a given number using recursion.",
    "answer": "Here's a simple PHP script to find the factorial of a given number using recursion:\n\n```php\n<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n$number = 5; // You can change this value to test different numbers\n$result = factorial($number);\necho \"The factorial of {$number} is: {$result}\";\n?>\n```\n\nIn this script, we define a function `factorial` that takes an integer `$n` as an argument. If `$n` is equal to 0, the function returns 1 (since the factorial of 0 is 1). Otherwise, the function calls itself with the argument `$n-1` and multiplies the result by `$n`. This process continues until `$n` reaches 0, at which point the recursion ends and the final result is returned."
  },
  {
    "id": 441,
    "question": "Write a PHP script that accepts two numbers as input from the user, performs the addition operation, and displays the result.",
    "answer": "Here is a simple PHP script that accepts two numbers as input from the user, performs the addition operation, and displays the result:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PHP Addition</title>\n</head>\n<body>\n    <h1>Add Two Numbers</h1>\n    <?php\n        if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n            $num1 = $_POST[\"num1\"];\n            $num2 = $_POST[\"num2\"];\n            $sum = $num1 + $num2;\n            echo \"<p>The sum of {$num1} and {$num2} is: {$sum}</p>\";\n        }\n    ?>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>"
  },
  {
    "id": 442,
    "question": "Write a PHP script to reverse the string \"Hello World!\" and print the reversed string.",
    "answer": "Here is a simple PHP script to reverse a string and print the reversed string:\n\n```php\n<?php\n// Original string\n$str = \"Hello World!\";\n\n// Reverse the string\n$len = strlen($str);\n$rev_str = \"\";\nfor ($i = $len - 1; $i >= 0; $i--) {\n    $rev_str .= $str[$i];\n}\n\n// Print the reversed string\necho $rev_str;\n?>\n```\n\nThis script initializes a string `$str` with the value \"Hello World!\". It then calculates the length of the string using the `strlen()` function and initializes an empty string `$rev_str` to store the reversed string. The `for` loop runs from the end of the string to the beginning, adding each character to the `$rev_str` string. Finally, the script prints the reversed string using the `echo` statement. The output of this script would be \"!dlroW olleH\"."
  },
  {
    "id": 443,
    "question": "Write a PHP script to create an array of numbers from 1 to 10, and then use a loop to print out each number and its square.",
    "answer": "Here's a simple PHP script that creates an array of numbers from 1 to 10 and uses a loop to print out each number and its square:\n\n```php\n<?php\n// Create an array of numbers from 1 to 10\n$numbers = range(1, 10);\n\n// Use a for loop to print out each number and its square\necho \"Number\\tSquare\\n\";\nfor ($i = 0; $i < count($numbers); $i++) {\n    $square = pow($numbers[$i], 2);\n    echo $numbers[$i] . \"\\t\" . $square . \"\\n\";\n}\n?>\n```\n\nThis script uses the `range()` function to create an array of numbers from 1 to 10. It then uses a `for` loop to iterate through each number in the array, calculates the square using the `pow()` function, and prints out the number and its square using"
  },
  {
    "id": 444,
    "question": "Write a PHP script to reverse the string \"hello world\" and print the reversed string.",
    "answer": "Here's a simple PHP script that reverses the given string \"hello world\" and prints the reversed string:\n\n```php\n<?php\n$str = \"hello world\"; // given string\n$length = strlen($str); // get the length of the string\n$reversed = \"\"; // initialize an empty string to store the reversed string\n\nfor ($i = $length - 1; $i >= 0; $i--) { // loop through the string in reverse order\n    $reversed .= $str[$i]; // append each character to the reversed string\n}\n\necho $reversed; // print the reversed string\n?>\n```\n\nThis script uses a for loop to iterate through the string in reverse order, appending each character to the `$reversed` string. Once the loop is complete, the script prints the reversed string using the `echo` statement."
  },
  {
    "id": 445,
    "question": "Write a PHP script that accepts two numbers as input from the user, performs addition, subtraction, multiplication, and division operations, and displays the result of each operation.",
    "answer": "Here is a simple PHP script that meets the requirements:\n\n```php\n<?php\n$num1 = readline(\"Enter the first number: \");\n$num2 = readline(\"Enter the second number: \");\n\n$add = $num1 + $num2;\n$subtract = $num1 - $num2;\n$multiply = $num1 * $num2;\n$divide = $num1 / $num2;\n\necho \"The sum of $num1 and $num2 is: \" . $add . \"\\n\";\necho \"The difference of $num1 and $num2 is: \" . $subtract . \"\\n\";\necho \"The product of $num1 and $num2 is: \" . $multiply . \"\\n\";\necho \"The quotient of $num1 and $num2 is: \" . $divide . \"\\n\";\n?>\n```\n\nThis script uses the `readline()` function to get input"
  },
  {
    "id": 446,
    "question": "Write a PHP script to reverse the words in a given string, where words are separated by spaces.",
    "answer": "Here is a simple PHP script to reverse the words in a given string, where words are separated by spaces:\n\n```php\n<?php\n$str = \"This is a sample string\";\n$words = explode(\" \", $str); // Explode the string into an array using space as delimiter\n$reversed_words = array_map(function($word) {\n    return strrev($word); // Reverse each word\n}, $words); // Apply the strrev() function to each word using array_map()\n$reversed_string = implode(\" \", $reversed_words); // Join the reversed words back into a string using space as delimiter\necho $reversed_string; // Output the reversed string\n?>\n```\n\nOutput:\n```\nginhtes a si sihT sih a sample gnitrepgs a ereht si sihT\n```\n\nThis script uses the `explode()` function to split the input string into an array of words, then `array_map()`"
  },
  {
    "id": 447,
    "question": "Write a PHP script to reverse the string using a function.",
    "answer": "Here's a simple PHP function to reverse a string:\n\n```php\nfunction reverseString($str) {\n    return strrev($str);\n}\n\n// Usage:\n$str = \"Hello, World!\";\necho reverseString($str); // Output: dlroW ,olleH\n```\n\nIn this example, we define a function named `reverseString` which takes a single argument `$str`. The function uses the built-in `strrev()` function to reverse the given string and returns the reversed string. The usage of the function is demonstrated at the end of the script where we call the function with the string \"Hello, World!\" as an argument and print the reversed string."
  },
  {
    "id": 448,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script to check if a given number is prime or not:\n\n```php\n<?php\nfunction is_prime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $number; $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n$num = 11; // You can change this number to test\nif (is_prime($num)) {\n    echo \"$num is a prime number.\";\n} else {\n    echo \"$num is not a prime number.\";\n}\n?>\n```\n\nIn this script, we define a function `is_prime` that takes an integer as an argument and returns a boolean value indicating whether the number is prime or not. The function uses a simple loop to check if the number is divisible by any number from 2 to the square root of the number. If the number is divisible by any of"
  },
  {
    "id": 449,
    "question": "Write a PHP script to check if a given number is prime or not.",
    "answer": "Here is a simple PHP script to check if a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n```php\n<?php\n// Function to check if a number is prime\nfunction isPrime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($number); $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Read number from user input\n$number = readline(\"Enter a number: \");\n\n// Check if the number is prime or not\nif (isPrime($number)) {\n    echo \"$number is a prime number.\";\n} else {\n    echo \"$number is not a prime number.\";\n}\n?>\n```\n\nThis script defines a function `isPrime()` which checks if a given number is prime or not by iterating"
  },
  {
    "id": 450,
    "question": "Write a PHP script to create an array of numbers from 1 to 25 and then use a loop to print out all the even numbers in the array.",
    "answer": "Here's a simple PHP script to create an array of numbers from 1 to 25 and then use a loop to print out all the even numbers in the array:\n\n```php\n<?php\n// Create an array of numbers from 1 to 25\n$numbers = range(1, 25);\n\n// Use a for loop to print out all the even numbers in the array\necho \"Even numbers from array (1 to 25): \";\nfor ($i = 0; $i < count($numbers); $i++) {\n    if ($numbers[$i] % 2 == 0) {\n        echo $numbers[$i] . \" \";\n    }\n}\n?>\n```\n\nThis script uses the `range()` function to create an array of numbers from 1 to 25. It then uses a `for` loop to iterate through each number in the array and checks if it is even using the modulo operator `%`. If"
  }
]